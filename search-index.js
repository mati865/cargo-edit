var N = null;var searchIndex = {};
searchIndex["adler32"]={"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",N,N],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",N,[[["r"]],["result",["u32"]]]],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,[[],["rollingadler32"]]],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,[[["u32"]],["rollingadler32"]]],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,N],[11,"hash","","Returns the current hash.",0,[[["self"]],["u32"]]],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,[[["self"],["usize"],["u8"]]]],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,[[["self"],["u8"]]]],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,N]],"paths":[[3,"RollingAdler32"]]};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"clone","","",0,[[["self"]],["match"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["match"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["match"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"clone","","",5,[[["self"]],["fullacautomaton"]]],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,[[["acautomaton"]],["fullacautomaton"]]],[11,"next_state","","",5,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",5,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",5,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",5,N],[11,"patterns","","",5,N],[11,"pattern","","",5,[[["self"],["usize"]],["p"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",6,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,N],[10,"pattern","","Returns the pattern indexed at `i`.",6,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",7,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",7,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",7,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,[[["self"]],["usize"]]],[11,"clone","","",8,[[["self"]],["acautomaton"]]],[11,"new","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",8,[[["self"]],["fullacautomaton"]]],[11,"next_state","","",8,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",8,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",8,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",8,N],[11,"patterns","","",8,N],[11,"pattern","","",8,[[["self"],["usize"]],["p"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",8,[[["t"]],["acautomaton"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["ascii"]={"doc":"A library that provides ASCII-only string and character types, equivalent to the `char`, `str` and `String` types in the standard library.","items":[[3,"ToAsciiCharError","ascii","Error returned by `ToAsciiChar`.",N,N],[3,"AsciiStr","","AsciiStr represents a byte or string slice that only contains ASCII characters.",N,N],[3,"AsAsciiStrError","","Error that is returned when a sequence of `u8` are not all ASCII.",N,N],[3,"AsciiString","","A growable string stored as an ASCII encoded buffer.",N,N],[4,"AsciiChar","","An ASCII character. It wraps a `u8`, with the highest bit always zero.",N,N],[13,"Null","","`'\\0'`",0,N],[13,"SOH","","Start Of Heading",0,N],[13,"SOX","","Start Of teXt",0,N],[13,"ETX","","End of TeXt",0,N],[13,"EOT","","End Of Transmission",0,N],[13,"ENQ","","Enquiry",0,N],[13,"ACK","","Acknowledgement",0,N],[13,"Bell","","bell / alarm / audible",0,N],[13,"BackSpace","","Backspace",0,N],[13,"Tab","","`'\\t'`",0,N],[13,"LineFeed","","`'\\n'`",0,N],[13,"VT","","Vertical tab",0,N],[13,"FF","","Form Feed",0,N],[13,"CarriageReturn","","`'\\r'`",0,N],[13,"SI","","Shift In",0,N],[13,"SO","","Shift Out",0,N],[13,"DLE","","Data Link Escape",0,N],[13,"DC1","","Device control 1, often XON",0,N],[13,"DC2","","Device control 2",0,N],[13,"DC3","","Device control 3, Often XOFF",0,N],[13,"DC4","","Device control 4",0,N],[13,"NAK","","Negative AcKnowledgement",0,N],[13,"SYN","","Synchronous idle",0,N],[13,"ETB","","End of Transmission Block",0,N],[13,"CAN","","Cancel",0,N],[13,"EM","","End of Medium",0,N],[13,"SUB","","Substitute",0,N],[13,"ESC","","Escape",0,N],[13,"FS","","File Separator",0,N],[13,"GS","","Group Separator",0,N],[13,"RS","","Record Separator",0,N],[13,"US","","Unit Separator",0,N],[13,"Space","","`' '`",0,N],[13,"Exclamation","","`'!'`",0,N],[13,"Quotation","","`'\"'`",0,N],[13,"Hash","","`'#'`",0,N],[13,"Dollar","","`'$'`",0,N],[13,"Percent","","`'%'`",0,N],[13,"Ampersand","","`'&'`",0,N],[13,"Apostrophe","","`'\\''`",0,N],[13,"ParenOpen","","`'('`",0,N],[13,"ParenClose","","`')'`",0,N],[13,"Asterisk","","`'*'`",0,N],[13,"Plus","","`'+'`",0,N],[13,"Comma","","`','`",0,N],[13,"Minus","","`'-'`",0,N],[13,"Dot","","`'.'`",0,N],[13,"Slash","","`'/'`",0,N],[13,"_0","","`'0'`",0,N],[13,"_1","","`'1'`",0,N],[13,"_2","","`'2'`",0,N],[13,"_3","","`'3'`",0,N],[13,"_4","","`'4'`",0,N],[13,"_5","","`'5'`",0,N],[13,"_6","","`'6'`",0,N],[13,"_7","","`'7'`",0,N],[13,"_8","","`'8'`",0,N],[13,"_9","","`'9'`",0,N],[13,"Colon","","`':'`",0,N],[13,"Semicolon","","`';'`",0,N],[13,"LessThan","","`'<'`",0,N],[13,"Equal","","`'='`",0,N],[13,"GreaterThan","","`'>'`",0,N],[13,"Question","","`'?'`",0,N],[13,"At","","`'@'`",0,N],[13,"A","","`'A'`",0,N],[13,"B","","`'B'`",0,N],[13,"C","","`'C'`",0,N],[13,"D","","`'D'`",0,N],[13,"E","","`'E'`",0,N],[13,"F","","`'F'`",0,N],[13,"G","","`'G'`",0,N],[13,"H","","`'H'`",0,N],[13,"I","","`'I'`",0,N],[13,"J","","`'J'`",0,N],[13,"K","","`'K'`",0,N],[13,"L","","`'L'`",0,N],[13,"M","","`'M'`",0,N],[13,"N","","`'N'`",0,N],[13,"O","","`'O'`",0,N],[13,"P","","`'P'`",0,N],[13,"Q","","`'Q'`",0,N],[13,"R","","`'R'`",0,N],[13,"S","","`'S'`",0,N],[13,"T","","`'T'`",0,N],[13,"U","","`'U'`",0,N],[13,"V","","`'V'`",0,N],[13,"W","","`'W'`",0,N],[13,"X","","`'X'`",0,N],[13,"Y","","`'Y'`",0,N],[13,"Z","","`'Z'`",0,N],[13,"BracketOpen","","`'['`",0,N],[13,"BackSlash","","`'\\'`",0,N],[13,"BracketClose","","`']'`",0,N],[13,"Caret","","`'_'`",0,N],[13,"UnderScore","","`'_'`",0,N],[13,"Grave","","`'`'`",0,N],[13,"a","","`'a'`",0,N],[13,"b","","`'b'`",0,N],[13,"c","","`'c'`",0,N],[13,"d","","`'d'`",0,N],[13,"e","","`'e'`",0,N],[13,"f","","`'f'`",0,N],[13,"g","","`'g'`",0,N],[13,"h","","`'h'`",0,N],[13,"i","","`'i'`",0,N],[13,"j","","`'j'`",0,N],[13,"k","","`'k'`",0,N],[13,"l","","`'l'`",0,N],[13,"m","","`'m'`",0,N],[13,"n","","`'n'`",0,N],[13,"o","","`'o'`",0,N],[13,"p","","`'p'`",0,N],[13,"q","","`'q'`",0,N],[13,"r","","`'r'`",0,N],[13,"s","","`'s'`",0,N],[13,"t","","`'t'`",0,N],[13,"u","","`'u'`",0,N],[13,"v","","`'v'`",0,N],[13,"w","","`'w'`",0,N],[13,"x","","`'x'`",0,N],[13,"y","","`'y'`",0,N],[13,"z","","`'z'`",0,N],[13,"CurlyBraceOpen","","`'{'`",0,N],[13,"VerticalBar","","`'|'`",0,N],[13,"CurlyBraceClose","","`'}'`",0,N],[13,"Tilde","","`'~'`",0,N],[13,"DEL","","Delete",0,N],[11,"clone","","",0,[[["self"]],["asciichar"]]],[11,"eq","","",0,[[["self"],["asciichar"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["asciichar"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["asciichar"]],["ordering"]]],[11,"hash","","",0,N],[11,"from","","Constructs an ASCII character from a `u8`, `char` or other character type.",0,[[["c"]],["result",["toasciicharerror"]]]],[11,"from_unchecked","","Constructs an ASCII character from a `char` or `u8` without any checks.",0,[[["c"]],["self"]]],[11,"as_byte","","Converts an ASCII character into a `u8`.",0,[[["self"]],["u8"]]],[11,"as_char","","Converts an ASCII character into a `char`.",0,[[["self"]],["char"]]],[11,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",0,[[["self"]],["bool"]]],[11,"is_digit","","Check if the character is a number (0-9)",0,[[["self"]],["bool"]]],[11,"is_alphanumeric","","Check if the character is a letter or number",0,[[["self"]],["bool"]]],[11,"is_blank","","Check if the character is a space or horizontal tab",0,[[["self"]],["bool"]]],[11,"is_whitespace","","Check if the character is a ' ', '\\t', '\\n' or '\\r'",0,[[["self"]],["bool"]]],[11,"is_control","","Check if the character is a control character",0,[[["self"]],["bool"]]],[11,"is_graph","","Checks if the character is printable (except space)",0,[[["self"]],["bool"]]],[11,"is_print","","Checks if the character is printable (including space)",0,[[["self"]],["bool"]]],[11,"is_lowercase","","Checks if the character is alphabetic and lowercase",0,[[["self"]],["bool"]]],[11,"is_uppercase","","Checks if the character is alphabetic and uppercase",0,[[["self"]],["bool"]]],[11,"is_punctuation","","Checks if the character is punctuation",0,[[["self"]],["bool"]]],[11,"is_hex","","Checks if the character is a valid hex digit",0,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_ascii","","",0,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","",0,[[["self"]],["asciichar"]]],[11,"to_ascii_lowercase","","",0,[[["self"]],["asciichar"]]],[11,"eq_ignore_ascii_case","","",0,[[["self"],["self"]],["bool"]]],[11,"make_ascii_uppercase","","",0,[[["self"]]]],[11,"make_ascii_lowercase","","",0,[[["self"]]]],[11,"eq","","",1,[[["self"],["toasciicharerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["toasciicharerror"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"to_ascii_char","","",0,[[["self"]],["result",["asciichar","toasciicharerror"]]]],[11,"to_ascii_char_unchecked","","",0,[[["self"]],["asciichar"]]],[11,"eq","","",2,[[["self"],["asciistr"]],["bool"]]],[11,"ne","","",2,[[["self"],["asciistr"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["asciistr"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["asciistr"]],["bool"]]],[11,"le","","",2,[[["self"],["asciistr"]],["bool"]]],[11,"gt","","",2,[[["self"],["asciistr"]],["bool"]]],[11,"ge","","",2,[[["self"],["asciistr"]],["bool"]]],[11,"cmp","","",2,[[["self"],["asciistr"]],["ordering"]]],[11,"hash","","",2,N],[11,"new","","Coerces into an `AsciiStr` slice.",2,[[["s"]],["asciistr"]]],[11,"as_str","","Converts `&self` to a `&str` slice.",2,[[["self"]],["str"]]],[11,"as_bytes","","Converts `&self` into a byte slice.",2,N],[11,"as_slice","","Returns the entire string as slice of `AsciiChar`s.",2,N],[11,"as_mut_slice","","Returns the entire string as mutable slice of `AsciiChar`s.",2,N],[11,"as_ptr","","Returns a raw pointer to the `AsciiStr`'s buffer.",2,N],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the `AsciiStr`'s buffer.",2,N],[11,"to_ascii_string","","Copies the content of this `AsciiStr` into an owned `AsciiString`.",2,[[["self"]],["asciistring"]]],[11,"from_ascii","","Converts anything that can represent a byte slice into an `AsciiStr`.",2,[[["b"]],["result",["asciistr","asasciistrerror"]]]],[11,"from_ascii_unchecked","","Converts anything that can be represented as a byte slice to an `AsciiStr` without checking for non-ASCII characters..",2,[[["b"]],["asciistr"]]],[11,"len","","Returns the number of characters / bytes in this ASCII sequence.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the ASCII slice contains zero bytes.",2,[[["self"]],["bool"]]],[11,"trim","","Returns an ASCII string slice with leading and trailing whitespace removed.",2,[[["self"]],["self"]]],[11,"trim_left","","Returns an ASCII string slice with leading whitespace removed.",2,[[["self"]],["self"]]],[11,"trim_right","","Returns an ASCII string slice with trailing whitespace removed.",2,[[["self"]],["self"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"to_owned","","",2,[[["self"]],["asciistring"]]],[11,"as_ref","","",2,N],[11,"as_ref","","",2,[[["self"]],["str"]]],[11,"as_ref","","",2,N],[11,"as_mut","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"index","","",2,[[["self"],["usize"]],["asciichar"]]],[11,"index_mut","","",2,[[["self"],["usize"]],["asciichar"]]],[11,"index","","",2,[[["self"],["range",["usize"]]],["asciistr"]]],[11,"index_mut","","",2,[[["self"],["range",["usize"]]],["asciistr"]]],[11,"index","","",2,[[["self"],["rangeto",["usize"]]],["asciistr"]]],[11,"index_mut","","",2,[[["self"],["rangeto",["usize"]]],["asciistr"]]],[11,"index","","",2,[[["self"],["rangefrom",["usize"]]],["asciistr"]]],[11,"index_mut","","",2,[[["self"],["rangefrom",["usize"]]],["asciistr"]]],[11,"index","","",2,[[["self"],["rangefull"]],["asciistr"]]],[11,"index_mut","","",2,[[["self"],["rangefull"]],["asciistr"]]],[11,"is_ascii","","",2,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","",2,[[["self"]],["asciistring"]]],[11,"to_ascii_lowercase","","",2,[[["self"]],["asciistring"]]],[11,"eq_ignore_ascii_case","","",2,[[["self"],["self"]],["bool"]]],[11,"make_ascii_uppercase","","",2,[[["self"]]]],[11,"make_ascii_lowercase","","",2,[[["self"]]]],[11,"clone","","",3,[[["self"]],["asasciistrerror"]]],[11,"eq","","",3,[[["self"],["asasciistrerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["asasciistrerror"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"valid_up_to","","Returns the index of the first non-ASCII byte.",3,[[["self"]],["usize"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","Returns \"one or more bytes are not ASCII\"",3,[[["self"]],["str"]]],[11,"as_ascii_str","","",2,[[["self"]],["result",["asciistr","asasciistrerror"]]]],[11,"as_ascii_str_unchecked","","",2,[[["self"]],["asciistr"]]],[11,"as_mut_ascii_str","","",2,[[["self"]],["result",["asciistr","asasciistrerror"]]]],[11,"as_mut_ascii_str_unchecked","","",2,[[["self"]],["asciistr"]]],[11,"clone","","",4,[[["self"]],["asciistring"]]],[11,"default","","",4,[[],["asciistring"]]],[11,"eq","","",4,[[["self"],["asciistring"]],["bool"]]],[11,"ne","","",4,[[["self"],["asciistring"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["asciistring"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["asciistring"]],["bool"]]],[11,"le","","",4,[[["self"],["asciistring"]],["bool"]]],[11,"gt","","",4,[[["self"],["asciistring"]],["bool"]]],[11,"ge","","",4,[[["self"],["asciistring"]],["bool"]]],[11,"cmp","","",4,[[["self"],["asciistring"]],["ordering"]]],[11,"hash","","",4,N],[11,"new","","Creates a new, empty ASCII string buffer without allocating.",4,[[],["self"]]],[11,"with_capacity","","Creates a new ASCII string buffer with the given capacity. The string will be able to hold exactly `capacity` bytes without reallocating. If `capacity` is 0, the ASCII string will not allocate.",4,[[["usize"]],["self"]]],[11,"from_raw_parts","","Creates a new `AsciiString` from a length, capacity and pointer.",4,N],[11,"from_ascii_unchecked","","Converts a vector of bytes to an `AsciiString` without checking for non-ASCII characters.",4,[[["b"]],["self"]]],[11,"from_ascii","","Converts anything that can represent a byte buffer into an `AsciiString`.",4,[[["b"]],["result",["asciistring"]]]],[11,"push_str","","Pushes the given ASCII string onto this ASCII string buffer.",4,[[["self"],["asciistr"]]]],[11,"capacity","","Returns the number of bytes that this ASCII string buffer can hold without reallocating.",4,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted in the given `AsciiString`. The collection may reserve more space to avoid frequent reallocations.",4,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be inserted in the given `AsciiString`. Does nothing if the capacity is already sufficient.",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this ASCII string buffer to match it's length.",4,[[["self"]]]],[11,"push","","Adds the given ASCII character to the end of the ASCII string.",4,[[["self"],["asciichar"]]]],[11,"truncate","","Shortens a ASCII string to the specified length.",4,[[["self"],["usize"]]]],[11,"pop","","Removes the last character from the ASCII string buffer and returns it. Returns `None` if this string buffer is empty.",4,[[["self"]],["option",["asciichar"]]]],[11,"remove","","Removes the ASCII character at position `idx` from the buffer and returns it.",4,[[["self"],["usize"]],["asciichar"]]],[11,"insert","","Inserts an ASCII character into the buffer at position `idx`.",4,[[["self"],["usize"],["asciichar"]]]],[11,"len","","Returns the number of bytes in this ASCII string.",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the ASCII string contains zero bytes.",4,[[["self"]],["bool"]]],[11,"clear","","Truncates the ASCII string, setting length (but not capacity) to zero.",4,[[["self"]]]],[11,"deref","","",4,[[["self"]],["asciistr"]]],[11,"deref_mut","","",4,[[["self"]],["asciistr"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"eq","","",4,[[["self"],["string"]],["bool"]]],[11,"ne","","",4,[[["self"],["string"]],["bool"]]],[11,"eq","","",4,[[["self"],["asciistr"]],["bool"]]],[11,"ne","","",4,[[["self"],["asciistr"]],["bool"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"ne","","",4,[[["self"],["str"]],["bool"]]],[11,"borrow","","",4,[[["self"]],["asciistr"]]],[11,"from","","",4,[[["vec",["asciichar"]]],["self"]]],[11,"into","","",4,[[["self"]],["vec",["u8"]]]],[11,"into","","",4,[[["self"]],["string"]]],[11,"as_ref","","",4,[[["self"]],["asciistr"]]],[11,"as_mut","","",4,[[["self"]],["asciistr"]]],[11,"from_str","","",4,[[["str"]],["result",["asciistring","asasciistrerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",4,[[["i"]],["asciistring"]]],[11,"from_iter","","",4,[[["i"]],["asciistring"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"add","","",4,[[["self"],["asciistr"]],["asciistring"]]],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"into_ascii_string_unchecked","","",4,[[["self"]],["asciistring"]]],[11,"into_ascii_string","","",4,[[["self"]],["result",["asciistring"]]]],[8,"ToAsciiChar","","Convert `char`, `u8` and other character types to `AsciiChar`.",N,N],[10,"to_ascii_char_unchecked","","Convert to `AsciiChar` without checking that it is an ASCII character.",5,[[["self"]],["asciichar"]]],[10,"to_ascii_char","","Convert to `AsciiChar`.",5,[[["self"]],["result",["asciichar","toasciicharerror"]]]],[8,"AsAsciiStr","","Convert slices of bytes to `AsciiStr`.",N,N],[10,"as_ascii_str_unchecked","","Convert to an ASCII slice without checking for non-ASCII characters.",6,[[["self"]],["asciistr"]]],[10,"as_ascii_str","","Convert to an ASCII slice.",6,[[["self"]],["result",["asciistr","asasciistrerror"]]]],[8,"AsMutAsciiStr","","Convert mutable slices of bytes to `AsciiStr`.",N,N],[10,"as_mut_ascii_str_unchecked","","Convert to a mutable ASCII slice without checking for non-ASCII characters.",7,[[["self"]],["asciistr"]]],[10,"as_mut_ascii_str","","Convert to a mutable ASCII slice.",7,[[["self"]],["result",["asciistr","asasciistrerror"]]]],[8,"IntoAsciiString","","Convert vectors into `AsciiString`.",N,N],[10,"into_ascii_string_unchecked","","Convert to `AsciiString` without checking for non-ASCII characters.",8,[[["self"]],["asciistring"]]],[10,"into_ascii_string","","Convert to `AsciiString`.",8,[[["self"]],["result",["asciistring"]]]]],"paths":[[4,"AsciiChar"],[3,"ToAsciiCharError"],[3,"AsciiStr"],[3,"AsAsciiStrError"],[3,"AsciiString"],[8,"ToAsciiChar"],[8,"AsAsciiStr"],[8,"AsMutAsciiStr"],[8,"IntoAsciiString"]]};
searchIndex["atty"]={"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",N,N],[13,"Stdout","","",0,N],[13,"Stderr","","",0,N],[13,"Stdin","","",0,N],[5,"is","","returns true if this is a tty",N,[[["stream"]],["bool"]]],[5,"isnt","","returns true if this is not a tty",N,[[["stream"]],["bool"]]],[11,"clone","","",0,[[["self"]],["stream"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Stream"]]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["backtrace"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"]={"doc":"","items":[[4,"backtrace_state","backtrace_sys","",N,N],[5,"backtrace_create_state","","",N,N],[5,"backtrace_syminfo","","",N,N],[5,"backtrace_pcinfo","","",N,N],[6,"backtrace_syminfo_callback","","",N,N],[6,"backtrace_full_callback","","",N,N],[6,"backtrace_error_callback","","",N,N]],"paths":[]};
searchIndex["base64"]={"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",N,N],[4,"DecodeError","","Errors that can occur while decoding.",N,N],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,N],[13,"InvalidLength","","The length of the input is invalid.",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,N],[4,"LineEnding","","Line ending used in optional line wrapping.",N,N],[13,"LF","","Unix-style \\n",2,N],[13,"CRLF","","Windows-style \\r\\n",2,N],[4,"LineWrap","","Line wrap configuration.",N,N],[13,"NoWrap","","Don't wrap.",3,N],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,N],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",N,[[["t"]],["string"]]],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",N,[[["t"],["config"]],["string"]]],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",N,[[["t"],["config"],["string"]]]],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",N,N],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",N,[[["t"]],["result",["vec","decodeerror"]]]],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",N,[[["t"],["config"]],["result",["vec","decodeerror"]]]],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",N,[[["t"],["config"],["vec"]],["result",["decodeerror"]]]],[5,"decode_config_slice","","Decode the input into the provided output slice.",N,N],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",N,N],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",N,N],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",N,N],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["displayerror"]],["bool"]]],[11,"with_config","","Create a `Base64Display` with the provided config.",5,N],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,N],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","base64","",0,[[["self"]],["decodeerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[17,"STANDARD","","Standard character set with padding.",N,N],[17,"STANDARD_NO_PAD","","Standard character set without padding.",N,N],[17,"MIME","","As per standards for MIME encoded messages",N,N],[17,"URL_SAFE","","URL-safe character set with padding",N,N],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",N,N],[17,"CRYPT","","As per `crypt(3)` requirements",N,N],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["lineending"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["linewrap"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["config"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Config`.",6,[[["characterset"],["bool"],["bool"],["linewrap"]],["config"]]]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",N,N],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",N,N],[17,"FLAG_A","","",N,N],[17,"FLAG_B","","",N,N],[17,"FLAG_C","","",N,N],[17,"FLAG_ABC","","",N,N],[11,"eq","","",0,[[["self"],["flags"]],["bool"]]],[11,"ne","","",0,[[["self"],["flags"]],["bool"]]],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"partial_cmp","","",0,[[["self"],["flags"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["flags"]],["bool"]]],[11,"le","","",0,[[["self"],["flags"]],["bool"]]],[11,"gt","","",0,[[["self"],["flags"]],["bool"]]],[11,"ge","","",0,[[["self"],["flags"]],["bool"]]],[11,"cmp","","",0,[[["self"],["flags"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",0,[[],["flags"]]],[11,"all","","Returns the set containing all flags.",0,[[],["flags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",0,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,[[["u32"]],["option",["flags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,[[["u32"]],["flags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",0,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,[[["self"],["flags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,[[["self"],["flags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"remove","","Removes the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"toggle","","Toggles the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,[[["self"],["flags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"bitor_assign","","Adds the set of flags.",0,[[["self"],["flags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,[[["self"],["flags"]],["flags"]]],[11,"bitxor_assign","","Toggles the set of flags.",0,[[["self"],["flags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",0,[[["self"],["flags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",0,[[["self"],["flags"]]]],[11,"not","","Returns the complement of this set of flags.",0,[[["self"]],["flags"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"from_iter","","",0,[[["t"]],["flags"]]],[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",0,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,N],[4,"BigEndian","","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[3,"Bytes","","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",N,N],[0,"buf","","Utilities for working with buffers.",N,N],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",N,N],[3,"Iter","","Iterator over the bytes contained by the buffer.",N,N],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",N,N],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",N,N],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",N,N],[11,"from_buf","bytes","",1,[[["t"]],["self"]]],[11,"from_buf","","",2,[[["t"]],["self"]]],[11,"fmt","bytes::buf","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,[[["t"],["u"]],["chain"]]],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,N],[11,"remaining","","",3,[[["self"]],["usize"]]],[11,"bytes","","",3,N],[11,"advance","","",3,[[["self"],["usize"]]]],[11,"bytes_vec","","",3,N],[11,"remaining_mut","","",3,[[["self"]],["usize"]]],[11,"bytes_mut","","",3,N],[11,"advance_mut","","",3,[[["self"],["usize"]]]],[11,"bytes_vec_mut","","",3,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"next","","",4,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",4,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,[[["self"]],["b"]]],[11,"read","","",5,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"limit","","Returns the maximum number of bytes that can be read.",6,[[["self"]],["usize"]]],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,[[["self"],["usize"]]]],[11,"remaining","","",6,[[["self"]],["usize"]]],[11,"bytes","","",6,N],[11,"advance","","",6,[[["self"],["usize"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,[[["self"]],["b"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"FromBuf","","Conversion from a [`Buf`]",N,N],[10,"from_buf","","Creates a value from a buffer.",10,[[["t"]],["self"]]],[8,"IntoBuf","","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,[[["usize"]],["bytes"]]],[11,"new","","Creates a new empty `Bytes`.",1,[[],["bytes"]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,N],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,[[["self"]],["bool"]]],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,[[["self"],["usize"],["usize"]],["bytes"]]],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,[[["self"],["usize"]],["bytes"]]],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,[[["self"],["usize"]],["bytes"]]],[11,"split_off","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"split_to","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",1,[[["self"]]]],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,[[["self"]],["result",["bytesmut","bytes"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",1,N],[11,"into_buf","","",1,N],[11,"clone","","",1,[[["self"]],["bytes"]]],[11,"as_ref","","",1,N],[11,"deref","","",1,N],[11,"from","","",1,[[["bytesmut"]],["bytes"]]],[11,"from","","",1,[[["vec",["u8"]]],["bytes"]]],[11,"from","","",1,[[["string"]],["bytes"]]],[11,"from","","",1,N],[11,"from","","",1,[[["str"]],["bytes"]]],[11,"from_iter","","",2,[[["t"]],["self"]]],[11,"from_iter","","",1,[[["t"]],["self"]]],[11,"eq","","",1,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["bytes"]],["ordering"]]],[11,"default","","",1,[[],["bytes"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"borrow","","",1,N],[11,"into_iter","","",1,N],[11,"extend","","",1,[[["self"],["t"]]]],[11,"extend","","",1,[[["self"],["t"]]]],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,[[["usize"]],["bytesmut"]]],[11,"new","","Creates a new `BytesMut` with default capacity.",2,[[],["bytesmut"]]],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,[[["self"]],["usize"]]],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,[[["self"]],["bytes"]]],[11,"split_off","","Splits the bytes into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,[[["self"]],["bytesmut"]]],[11,"split_to","","Splits the buffer into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",2,[[["self"]]]],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",2,[[["self"],["usize"],["u8"]]]],[11,"set_len","","Sets the length of the buffer.",2,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,[[["self"],["usize"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",2,N],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,[[["self"],["bytesmut"]]]],[11,"remaining_mut","","",2,[[["self"]],["usize"]]],[11,"advance_mut","","",2,[[["self"],["usize"]]]],[11,"bytes_mut","","",2,N],[11,"put_slice","","",2,N],[11,"put_u8","","",2,[[["self"],["u8"]]]],[11,"put_i8","","",2,[[["self"],["i8"]]]],[11,"into_buf","","",2,N],[11,"as_ref","","",2,N],[11,"deref","","",2,N],[11,"as_mut","","",2,N],[11,"deref_mut","","",2,N],[11,"from","","",2,[[["vec",["u8"]]],["bytesmut"]]],[11,"from","","",2,[[["string"]],["bytesmut"]]],[11,"from","","",2,N],[11,"from","","",2,[[["str"]],["bytesmut"]]],[11,"from","","",2,[[["bytes"]],["bytesmut"]]],[11,"eq","","",2,[[["self"],["bytesmut"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["bytesmut"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["bytesmut"]],["ordering"]]],[11,"default","","",2,[[],["bytesmut"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"borrow","","",2,N],[11,"borrow_mut","","",2,N],[11,"write_str","","",2,[[["self"],["str"]],["result"]]],[11,"write_fmt","","",2,[[["self"],["arguments"]],["result"]]],[11,"clone","","",2,[[["self"]],["bytesmut"]]],[11,"into_iter","","",2,N],[11,"extend","","",2,[[["self"],["t"]]]],[11,"extend","","",2,[[["self"],["t"]]]],[11,"eq","","",2,N],[11,"partial_cmp","","",2,N],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,N],[11,"partial_cmp","","",1,N],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",2,[[["self"],["bytes"]],["bool"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","bytes","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"IntoBuf","bytes","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"clone","","",12,[[["self"]],["bigendian"]]],[11,"clone","","",13,[[["self"]],["littleendian"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",13,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",12,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"cmp","","",12,[[["self"],["bigendian"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["littleendian"]],["ordering"]]],[11,"default","","",13,[[],["littleendian"]]],[11,"default","","",12,[[],["bigendian"]]],[11,"hash","","",13,N],[11,"hash","","",12,N],[11,"read_u16","","",12,N],[11,"read_u32","","",12,N],[11,"read_u64","","",12,N],[11,"read_uint","","",12,N],[11,"write_u16","","",12,N],[11,"write_u32","","",12,N],[11,"write_u64","","",12,N],[11,"write_uint","","",12,N],[11,"read_u16_into","","",12,N],[11,"read_u32_into","","",12,N],[11,"read_u64_into","","",12,N],[11,"write_u16_into","","",12,N],[11,"write_u32_into","","",12,N],[11,"write_u64_into","","",12,N],[11,"from_slice_u16","","",12,N],[11,"from_slice_u32","","",12,N],[11,"from_slice_u64","","",12,N],[11,"from_slice_f32","","",12,N],[11,"from_slice_f64","","",12,N],[11,"read_u16","","",13,N],[11,"read_u32","","",13,N],[11,"read_u64","","",13,N],[11,"read_uint","","",13,N],[11,"write_u16","","",13,N],[11,"write_u32","","",13,N],[11,"write_u64","","",13,N],[11,"write_uint","","",13,N],[11,"read_u16_into","","",13,N],[11,"read_u32_into","","",13,N],[11,"read_u64_into","","",13,N],[11,"write_u16_into","","",13,N],[11,"write_u32_into","","",13,N],[11,"write_u64_into","","",13,N],[11,"from_slice_u16","","",13,N],[11,"from_slice_u32","","",13,N],[11,"from_slice_u64","","",13,N],[11,"from_slice_f32","","",13,N],[11,"from_slice_f64","","",13,N],[11,"eq","","",13,[[["self"],["littleendian"]],["bool"]]],[11,"eq","","",12,[[["self"],["bigendian"]],["bool"]]],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cargo_add"]={"doc":"`cargo add`","items":[],"paths":[]};
searchIndex["cargo_edit"]={"doc":"Show and Edit Cargo's Manifest Files","items":[[3,"CrateName","cargo_edit","A crate specifier. This can be a plain name (e.g. `docopt`), a name and a versionreq (e.g. `docopt@^0.8`), a URL, or a path.",N,N],[3,"Dependency","","A dependency handled by Cargo",N,N],[12,"name","","The name of the dependency (as it is set in its `Cargo.toml` and known to crates.io)",0,N],[3,"Error","","The Error type.",N,N],[12,"0","","The kind of the error.",1,N],[3,"LocalManifest","","A Cargo manifest that is available locally.",N,N],[3,"Manifest","","A Cargo manifest",N,N],[12,"data","","Manifest contents as TOML data",2,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",3,N],[13,"FetchVersionFailure","","Failed to fetch crate from crates.io",3,N],[13,"InvalidCratesIoJson","","Invalid JSON from crates.io response",3,N],[13,"NoCrate","","No crate by that name exists",3,N],[13,"NoVersionsAvailable","","No versions available",3,N],[13,"ParseCargoToml","","Unable to parse external Cargo.toml",3,N],[13,"MissingManifest","","Cargo.toml could not be found.",3,N],[13,"InvalidManifest","","Cargo.toml is valid toml, but doesn't contain the expected fields",3,N],[13,"UnexpectedRootManifest","","Found a workspace manifest when expecting a normal manifest",3,N],[13,"NonExistentTable","","The TOML table could not be found.",3,N],[13,"NonExistentDependency","","The dependency could not be found.",3,N],[5,"get_crate_name_from_github","","Query crate name by accessing a github repo Cargo.toml",N,[[["str"]],["result",["string"]]]],[5,"get_crate_name_from_gitlab","","Query crate name by accessing a gitlab repo Cargo.toml",N,[[["str"]],["result",["string"]]]],[5,"get_crate_name_from_path","","Query crate name by accessing Cargo.toml in a local path",N,[[["str"]],["result",["string"]]]],[5,"get_latest_dependency","","Query latest version from crates.io",N,[[["str"],["bool"]],["result",["dependency"]]]],[5,"find","","If a manifest is specified, return that one, otherise perform a manifest search starting from the current directory. If a manifest is specified, return that one. If a path is specified, perform a manifest search starting from there. If nothing is specified, start searching from the current directory (`cwd`).",N,[[["option"]],["result",["pathbuf"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `CrateName`",4,[[["str"]],["self"]]],[11,"has_version","","Does this specify a versionreq?",4,[[["self"]],["bool"]]],[11,"is_url_or_path","","Is this a URI?",4,[[["self"]],["bool"]]],[11,"parse_as_version","","If this crate specifier includes a version (e.g. `docopt@0.8`), extract the name and version.",4,[[["self"]],["result",["option"]]]],[11,"parse_crate_name_from_uri","","Will parse this crate name on the assumption that it is a URI.",4,[[["self"]],["result",["dependency"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["dependency"]],["bool"]]],[11,"ne","","",0,[[["self"],["dependency"]],["bool"]]],[11,"clone","","",0,[[["self"]],["dependency"]]],[11,"default","","",0,[[],["dependency"]]],[11,"new","","Create a new dependency with a name",0,[[["str"]],["dependency"]]],[11,"set_version","","Set dependency to a given version",0,[[["self"],["str"]],["dependency"]]],[11,"set_git","","Set dependency to a given repository",0,[[["self"],["str"]],["dependency"]]],[11,"set_path","","Set dependency to a given path",0,[[["self"],["str"]],["dependency"]]],[11,"set_optional","","Set whether the dependency is optional",0,[[["self"],["bool"]],["dependency"]]],[11,"version","","Get version of dependency",0,[[["self"]],["option",["str"]]]],[11,"to_toml","","Convert dependency to TOML",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",1,N],[11,"with_chain","","",1,[[["e"],["k"]],["self"]]],[11,"kind","","",1,N],[11,"iter","","",1,[[["self"]],["iter"]]],[11,"chain_err","","",1,[[["self"],["f"]],["self"]]],[11,"backtrace","","",1,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",1,[[["error"]],["option",["arc"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",1,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",1,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",1,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",1,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",1,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",1,[[["self"],["f"]],["error"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["errorkind"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"deref","","",1,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",3,[[["self"]],["str"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["string"]],["self"]]],[11,"from","","",3,[[["error"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["manifest"]]],[11,"find_file","","Look for a `Cargo.toml` file",2,[[["option"]],["result",["file"]]]],[11,"open","","Open the `Cargo.toml` for a path (or the process' `cwd`)",2,[[["option"]],["result",["manifest"]]]],[11,"get_table","","Get the specified table from the manifest.",2,N],[11,"get_sections","","Get all sections in the manifest that exist and might contain dependencies. The returned items are always `Table` or `InlineTable`.",2,[[["self"]],["vec"]]],[11,"write_to_file","","Overwrite a file with TOML data.",2,[[["self"],["file"]],["result"]]],[11,"insert_into_table","","Add entry to a Cargo.toml.",2,N],[11,"update_table_entry","","Update an entry in Cargo.toml.",2,N],[11,"remove_from_table","","Remove entry from a Cargo.toml.",2,[[["self"],["str"],["str"]],["result"]]],[11,"add_deps","","Add multiple dependencies to manifest",2,N],[11,"from_str","","Read manifest data from string",2,[[["str"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"deref","","",5,[[["self"]],["manifest"]]],[11,"find","","Construct a `LocalManifest`. If no path is provided, make an educated guess as to which one the user means.",5,[[["option"]],["result"]]],[11,"try_new","","Construct the `LocalManifest` corresponding to the `Path` provided.",5,[[["path"]],["result"]]],[11,"upgrade","","Instruct this manifest to upgrade a single dependency. If this manifest does not have that dependency, it does nothing.",5,[[["self"],["dependency"],["bool"]],["result"]]],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",6,[[["self"],["f"]],["result",["error"]]]]],"paths":[[3,"Dependency"],[3,"Error"],[3,"Manifest"],[4,"ErrorKind"],[3,"CrateName"],[3,"LocalManifest"],[8,"ResultExt"]]};
searchIndex["cargo_metadata"]={"doc":"Structured access to the output of `cargo metadata` Usually used from within a `cargo-*` executable","items":[[3,"Error","cargo_metadata","The Error type.",N,N],[12,"0","","The kind of the error.",0,N],[3,"Dependency","","A dependency of the main crate",N,N],[12,"name","","Name as given in the `Cargo.toml`",1,N],[12,"source","","The source of dependency",1,N],[12,"req","","The required version",1,N],[12,"kind","","The kind of dependency this is",1,N],[12,"optional","","Whether this dependency is required or optional",1,N],[3,"Metadata","","Starting point for metadata returned by `cargo metadata`",N,N],[12,"packages","","A list of all crates referenced by this crate (and the crate itself)",2,N],[12,"workspace_members","","A list of all workspace members",2,N],[12,"resolve","","Dependencies graph",2,N],[12,"workspace_root","","Workspace root",2,N],[12,"target_directory","","Build directory",2,N],[3,"Resolve","","A dependency graph",N,N],[12,"nodes","","Nodes in a dependencies graph",3,N],[3,"Node","","A node in a dependencies graph",N,N],[12,"id","","An opaque identifier for a package",4,N],[12,"dependencies","","List of opaque identifiers for this node's dependencies",4,N],[3,"Package","","A crate",N,N],[12,"name","","Name as given in the `Cargo.toml`",5,N],[12,"version","","Version given in the `Cargo.toml`",5,N],[12,"authors","","Authors given in the `Cargo.toml`",5,N],[12,"id","","An opaque identifier for a package",5,N],[12,"dependencies","","List of dependencies of this particular package",5,N],[12,"targets","","Targets provided by the crate (lib, bin, example, test, ...)",5,N],[12,"features","","Features provided by the crate, mapped to the features required by that feature.",5,N],[12,"manifest_path","","Path containing the `Cargo.toml`",5,N],[12,"metadata","","Contents of the free form package.metadata section",5,N],[3,"Target","","A single target (lib, bin, example, ...) provided by a crate",N,N],[12,"name","","Name as given in the `Cargo.toml` or generated from the file name",6,N],[12,"kind","","Kind of target (\"bin\", \"example\", \"test\", \"bench\", \"lib\")",6,N],[12,"crate_types","","Almost the same as `kind`, except when an example is a library instad of an executable. In that case `crate_types` contains things like `rlib` and `dylib` while `kind` is `example`",6,N],[12,"src_path","","Path to the main source file of the target",6,N],[3,"WorkspaceMember","","A workspace member. This is basically identical to `cargo::core::package_id::PackageId`, expect that this does not use `Arc` internally.",N,N],[12,"name","","A name of workspace member.",7,N],[12,"version","","A version of workspace member.",7,N],[12,"url","","A source id of workspace member.",7,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",8,N],[13,"Io","","IO Error during execution of `cargo metadata`",8,N],[13,"Utf8","","Output of `cargo metadata` was not valid utf8",8,N],[13,"ErrUtf8","","Error output of `cargo metadata` was not valid utf8",8,N],[13,"Json","","Deserialization error (structure of json did not match expected structure)",8,N],[13,"CargoMetadata","","Error during execution of `cargo metadata`",8,N],[4,"DependencyKind","","Dependencies can come in three kinds",N,N],[13,"Normal","","The 'normal' kind",9,N],[13,"Development","","Those used in tests only",9,N],[13,"Build","","Those used in build scripts only",9,N],[4,"CargoOpt","","Cargo features flags",N,N],[13,"AllFeatures","","Run cargo with `--features-all`",10,N],[13,"NoDefaultFeatures","","Run cargo with `--no-default-features`",10,N],[13,"SomeFeatures","","Run cargo with `--features <FEATURES>`",10,N],[5,"metadata","","Obtain metadata only about the root package and don't fetch dependencies",N,[[["option",["path"]]],["result",["metadata"]]]],[5,"metadata_deps","","Obtain metadata only about the root package and dependencies",N,[[["option",["path"]],["bool"]],["result",["metadata"]]]],[5,"metadata_run","","The main entry point to obtaining metadata",N,[[["option",["path"]],["bool"],["option",["cargoopt"]]],["result",["metadata"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",0,N],[11,"with_chain","","",0,[[["e"],["k"]],["self"]]],[11,"kind","","",0,N],[11,"iter","","",0,[[["self"]],["iter"]]],[11,"chain_err","","",0,[[["self"],["f"]],["self"]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",0,[[["error"]],["option",["arc"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",0,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",0,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[["self"],["f"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["utf8error"]],["self"]]],[11,"from","","",0,[[["fromutf8error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["errorkind"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"deref","","",0,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",8,[[["self"]],["str"]]],[11,"from","","",8,[[["str"]],["self"]]],[11,"from","","",8,[[["string"]],["self"]]],[11,"from","","",8,[[["error"]],["self"]]],[11,"eq","","",9,[[["self"],["dependencykind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["dependencykind"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["dependencykind"]]],[11,"clone","","",1,[[["self"]],["dependency"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[11,"clone","","",2,[[["self"]],["metadata"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["resolve"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["node"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["package"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["target"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["workspacemember"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result",["workspacemember"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]]],"paths":[[3,"Error"],[3,"Dependency"],[3,"Metadata"],[3,"Resolve"],[3,"Node"],[3,"Package"],[3,"Target"],[3,"WorkspaceMember"],[4,"ErrorKind"],[4,"DependencyKind"],[4,"CargoOpt"]]};
searchIndex["cargo_rm"]={"doc":"`cargo rm`","items":[],"paths":[]};
searchIndex["cargo_upgrade"]={"doc":"`cargo upgrade`","items":[],"paths":[]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["chrono"]={"doc":"Chrono 0.4.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"Date","","ISO 8601 calendar date with time zone.",N,N],[3,"DateTime","","ISO 8601 combined date and time with time zone.",N,N],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",N,N],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",N,N],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,N],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,N],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,N],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,N],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,N],[4,"Weekday","","The day of week.",N,N],[13,"Mon","","Monday.",1,N],[13,"Tue","","Tuesday.",1,N],[13,"Wed","","Wednesday.",1,N],[13,"Thu","","Thursday.",1,N],[13,"Fri","","Friday.",1,N],[13,"Sat","","Saturday.",1,N],[13,"Sun","","Sunday.",1,N],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",N,N],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",N,N],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",N,N],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",N,N],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",N,N],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",N,N],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,N],[13,"Single","","Given local time representation has a single unique result.",2,N],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,N],[11,"clone","","",3,[[["self"]],["utc"]]],[11,"eq","","",3,[[["self"],["utc"]],["bool"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",3,[[],["date",["utc"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,[[],["datetime",["utc"]]]],[11,"from_offset","","",3,[[["utc"]],["utc"]]],[11,"offset_from_local_date","","",3,[[["self"],["naivedate"]],["localresult",["utc"]]]],[11,"offset_from_local_datetime","","",3,[[["self"],["naivedatetime"]],["localresult",["utc"]]]],[11,"offset_from_utc_date","","",3,[[["self"],["naivedate"]],["utc"]]],[11,"offset_from_utc_datetime","","",3,[[["self"],["naivedatetime"]],["utc"]]],[11,"fix","","",3,[[["self"]],["fixedoffset"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"ne","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["fixedoffset"]]],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,[[["self"]],["i32"]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,[[["self"]],["i32"]]],[11,"from_offset","","",4,[[["fixedoffset"]],["fixedoffset"]]],[11,"offset_from_local_date","","",4,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",4,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",4,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",4,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"fix","","",4,[[["self"]],["fixedoffset"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"add","chrono","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"sub","","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"clone","chrono::offset","",6,[[["self"]],["local"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",6,[[],["date",["local"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",6,[[],["datetime",["local"]]]],[11,"from_offset","","",6,[[["fixedoffset"]],["local"]]],[11,"offset_from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",6,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[11,"from_utc_date","","",6,[[["self"],["naivedate"]],["date",["local"]]]],[11,"from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["datetime",["local"]]]],[8,"Offset","","The offset from the local time to UTC.",N,N],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",7,[[["self"]],["fixedoffset"]]],[8,"TimeZone","","The time zone.",N,N],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",8,N],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"timestamp_millis","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["datetime"]]],[11,"timestamp_millis_opt","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",8,[[["self"],["str"],["str"]],["parseresult",["datetime"]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",8,N],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",8,[[["self"],["naivedate"]],["localresult"]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult"]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",8,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",8,N],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",8,N],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedatetime"]],["datetime"]]],[11,"clone","","",2,[[["self"]],["localresult"]]],[11,"eq","","",2,[[["self"],["localresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["localresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,[[["self"]],["option"]]],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,[[["self"],["f"]],["localresult"]]],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,[[["self"],["naivetime"]],["localresult",["datetime"]]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,[[["self"]],["t"]]],[0,"naive","chrono","Date and time types which do not concern about the timezones.",N,N],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",N,N],[3,"IsoWeek","","ISO 8601 week.",N,N],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",N,N],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",N,N],[11,"eq","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ne","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"hash","","",9,N],[11,"partial_cmp","","",9,[[["self"],["naivedate"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"le","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"gt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ge","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"cmp","","",9,[[["self"],["naivedate"]],["ordering"]]],[11,"clone","","",9,[[["self"]],["naivedate"]]],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["naivedate"]]],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["option",["naivedate"]]]],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["naivedate"]]],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["option",["naivedate"]]]],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["naivedate"]]],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["option",["naivedate"]]]],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["naivedate"]]],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["option",["naivedate"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",9,[[["str"],["str"]],["parseresult",["naivedate"]]]],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",9,[[["self"],["naivetime"]],["naivedatetime"]]],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["naivedate"]]],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["naivedate"]]],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",9,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",9,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",9,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",9,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",9,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",9,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",9,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",9,[[["self"]],["weekday"]]],[11,"iso_week","","",9,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",9,[[["self"],["i32"]],["option",["naivedate"]]]],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"add","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"add_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"sub_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["parseresult",["naivedate"]]]],[11,"eq","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ne","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["isoweek"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"le","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"gt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ge","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"cmp","","",10,[[["self"],["isoweek"]],["ordering"]]],[11,"clone","","",10,[[["self"]],["isoweek"]]],[11,"year","","Returns the year number for this ISO week.",10,[[["self"]],["i32"]]],[11,"week","","Returns the ISO week number starting from 1.",10,[[["self"]],["u32"]]],[11,"week0","","Returns the ISO week number starting from 0.",10,[[["self"]],["u32"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ne","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["naivetime"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"le","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"gt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ge","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"cmp","","",11,[[["self"],["naivetime"]],["ordering"]]],[11,"clone","","",11,[[["self"]],["naivetime"]]],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["naivetime"]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["option",["naivetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",11,[[["str"],["str"]],["parseresult",["naivetime"]]]],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"hour","","Returns the hour number from 0 to 23.",11,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",11,[[["self"]],["u32"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"add","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"add_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"sub_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",11,[[["str"]],["parseresult",["naivetime"]]]],[11,"eq","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ne","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["naivedatetime"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"le","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"gt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ge","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"cmp","","",12,[[["self"],["naivedatetime"]],["ordering"]]],[11,"clone","","",12,[[["self"]],["naivedatetime"]]],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",12,[[["naivedate"],["naivetime"]],["naivedatetime"]]],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["naivedatetime"]]],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["option",["naivedatetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",12,[[["str"],["str"]],["parseresult",["naivedatetime"]]]],[11,"date","","Retrieves a date component.",12,[[["self"]],["naivedate"]]],[11,"time","","Retrieves a time component.",12,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap nanoseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",12,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",12,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",12,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",12,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",12,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",12,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",12,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",12,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",12,[[["self"]],["weekday"]]],[11,"iso_week","","",12,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",12,[[["self"],["i32"]],["option",["naivedatetime"]]]],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hour","","Returns the hour number from 0 to 23.",12,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",12,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"add","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"add_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"sub_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",12,[[["str"]],["parseresult",["naivedatetime"]]]],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",N,N],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",N,N],[11,"clone","chrono","",13,[[["self"]],["date"]]],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,N],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,[[["self"],["naivetime"]],["option",["datetime"]]]],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"succ","","Makes a new `Date` for the next date.",13,[[["self"]],["date"]]],[11,"succ_opt","","Makes a new `Date` for the next date.",13,[[["self"]],["option",["date"]]]],[11,"pred","","Makes a new `Date` for the prior date.",13,[[["self"]],["date"]]],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,[[["self"]],["option",["date"]]]],[11,"offset","","Retrieves an associated offset from UTC.",13,N],[11,"timezone","","Retrieves an associated time zone.",13,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,[[["self"],["tz2"]],["date"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,[[["self"],["date"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC date.",13,[[["self"]],["naivedate"]]],[11,"naive_local","","Returns a view to the naive local date.",13,[[["self"]],["naivedate"]]],[11,"format_with_items","","Formats the date with the specified formatting items.",13,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",13,[[["self"]],["i32"]]],[11,"month","","",13,[[["self"]],["u32"]]],[11,"month0","","",13,[[["self"]],["u32"]]],[11,"day","","",13,[[["self"]],["u32"]]],[11,"day0","","",13,[[["self"]],["u32"]]],[11,"ordinal","","",13,[[["self"]],["u32"]]],[11,"ordinal0","","",13,[[["self"]],["u32"]]],[11,"weekday","","",13,[[["self"]],["weekday"]]],[11,"iso_week","","",13,[[["self"]],["isoweek"]]],[11,"with_year","","",13,[[["self"],["i32"]],["option",["date"]]]],[11,"with_month","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_month0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"eq","","",13,[[["self"],["date"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["date"]],["option",["ordering"]]]],[11,"cmp","","",13,[[["self"],["date"]],["ordering"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"add","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["date"]],["oldduration"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["secondsformat"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["secondsformat"]],["bool"]]],[11,"clone","","",5,[[["self"]],["datetime"]]],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",5,N],[11,"date","","Retrieves a date component.",5,[[["self"]],["date"]]],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",5,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",5,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"offset","","Retrieves an associated offset from UTC.",5,N],[11,"timezone","","Retrieves an associated time zone.",5,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",5,[[["self"],["tz2"]],["datetime"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",5,[[["self"],["datetime"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",5,[[["self"]],["naivedatetime"]]],[11,"naive_local","","Returns a view to the naive local datetime.",5,[[["self"]],["naivedatetime"]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",5,[[["str"],["str"]],["parseresult",["datetime"]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",5,[[["self"]],["string"]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",5,[[["self"]],["string"]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",5,[[["self"],["secondsformat"],["bool"]],["string"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",5,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",5,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",5,[[["self"]],["i32"]]],[11,"month","","",5,[[["self"]],["u32"]]],[11,"month0","","",5,[[["self"]],["u32"]]],[11,"day","","",5,[[["self"]],["u32"]]],[11,"day0","","",5,[[["self"]],["u32"]]],[11,"ordinal","","",5,[[["self"]],["u32"]]],[11,"ordinal0","","",5,[[["self"]],["u32"]]],[11,"weekday","","",5,[[["self"]],["weekday"]]],[11,"iso_week","","",5,[[["self"]],["isoweek"]]],[11,"with_year","","",5,[[["self"],["i32"]],["option",["datetime"]]]],[11,"with_month","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_month0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"hour","","",5,[[["self"]],["u32"]]],[11,"minute","","",5,[[["self"]],["u32"]]],[11,"second","","",5,[[["self"]],["u32"]]],[11,"nanosecond","","",5,[[["self"]],["u32"]]],[11,"with_hour","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_minute","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_second","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_nanosecond","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"eq","","",5,[[["self"],["datetime"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["datetime"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["datetime"]],["ordering"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"add","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["datetime"]],["oldduration"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["utc"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["local"]]]],[0,"format","","Formatting (and parsing) utilities for date and time.",N,N],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",N,N],[12,"year","","Year.",14,N],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear","","Year in the ISO week date.",14,N],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"month","","Month (1--12).",14,N],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,N],[12,"weekday","","Day of the week.",14,N],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,N],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,N],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,N],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,N],[12,"minute","","Minute number (0--59).",14,N],[12,"second","","Second number (0--60, accounting for leap seconds).",14,N],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,N],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,N],[12,"offset","","Offset from the local time to UTC, in seconds.",14,N],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",N,N],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",N,N],[3,"ParseError","","An error from the `parse` function.",N,N],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",N,N],[4,"Pad","","Padding characters for numeric items.",N,N],[13,"None","","No padding.",15,N],[13,"Zero","","Zero (`0`) padding.",15,N],[13,"Space","","Space padding.",15,N],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",N,N],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,N],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,N],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"Month","","Month (FW=PW=2).",16,N],[13,"Day","","Day of the month (FW=PW=2).",16,N],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,N],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,N],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,N],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,N],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,N],[13,"Ordinal","","Day of the year (FW=PW=3).",16,N],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,N],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,N],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,N],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,N],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,N],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,N],[13,"Internal","","Internal uses only.",16,N],[4,"Fixed","","Fixed-format item types.",N,N],[13,"ShortMonthName","","Abbreviated month names.",17,N],[13,"LongMonthName","","Full month names.",17,N],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,N],[13,"LongWeekdayName","","Full day of the week names.",17,N],[13,"LowerAmPm","","AM/PM.",17,N],[13,"UpperAmPm","","AM/PM.",17,N],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,N],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,N],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,N],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,N],[13,"TimezoneName","","Timezone name.",17,N],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,N],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,N],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,N],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,N],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,N],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,N],[13,"Internal","","Internal uses only.",17,N],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",N,N],[13,"Literal","","A literally printed and parsed text.",18,N],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,N],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,N],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,N],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,N],[13,"Fixed","","Fixed-format item.",18,N],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,N],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",N,[[["parsed"],["str"],["i"]],["parseresult"]]],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",N,[[["formatter"],["option",["naivedate"]],["option",["naivetime"]],["option"],["i"]],["result"]]],[11,"clone","","",14,[[["self"]],["parsed"]]],[11,"eq","","",14,[[["self"],["parsed"]],["bool"]]],[11,"ne","","",14,[[["self"],["parsed"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["parsed"]]],[11,"new","","Returns the initial value of parsed parts.",14,[[],["parsed"]]],[11,"set_year","","Tries to set the `year` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_month","","Tries to set the `month` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,[[["self"],["weekday"]],["parseresult"]]],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_day","","Tries to set the `day` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,[[["self"],["bool"]],["parseresult"]]],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_minute","","Tries to set the `minute` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_second","","Tries to set the `second` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_offset","","Tries to set the `offset` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,[[["self"]],["parseresult",["naivedate"]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,[[["self"]],["parseresult",["naivetime"]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,[[["self"],["i32"]],["parseresult",["naivedatetime"]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,[[["self"]],["parseresult",["fixedoffset"]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,[[["self"]],["parseresult",["datetime"]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,[[["self"],["tz"]],["parseresult",["datetime"]]]],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",N,N],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",N,N],[11,"clone","","",19,[[["self"]],["strftimeitems"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,[[["str"]],["strftimeitems"]]],[11,"next","","",19,[[["self"]],["option",["item"]]]],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",N,N],[11,"clone","","",15,[[["self"]],["pad"]]],[11,"eq","","",15,[[["self"],["pad"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["numeric"]]],[11,"eq","","",16,[[["self"],["numeric"]],["bool"]]],[11,"ne","","",16,[[["self"],["numeric"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"eq","","",20,[[["self"],["internalnumeric"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["fixed"]]],[11,"eq","","",17,[[["self"],["fixed"]],["bool"]]],[11,"ne","","",17,[[["self"],["fixed"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["internalfixed"]]],[11,"eq","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"ne","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"clone","","",18,[[["self"]],["item"]]],[11,"eq","","",18,[[["self"],["item"]],["bool"]]],[11,"ne","","",18,[[["self"],["item"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["parseerror"]]],[11,"eq","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"description","","",22,[[["self"]],["str"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,[[["option",["naivedate"]],["option",["naivetime"]],["i"]],["delayedformat"]]],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,[[["option",["naivedate"]],["option",["naivetime"]],["off"],["i"]],["delayedformat"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"from_str","chrono","",1,[[["str"]],["result"]]],[17,"MIN_DATE","","The minimum possible `Date`.",N,N],[17,"MAX_DATE","","The maximum possible `Date`.",N,N],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",N,N],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",24,[[["self"],["u16"]],["self"]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",24,[[["self"],["u16"]],["self"]]],[8,"Datelike","","The common set of methods for date component.",N,N],[10,"year","","Returns the year number in the calendar date.",25,[[["self"]],["i32"]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",25,N],[10,"month","","Returns the month number starting from 1.",25,[[["self"]],["u32"]]],[10,"month0","","Returns the month number starting from 0.",25,[[["self"]],["u32"]]],[10,"day","","Returns the day of month starting from 1.",25,[[["self"]],["u32"]]],[10,"day0","","Returns the day of month starting from 0.",25,[[["self"]],["u32"]]],[10,"ordinal","","Returns the day of year starting from 1.",25,[[["self"]],["u32"]]],[10,"ordinal0","","Returns the day of year starting from 0.",25,[[["self"]],["u32"]]],[10,"weekday","","Returns the day of week.",25,[[["self"]],["weekday"]]],[10,"iso_week","","Returns the ISO week.",25,[[["self"]],["isoweek"]]],[10,"with_year","","Makes a new value with the year number changed.",25,[[["self"],["i32"]],["option"]]],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[11,"num_days_from_ce","","Returns the number of days since January 1, Year 1 (aka Day 1) in the proleptic Gregorian calendar.",25,[[["self"]],["i32"]]],[8,"Timelike","","The common set of methods for time component.",N,N],[10,"hour","","Returns the hour number from 0 to 23.",26,[[["self"]],["u32"]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",26,N],[10,"minute","","Returns the minute number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"second","","Returns the second number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",26,[[["self"]],["u32"]]],[10,"with_hour","","Makes a new value with the hour number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_minute","","Makes a new value with the minute number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_second","","Makes a new value with the second number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",26,[[["self"],["u32"]],["option"]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",26,[[["self"]],["u32"]]],[11,"eq","","",1,[[["self"],["weekday"]],["bool"]]],[11,"clone","","",1,[[["self"]],["weekday"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"succ","","The next day in the week.",1,[[["self"]],["weekday"]]],[11,"pred","","The previous day in the week.",1,[[["self"]],["weekday"]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,[[["self"]],["u32"]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,[[["self"]],["u32"]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,[[["self"]],["u32"]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,[[["self"]],["u32"]]],[11,"from_i64","","",1,[[["i64"]],["option",["weekday"]]]],[11,"from_u64","","",1,[[["u64"]],["option",["weekday"]]]],[11,"clone","","",27,[[["self"]],["parseweekdayerror"]]],[11,"eq","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"ne","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",28,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",28,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",28,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",28,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",28,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",28,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",28,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",28,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",28,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",28,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",28,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",28,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",28,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",28,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",28,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",28,[[["duration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",28,[[["self"]],["result",["duration","outofrangeerror"]]]],[11,"clone","","",28,[[["self"]],["duration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"add","","",28,[[["self"],["duration"]],["duration"]]],[11,"partial_cmp","","",28,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["duration"]],["bool"]]],[11,"le","","",28,[[["self"],["duration"]],["bool"]]],[11,"gt","","",28,[[["self"],["duration"]],["bool"]]],[11,"ge","","",28,[[["self"],["duration"]],["bool"]]],[11,"neg","","",28,[[["self"]],["duration"]]],[11,"cmp","","",28,[[["self"],["duration"]],["ordering"]]],[11,"sub","","",28,[[["self"],["duration"]],["duration"]]],[11,"mul","","",28,[[["self"],["i32"]],["duration"]]],[11,"div","","",28,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",28,[[["self"],["duration"]],["bool"]]],[11,"ne","","",28,[[["self"],["duration"]],["bool"]]],[11,"add","chrono::naive","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"sub","","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"add","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]],[11,"sub","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["combine"]={"doc":"This crate contains parser combinators, roughly based on the Haskell libraries parsec and attoparsec.","items":[[5,"any","combine","Parses any token.",N,[[],["any"]]],[5,"between","","Parses `open` followed by `parser` followed by `close`. Returns the value of `parser`.",N,[[["l"],["r"],["p"]],["between"]]],[5,"chainl1","","Parses `p` 1 or more times separated by `op`. The value returned is the one produced by the left associative application of the function returned by the parser `op`.",N,[[["p"],["op"]],["chainl1"]]],[5,"chainr1","","Parses `p` one or more times separated by `op`. The value returned is the one produced by the right associative application of the function returned by `op`.",N,[[["p"],["op"]],["chainr1"]]],[5,"count","","Parses `parser` from zero up to `count` times.",N,[[["usize"],["p"]],["count"]]],[5,"count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`).",N,[[["usize"],["usize"],["p"]],["countminmax"]]],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to do the parsing. This is commonly useful to allow multiple parsers to share some environment while still allowing the parsers to be written in separate functions.",N,N],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",N,[[],["eof"]]],[5,"look_ahead","","`look_ahead(p)` acts as `p` but doesn't consume input on success.",N,[[["p"]],["lookahead"]]],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.",N,[[["p"]],["many"]]],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.",N,[[["p"]],["many1"]]],[5,"none_of","","Extract one token and succeeds if it is not part of `tokens`.",N,[[["t"]],["noneof"]]],[5,"not_followed_by","","Succeeds only if `parser` fails. Never consumes any input.",N,[[["p"]],["notfollowedby"]]],[5,"one_of","","Extract one token and succeeds if it is part of `tokens`.",N,[[["t"]],["oneof"]]],[5,"optional","","Parses `parser` and outputs `Some(value)` if it succeeds, `None` if it fails without consuming any input. Fails if `parser` fails after having consumed some input.",N,[[["p"]],["optional"]]],[5,"parser","","Wraps a function, turning it into a parser.",N,[[["f"]],["fnparser"]]],[5,"position","","Parser which just returns the current position in the stream.",N,[[],["position"]]],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`.",N,[[["p"]],["satisfy"]]],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds and returns the value inside the `Option`. If `predicate` returns `None` the parser fails without consuming any input.",N,[[["p"]],["satisfymap"]]],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sepby"]]],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sepby1"]]],[5,"sep_end_by","","Parses `parser` zero or more times separated and ended by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sependby"]]],[5,"sep_end_by1","","Parses `parser` one or more times separated and ended by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sependby1"]]],[5,"skip_count","","Parses `parser` from zero up to `count` times skipping the output of `parser`.",N,[[["usize"],["p"]],["skipcount"]]],[5,"skip_count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`) skipping the output of `parser`.",N,[[["usize"],["usize"],["p"]],["skipcountminmax"]]],[5,"skip_many","","Parses `p` zero or more times ignoring the result.",N,[[["p"]],["skipmany"]]],[5,"skip_many1","","Parses `p` one or more times ignoring the result.",N,[[["p"]],["skipmany1"]]],[5,"token","","Parses a character and succeeds if the character is equal to `c`.",N,N],[5,"tokens","","Parses multiple tokens.",N,[[["c"],["info"],["t"]],["tokens"]]],[5,"try","","`try(p)` behaves as `p` except it acts as if the parser hadn't consumed any input if `p` fails after consuming input.",N,[[["p"]],["try"]]],[5,"unexpected","","Always fails with `message` as an unexpected error. Never consumes any input.",N,[[["s"]],["unexpected"]]],[5,"value","","Always returns the value `v` without consuming any input.",N,[[["t"]],["value"]]],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",N,[[["p"]],["choice"]]],[0,"easy","","Stream wrapper which provides an informative and easy to use error type.",N,N],[3,"Errors","combine::easy","Struct which hold information about an error that occurred at a specific position. Can hold multiple instances of `Error` if more that one error occurred in the same position.",N,N],[12,"position","","The position where the error occurred",0,N],[12,"errors","","A vector containing specific information on what errors occurred at `position`. Usually a fully formed message contains one `Unexpected` error and one or more `Expected` errors. `Message` and `Other` may also appear (`combine` never generates these errors on its own) and may warrant custom handling.",0,N],[3,"Stream","","",N,N],[12,"0","","",1,N],[4,"Info","","Enum holding error information. Variants are defined for `Stream::Item` and `Stream::Range` as well as string variants holding easy descriptions.",N,N],[13,"Token","","",2,N],[13,"Range","","",2,N],[13,"Owned","","",2,N],[13,"Borrowed","","",2,N],[4,"Error","","Enum used to store information about an error that has occurred during parsing.",N,N],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",3,N],[13,"Expected","","Error indicating that the parser expected something else",3,N],[13,"Message","","Generic message",3,N],[13,"Other","","Variant for containing other types of errors",3,N],[6,"ParseError","","Convenience alias over `Errors` for `StreamOnce` types which makes it possible to specify the `Errors` type from a `StreamOnce` by writing `ParseError<I>` instead of `Errors<I::Item, I::Range, I::Position>`",N,N],[0,"error","combine","Error types and traits which define what kind of errors combine parsers may emit",N,N],[3,"Tracked","combine::error","Error wrapper which lets parsers track which parser in a sequence of sub-parsers has emitted the error. `Tracked::from` can be used to construct this and it should otherwise be ignored outside of combine.",N,N],[12,"error","","The error returned",4,N],[4,"Info","","",N,N],[13,"Token","","",5,N],[13,"Range","","",5,N],[13,"Borrowed","","",5,N],[4,"Consumed","","Enum used to indicate if a parser consumed any items of the stream it was given as an input.",N,N],[13,"Consumed","","Constructor indicating that the parser has consumed elements",6,N],[13,"Empty","","Constructor indicating that the parser did not consume any elements",6,N],[4,"UnexpectedParse","","",N,N],[13,"Eoi","","",7,N],[13,"Unexpected","","",7,N],[4,"StringStreamError","","",N,N],[13,"UnexpectedParse","","",8,N],[13,"Eoi","","",8,N],[13,"CharacterBoundary","","",8,N],[4,"FastResult","","",N,N],[13,"ConsumedOk","","",9,N],[13,"EmptyOk","","",9,N],[13,"ConsumedErr","","",9,N],[13,"EmptyErr","","",9,N],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate whether they were successful or not. `O` is the type that is output on success. `I` is the specific stream type used in the parser.",N,N],[6,"ParseResult2","","",N,N],[6,"ConsumedResult","","A `Result` type which has the consumed status flattened into the result. Conversions to and from `std::result::Result` can be done using `result.into()` or `From::from(result)`",N,N],[8,"StreamError","","`StreamError` represents a single error returned from a `Stream` or a `Parser`.",N,N],[10,"unexpected_token","","",10,[[["item"]],["self"]]],[10,"unexpected_range","","",10,[[["range"]],["self"]]],[10,"unexpected_message","","",10,[[["t"]],["self"]]],[11,"unexpected","","",10,[[["info"]],["self"]]],[11,"unexpected_static_message","","",10,[[["str"]],["self"]]],[10,"expected_token","","",10,[[["item"]],["self"]]],[10,"expected_range","","",10,[[["range"]],["self"]]],[10,"expected_message","","",10,[[["t"]],["self"]]],[11,"expected","","",10,[[["info"]],["self"]]],[11,"expected_static_message","","",10,[[["str"]],["self"]]],[10,"message_token","","",10,[[["item"]],["self"]]],[10,"message_range","","",10,[[["range"]],["self"]]],[10,"message_message","","",10,[[["t"]],["self"]]],[11,"message_static_message","","",10,[[["str"]],["self"]]],[11,"message","","",10,[[["info"]],["self"]]],[11,"other","","",10,[[["e"]],["self"]]],[11,"end_of_input","","",10,[[],["self"]]],[10,"into_other","","Converts `self` into a different `StreamError` type.",10,[[["self"]],["t"]]],[8,"ParseError","","Trait which defines a combine parse error.",N,N],[16,"StreamError","","",11,N],[10,"empty","","Constructs an empty error.",11,[[["position"]],["self"]]],[10,"from_error","","Creates a `ParseError` from a single `Self::StreamError`",11,N],[10,"set_position","","Sets the position of this `ParseError`",11,[[["self"],["position"]]]],[11,"merge","","Merges two errors. If they exist at the same position the errors of `other` are added to `self` (using the semantics of `add`). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",11,[[["self"],["self"]],["self"]]],[10,"add","","Adds a `StreamError` to `self`.",11,N],[11,"add_expected","","",11,[[["self"],["info"]]]],[11,"add_unexpected","","",11,[[["self"],["info"]]]],[11,"add_message","","",11,[[["self"],["info"]]]],[10,"set_expected","","Sets `info` as the only `Expected` error of `self`",11,N],[10,"is_unexpected_end_of_input","","",11,[[["self"]],["bool"]]],[10,"into_other","","Does a best-effort conversion of `self` into another `ParseError`",11,[[["self"]],["t"]]],[11,"clone","","",5,[[["self"]],["info"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from","","",5,[[["char"]],["info",["char"]]]],[11,"from","","",5,[[["str"]],["info"]]],[11,"from","","",5,[[["u8"]],["info",["u8"]]]],[11,"clone","","",6,[[["self"]],["consumed"]]],[11,"eq","","",6,[[["self"],["consumed"]],["bool"]]],[11,"ne","","",6,[[["self"],["consumed"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"as_mut","","",6,[[["self"]],["t"]]],[11,"as_ref","","",6,[[["self"]],["t"]]],[11,"is_empty","","Returns true if `self` is empty.",6,[[["self"]],["bool"]]],[11,"into_inner","","Extracts the contained value.",6,[[["self"]],["t"]]],[11,"into_consumed","","Converts `self` into the `Consumed` state.",6,[[["self"]],["consumed"]]],[11,"into_empty","","Converts `self` into the `Empty` state.",6,[[["self"]],["consumed"]]],[11,"map","","Maps over the contained value without changing the consumed state.",6,[[["self"],["f"]],["consumed"]]],[11,"merge","","",6,[[["self"],["consumed"]],["consumed"]]],[11,"combine","","Combines the `Consumed` flags from `self` and the result of `f`.",6,[[["self"],["f"]],["parseresult2"]]],[11,"combine_consumed","","",6,[[["self"],["f"]],["fastresult"]]],[11,"clone","","",7,[[["self"]],["unexpectedparse"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["unexpectedparse"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"unexpected_token","","",7,[[["item"]],["self"]]],[11,"unexpected_range","","",7,[[["range"]],["self"]]],[11,"unexpected_message","","",7,[[["t"]],["self"]]],[11,"expected_token","","",7,[[["item"]],["self"]]],[11,"expected_range","","",7,[[["range"]],["self"]]],[11,"expected_message","","",7,[[["t"]],["self"]]],[11,"message_message","","",7,[[["t"]],["self"]]],[11,"message_token","","",7,[[["item"]],["self"]]],[11,"message_range","","",7,[[["range"]],["self"]]],[11,"end_of_input","","",7,[[],["self"]]],[11,"into_other","","",7,[[["self"]],["t"]]],[11,"empty","","",7,[[["position"]],["self"]]],[11,"from_error","","",7,N],[11,"set_position","","",7,[[["self"],["position"]]]],[11,"add","","",7,N],[11,"set_expected","","",7,N],[11,"is_unexpected_end_of_input","","",7,[[["self"]],["bool"]]],[11,"into_other","","",7,[[["self"]],["t"]]],[11,"clone","","",8,[[["self"]],["stringstreamerror"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["stringstreamerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"unexpected_token","","",8,[[["item"]],["self"]]],[11,"unexpected_range","","",8,[[["range"]],["self"]]],[11,"unexpected_message","","",8,[[["t"]],["self"]]],[11,"expected_token","","",8,[[["item"]],["self"]]],[11,"expected_range","","",8,[[["range"]],["self"]]],[11,"expected_message","","",8,[[["t"]],["self"]]],[11,"message_message","","",8,[[["t"]],["self"]]],[11,"message_token","","",8,[[["item"]],["self"]]],[11,"message_range","","",8,[[["range"]],["self"]]],[11,"message_static_message","","",8,[[["str"]],["self"]]],[11,"end_of_input","","",8,[[],["self"]]],[11,"into_other","","",8,[[["self"]],["t"]]],[11,"empty","","",8,[[["position"]],["self"]]],[11,"from_error","","",8,N],[11,"set_position","","",8,[[["self"],["position"]]]],[11,"add","","",8,N],[11,"set_expected","","",8,N],[11,"is_unexpected_end_of_input","","",8,[[["self"]],["bool"]]],[11,"into_other","","",8,[[["self"]],["t"]]],[11,"clone","","",4,[[["self"]],["tracked"]]],[11,"eq","","",4,[[["self"],["tracked"]],["bool"]]],[11,"ne","","",4,[[["self"],["tracked"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["e"]],["self"]]],[11,"clone","","",9,[[["self"]],["fastresult"]]],[11,"eq","","",9,[[["self"],["fastresult"]],["bool"]]],[11,"ne","","",9,[[["self"],["fastresult"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"is_ok","","",9,[[["self"]],["bool"]]],[11,"as_ref","","",9,[[["self"]],["fastresult"]]],[11,"and_then","","",9,N],[11,"map_err","","",9,[[["self"],["f"]],["fastresult"]]],[11,"map","","",9,[[["self"],["f"]],["fastresult"]]],[11,"into","","",9,[[["self"]],["result",["consumed","consumed"]]]],[11,"into","","",9,[[["self"]],["parseresult2"]]],[11,"from","","",9,[[["parseresult2"]],["fastresult"]]],[0,"stream","combine","Traits and implementations of arbitrary data streams.",N,N],[3,"PartialStream","combine::stream","Stream type which indicates that the stream is partial if end of input is reached",N,N],[12,"0","","",12,N],[3,"SliceStream","","Newtype for constructing a stream from a slice where the items in the slice are not copyable.",N,N],[12,"0","","",13,N],[3,"IteratorStream","","Wrapper around iterators which allows them to be treated as a stream. Returned by [`from_iter`].",N,N],[3,"ReadStream","","",N,N],[3,"PointerOffset","","Newtype around a pointer offset into a slice stream (`&[T]`/`&str`).",N,N],[12,"0","","",14,N],[5,"uncons","","",N,[[["i"]],["consumedresult"]]],[5,"uncons_range","","",N,[[["i"],["usize"]],["consumedresult"]]],[5,"uncons_while","","Removes items from the input while `predicate` returns `true`.",N,[[["i"],["f"]],["consumedresult"]]],[5,"uncons_while1","","Takes items from stream, testing each one with `predicate` returns a range of at least one items which passed `predicate`.",N,[[["i"],["f"]],["consumedresult"]]],[5,"decode","","Decodes `input` using `parser`.",N,N],[0,"buffered","","",N,N],[3,"BufferedStream","combine::stream::buffered","`Stream` which buffers items from an instance of `StreamOnce` into a ring buffer. Instances of `StreamOnce` which is not able to implement `Resetable` (such as `ReadStream`) may use this as a way to implement `Resetable` and become a full `Stream` instance.",N,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["bufferedstream"]],["bool"]]],[11,"ne","","",15,[[["self"],["bufferedstream"]],["bool"]]],[11,"checkpoint","","",15,N],[11,"reset","","",15,N],[11,"new","","Constructs a new `BufferedStream` from a `StreamOnce` instance with a `lookahead` number of elements that can be stored in the buffer.",15,[[["i"],["usize"]],["bufferedstream"]]],[11,"position","","",15,N],[11,"uncons","","",15,[[["self"]],["result",["streamerrorfor"]]]],[0,"easy","combine::stream","Stream wrapper which provides an informative and easy to use error type.",N,N],[3,"Errors","combine::stream::easy","Struct which hold information about an error that occurred at a specific position. Can hold multiple instances of `Error` if more that one error occurred in the same position.",N,N],[12,"position","","The position where the error occurred",0,N],[12,"errors","","A vector containing specific information on what errors occurred at `position`. Usually a fully formed message contains one `Unexpected` error and one or more `Expected` errors. `Message` and `Other` may also appear (`combine` never generates these errors on its own) and may warrant custom handling.",0,N],[3,"Stream","","",N,N],[12,"0","","",1,N],[4,"Info","","Enum holding error information. Variants are defined for `Stream::Item` and `Stream::Range` as well as string variants holding easy descriptions.",N,N],[13,"Token","","",2,N],[13,"Range","","",2,N],[13,"Owned","","",2,N],[13,"Borrowed","","",2,N],[4,"Error","","Enum used to store information about an error that has occurred during parsing.",N,N],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",3,N],[13,"Expected","","Error indicating that the parser expected something else",3,N],[13,"Message","","Generic message",3,N],[13,"Other","","Variant for containing other types of errors",3,N],[6,"ParseError","","Convenience alias over `Errors` for `StreamOnce` types which makes it possible to specify the `Errors` type from a `StreamOnce` by writing `ParseError<I>` instead of `Errors<I::Item, I::Range, I::Position>`",N,N],[11,"clone","","",2,[[["self"]],["info"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["primitiveinfo"]],["self"]]],[11,"map_token","","",2,[[["self"],["f"]],["info"]]],[11,"map_range","","",2,[[["self"],["f"]],["info"]]],[11,"eq","","",2,[[["self"],["info"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["char"]],["info",["char"]]]],[11,"from","","",2,[[["string"]],["info"]]],[11,"from","","",2,[[["str"]],["info"]]],[11,"from","","",2,[[["u8"]],["info",["u8"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"unexpected_token","","",3,[[["item"]],["self"]]],[11,"unexpected_range","","",3,[[["range"]],["self"]]],[11,"unexpected_message","","",3,[[["t"]],["self"]]],[11,"unexpected_static_message","","",3,[[["str"]],["self"]]],[11,"expected_token","","",3,[[["item"]],["self"]]],[11,"expected_range","","",3,[[["range"]],["self"]]],[11,"expected_message","","",3,[[["t"]],["self"]]],[11,"expected_static_message","","",3,[[["str"]],["self"]]],[11,"message_message","","",3,[[["t"]],["self"]]],[11,"message_static_message","","",3,[[["str"]],["self"]]],[11,"message_token","","",3,[[["item"]],["self"]]],[11,"message_range","","",3,[[["range"]],["self"]]],[11,"other","","",3,[[["e"]],["self"]]],[11,"into_other","","",3,[[["self"]],["t"]]],[11,"empty","","",3,[[["position"]],["self"]]],[11,"from_error","","",3,N],[11,"set_position","","",3,[[["self"],["position"]]]],[11,"add","","",3,N],[11,"set_expected","","",3,N],[11,"is_unexpected_end_of_input","","",3,[[["self"]],["bool"]]],[11,"into_other","","",3,[[["self"]],["t"]]],[11,"empty","","",0,[[["position"]],["self"]]],[11,"from_error","","",0,N],[11,"set_position","","",0,[[["self"],["position"]]]],[11,"merge","","",0,[[["self"],["self"]],["self"]]],[11,"add","","",0,N],[11,"set_expected","","",0,N],[11,"is_unexpected_end_of_input","","",0,[[["self"]],["bool"]]],[11,"into_other","","",0,[[["self"]],["t"]]],[11,"map_token","","",3,[[["self"],["f"]],["error"]]],[11,"map_range","","",3,[[["self"],["f"]],["error"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"from","","",3,[[["e"]],["error"]]],[11,"end_of_input","","Returns the `end_of_input` error.",3,[[],["error"]]],[11,"fmt_errors","","Formats a slice of errors in a human readable way.",3,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["errors"]],["bool"]]],[11,"ne","","",0,[[["self"],["errors"]],["bool"]]],[11,"new","","Constructs a new `ParseError` which occurred at `position`.",0,[[["p"],["error"]],["errors"]]],[11,"empty","","Constructs an error with no other information than the position it occurred at.",0,[[["p"]],["errors"]]],[11,"from_errors","","Constructs a `ParseError` with multiple causes.",0,[[["p"],["vec",["error"]]],["errors"]]],[11,"end_of_input","","Constructs an end of input error. Should be returned by parsers which encounter end of input unexpectedly.",0,[[["p"]],["errors"]]],[11,"add_error","","Adds an error if `error` does not exist in this `ParseError` already (as determined byte `PartialEq`).",0,[[["self"],["error"]]]],[11,"set_expected","","Removes all `Expected` errors in `self` and adds `info` instead.",0,[[["self"],["info"]]]],[11,"merge","","Merges two `ParseError`s. If they exist at the same position the errors of `other` are added to `self` (using `add_error` to skip duplicates). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",0,[[["self"],["errors"]],["errors"]]],[11,"map_position","","Maps the position to a new value",0,[[["self"],["f"]],["errors"]]],[11,"map_token","","Maps all token variants to a new value",0,[[["self"],["f"]],["errors"]]],[11,"map_range","","Maps all range variants to a new value.",0,[[["self"],["f"]],["errors"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["stream"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"checkpoint","","",1,N],[11,"reset","","",1,N],[11,"uncons","","",1,[[["self"]],["result",["streamerrorfor"]]]],[11,"is_partial","","",1,[[["self"]],["bool"]]],[11,"uncons_range","","",1,[[["self"],["usize"]],["result",["streamerrorfor"]]]],[11,"uncons_while","","",1,[[["self"],["f"]],["result",["streamerrorfor"]]]],[11,"uncons_while1","","",1,[[["self"],["f"]],["fastresult",["streamerrorfor"]]]],[11,"distance","","",1,N],[11,"position","","",1,N],[11,"range","","",1,N],[0,"state","combine::stream","Stateful stream wrappers.",N,N],[3,"State","combine::stream::state","The `State<I>` struct maintains the current position in the stream `I` using the `Positioner` trait to track the position.",N,N],[12,"input","","The input stream used when items are requested",16,N],[12,"positioner","","The positioner used to update the current position",16,N],[3,"IndexPositioner","","The `IndexPositioner<Item, Range>` struct maintains the current index into the stream `I`.  The initial index is index 0.  Each `Item` consumed increments the index by 1; each `range` consumed increments the position by `range.len()`.",N,N],[3,"SourcePosition","","Struct which represents a position in a source file.",N,N],[12,"line","","Current line of the input",17,N],[12,"column","","Current column of the input",17,N],[8,"Positioner","","Trait for tracking the current position of a `Stream`.",N,N],[16,"Position","","The type which keeps track of the position",18,N],[10,"position","","Returns the current position",18,N],[10,"update","","Updates the position given that `item` has been taken from the stream",18,[[["self"],["item"]]]],[8,"RangePositioner","","Trait for tracking the current position of a `RangeStream`.",N,N],[10,"update_range","","Updates the position given that `range` has been taken from the stream",19,[[["self"],["range"]]]],[8,"DefaultPositioned","","Defines a default `Positioner` type for a particular `Stream` type.",N,N],[16,"Positioner","","",20,N],[11,"clone","","",16,[[["self"]],["state"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["state"]],["bool"]]],[11,"ne","","",16,[[["self"],["state"]],["bool"]]],[11,"with_positioner","","Creates a new `State<I, X>` from an input stream and a positioner.",16,[[["i"],["x"]],["state"]]],[11,"new","","Creates a new `State<I, X>` from an input stream and its default positioner.",16,[[["i"]],["state"]]],[11,"position","","",16,N],[11,"uncons","","",16,[[["self"]],["result",["streamerrorfor"]]]],[11,"clone","","",21,[[["self"]],["indexpositioner"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"default","","",21,[[],["indexpositioner"]]],[11,"eq","","",21,[[["self"],["indexpositioner"]],["bool"]]],[11,"ne","","",21,[[["self"],["indexpositioner"]],["bool"]]],[11,"checkpoint","","",21,[[["self"]],["self"]]],[11,"reset","","",21,[[["self"],["self"]]]],[11,"position","","",21,[[["self"]],["usize"]]],[11,"update","","",21,[[["self"],["item"]]]],[11,"new","","",21,[[],["indexpositioner"]]],[11,"new_with_position","","",21,[[["usize"]],["indexpositioner"]]],[11,"update_range","","",21,[[["self"],["range"]]]],[11,"clone","","",17,[[["self"]],["sourceposition"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["sourceposition"]],["bool"]]],[11,"ne","","",17,[[["self"],["sourceposition"]],["bool"]]],[11,"cmp","","",17,[[["self"],["sourceposition"]],["ordering"]]],[11,"partial_cmp","","",17,[[["self"],["sourceposition"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["sourceposition"]],["bool"]]],[11,"le","","",17,[[["self"],["sourceposition"]],["bool"]]],[11,"gt","","",17,[[["self"],["sourceposition"]],["bool"]]],[11,"ge","","",17,[[["self"],["sourceposition"]],["bool"]]],[11,"checkpoint","","",17,[[["self"]],["self"]]],[11,"reset","","",17,[[["self"],["self"]]]],[11,"default","","",17,[[],["self"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","",17,[[],["self"]]],[11,"position","","",17,[[["self"]],["sourceposition"]]],[11,"update","","",17,[[["self"],["char"]]]],[11,"update_range","","",17,[[["self"],["str"]]]],[11,"uncons_range","","",16,[[["self"],["usize"]],["result",["streamerrorfor"]]]],[11,"uncons_while","","",16,[[["self"],["f"]],["result",["streamerrorfor"]]]],[11,"uncons_while1","","",16,[[["self"],["f"]],["fastresult",["streamerrorfor"]]]],[11,"distance","","",16,N],[11,"checkpoint","","",16,N],[11,"reset","","",16,N],[11,"range","","",16,N],[6,"StreamErrorFor","combine::stream","Convenience alias over the `StreamError` for the input stream `I`",N,N],[8,"Positioned","","A type which has a position.",N,N],[10,"position","","Returns the current position of the stream.",22,N],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",N,N],[16,"Item","","The type of items which is yielded from this stream.",23,N],[16,"Range","","The type of a range of items yielded from this stream. Types which do not a have a way of yielding ranges of items should just use the `Self::Item` for this type.",23,N],[16,"Position","","Type which represents the position in a stream. `Ord` is required to allow parsers to determine which of two positions are further ahead.",23,N],[16,"Error","","",23,N],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements. Returns `Err` if no element could be retrieved.",23,[[["self"]],["result",["streamerrorfor"]]]],[11,"is_partial","","Returns `true` if this stream only contains partial input.",23,[[["self"]],["bool"]]],[8,"Resetable","","",N,N],[16,"Checkpoint","","",24,N],[10,"checkpoint","","",24,N],[10,"reset","","",24,N],[8,"Stream","","A stream of tokens which can be duplicated",N,N],[8,"RangeStreamOnce","","A `RangeStream` is an extension of `StreamOnce` which allows for zero copy parsing.",N,N],[10,"uncons_range","","Takes `size` elements from the stream. Fails if the length of the stream is less than `size`.",25,[[["self"],["usize"]],["result",["streamerrorfor"]]]],[10,"uncons_while","","Takes items from stream, testing each one with `predicate`. returns the range of items which passed `predicate`.",25,[[["self"],["f"]],["result",["streamerrorfor"]]]],[11,"uncons_while1","","Takes items from stream, testing each one with `predicate` returns a range of at least one items which passed `predicate`.",25,[[["self"],["f"]],["fastresult",["streamerrorfor"]]]],[10,"distance","","Returns the distance between `self` and `end`. The returned `usize` must be so that",25,N],[8,"RangeStream","","A `RangeStream` is an extension of `Stream` which allows for zero copy parsing.",N,N],[8,"FullRangeStream","","A `RangeStream` which is capable of providing it's entire range.",N,N],[10,"range","","Returns the entire range of `self`",26,N],[8,"Range","","Trait representing a range of elements.",N,N],[10,"len","","Returns the remaining length of `self`. The returned length need not be the same as the number of items left in the stream.",27,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the range does not contain any elements (`Range::len() == 0`)",27,[[["self"]],["bool"]]],[11,"checkpoint","","",13,[[["self"]],["self"]]],[11,"reset","","",13,[[["self"],["self"]]]],[11,"checkpoint","","",28,[[["self"]],["self"]]],[11,"reset","","",28,[[["self"],["self"]]]],[11,"clone","","",12,[[["self"]],["partialstream"]]],[11,"eq","","",12,[[["self"],["partialstream"]],["bool"]]],[11,"ne","","",12,[[["self"],["partialstream"]],["bool"]]],[11,"cmp","","",12,[[["self"],["partialstream"]],["ordering"]]],[11,"partial_cmp","","",12,[[["self"],["partialstream"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["partialstream"]],["bool"]]],[11,"le","","",12,[[["self"],["partialstream"]],["bool"]]],[11,"gt","","",12,[[["self"],["partialstream"]],["bool"]]],[11,"ge","","",12,[[["self"],["partialstream"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"position","","",12,N],[11,"checkpoint","","",12,N],[11,"reset","","",12,N],[11,"uncons","","",12,[[["self"]],["result",["streamerrorfor"]]]],[11,"is_partial","","",12,[[["self"]],["bool"]]],[11,"uncons_range","","",12,[[["self"],["usize"]],["result",["streamerrorfor"]]]],[11,"uncons_while","","",12,[[["self"],["f"]],["result",["streamerrorfor"]]]],[11,"uncons_while1","","",12,[[["self"],["f"]],["fastresult",["streamerrorfor"]]]],[11,"distance","","",12,N],[11,"range","","",12,N],[11,"eq","","",13,[[["self"],["slicestream"]],["bool"]]],[11,"ne","","",13,[[["self"],["slicestream"]],["bool"]]],[11,"cmp","","",13,[[["self"],["slicestream"]],["ordering"]]],[11,"partial_cmp","","",13,[[["self"],["slicestream"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["slicestream"]],["bool"]]],[11,"le","","",13,[[["self"],["slicestream"]],["bool"]]],[11,"gt","","",13,[[["self"],["slicestream"]],["bool"]]],[11,"ge","","",13,[[["self"],["slicestream"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["slicestream"]]],[11,"position","","",13,N],[11,"uncons","","",13,[[["self"]],["result",["streamerrorfor"]]]],[11,"uncons_range","","",13,[[["self"],["usize"]],["result",["streamerrorfor"]]]],[11,"uncons_while","","",13,[[["self"],["f"]],["result",["streamerrorfor"]]]],[11,"uncons_while1","","",13,[[["self"],["f"]],["fastresult",["streamerrorfor"]]]],[11,"distance","","",13,[[["self"],["self"]],["usize"]]],[11,"range","","",13,N],[11,"clone","","",28,[[["self"]],["iteratorstream"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"new","","Converts an `Iterator` into a stream.",28,[[["t"]],["iteratorstream"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"uncons","","",28,[[["self"]],["result",["streamerrorfor"]]]],[11,"uncons","","",29,[[["self"]],["result",["u8","streamerrorfor"]]]],[11,"new","","Creates a `StreamOnce` instance from a value implementing `std::io::Read`.",29,[[["r"]],["readstream"]]],[11,"clone","","",14,[[["self"]],["pointeroffset"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["pointeroffset"]]],[11,"eq","","",14,[[["self"],["pointeroffset"]],["bool"]]],[11,"ne","","",14,[[["self"],["pointeroffset"]],["bool"]]],[11,"cmp","","",14,[[["self"],["pointeroffset"]],["ordering"]]],[11,"partial_cmp","","",14,[[["self"],["pointeroffset"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["pointeroffset"]],["bool"]]],[11,"le","","",14,[[["self"],["pointeroffset"]],["bool"]]],[11,"gt","","",14,[[["self"],["pointeroffset"]],["bool"]]],[11,"ge","","",14,[[["self"],["pointeroffset"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"translate_position","","Converts the pointer-based position into an indexed position.",14,[[["self"],["t"]],["usize"]]],[0,"parser","combine","A collection of both concrete parsers as well as parser combinators.",N,N],[0,"byte","combine::parser","Module containing parsers specialized on byte streams.",N,N],[3,"Digit","combine::parser::byte","",N,N],[3,"Space","","",N,N],[3,"Spaces","","",N,N],[3,"Newline","","",N,N],[3,"CrLf","","",N,N],[3,"Tab","","",N,N],[3,"Upper","","",N,N],[3,"Lower","","",N,N],[3,"AlphaNum","","",N,N],[3,"Letter","","",N,N],[3,"OctDigit","","",N,N],[3,"HexDigit","","",N,N],[3,"Bytes","","",N,N],[3,"BytesCmp","","",N,N],[3,"TakeUntilByte","","",N,N],[3,"TakeUntilByte2","","",N,N],[3,"TakeUntilByte3","","",N,N],[5,"byte","","Parses a byteacter and succeeds if the byteacter is equal to `c`.",N,[[["u8"]],["token"]]],[5,"digit","","Parses a base-10 digit (0–9).",N,[[],["digit"]]],[5,"space","","Parses a `b' '`, `b'\\t'`, `b'\\n'` or `'b\\'r'`.",N,[[],["space"]]],[5,"spaces","","Skips over [`space`] zero or more times",N,[[],["spaces"]]],[5,"newline","","Parses a newline byteacter (`b'\\n'`).",N,[[],["newline"]]],[5,"crlf","","Parses carriage return and newline (`&b\"\\r\\n\"`), returning the newline byteacter.",N,[[],["crlf"]]],[5,"tab","","Parses a tab byteacter (`b'\\t'`).",N,[[],["tab"]]],[5,"upper","","Parses an uppercase ASCII letter (A–Z).",N,[[],["upper"]]],[5,"lower","","Parses an lowercase ASCII letter (a–z).",N,[[],["lower"]]],[5,"alpha_num","","Parses either an ASCII alphabet letter or digit (a–z, A–Z, 0–9).",N,[[],["alphanum"]]],[5,"letter","","Parses an ASCII alphabet letter (a–z, A–Z).",N,[[],["letter"]]],[5,"oct_digit","","Parses an octal digit.",N,[[],["octdigit"]]],[5,"hex_digit","","Parses an ASCII hexdecimal digit (accepts both uppercase and lowercase).",N,[[],["hexdigit"]]],[5,"bytes","","Parses the bytes `s`.",N,N],[5,"bytes_cmp","","Parses the bytes `s` using `cmp` to compare each token.",N,N],[5,"take_until_byte","","Zero-copy parser which reads a range of 0 or more tokens until `a` is found.",N,[[["u8"]],["takeuntilbyte"]]],[5,"take_until_byte2","","Zero-copy parser which reads a range of 0 or more tokens until `a` or `b` is found.",N,[[["u8"],["u8"]],["takeuntilbyte2"]]],[5,"take_until_byte3","","Zero-copy parser which reads a range of 0 or more tokens until `a`, 'b' or `c` is found.",N,[[["u8"],["u8"],["u8"]],["takeuntilbyte3"]]],[0,"num","","Parsers for decoding numbers in big-endian or little-endian order.",N,N],[3,"U16","combine::parser::byte::num","",N,N],[3,"U32","","",N,N],[3,"U64","","",N,N],[3,"I16","","",N,N],[3,"I32","","",N,N],[3,"I64","","",N,N],[3,"F32","","",N,N],[3,"F64","","",N,N],[5,"u16","","Reads a u16 out of the byte stream with the specified endianess",N,[[],["u16"]]],[5,"be_u16","","Reads a u16 out of the byte stream with the specified endianess",N,[[],["u16",["be"]]]],[5,"le_u16","","Reads a u16 out of the byte stream with the specified endianess",N,[[],["u16",["le"]]]],[5,"u32","","Reads a u32 out of the byte stream with the specified endianess",N,[[],["u32"]]],[5,"be_u32","","Reads a u32 out of the byte stream with the specified endianess",N,[[],["u32",["be"]]]],[5,"le_u32","","Reads a u32 out of the byte stream with the specified endianess",N,[[],["u32",["le"]]]],[5,"u64","","Reads a u64 out of the byte stream with the specified endianess",N,[[],["u64"]]],[5,"be_u64","","Reads a u64 out of the byte stream with the specified endianess",N,[[],["u64",["be"]]]],[5,"le_u64","","Reads a u64 out of the byte stream with the specified endianess",N,[[],["u64",["le"]]]],[5,"i16","","Reads a i16 out of the byte stream with the specified endianess",N,[[],["i16"]]],[5,"be_i16","","Reads a i16 out of the byte stream with the specified endianess",N,[[],["i16",["be"]]]],[5,"le_i16","","Reads a i16 out of the byte stream with the specified endianess",N,[[],["i16",["le"]]]],[5,"i32","","Reads a i32 out of the byte stream with the specified endianess",N,[[],["i32"]]],[5,"be_i32","","Reads a i32 out of the byte stream with the specified endianess",N,[[],["i32",["be"]]]],[5,"le_i32","","Reads a i32 out of the byte stream with the specified endianess",N,[[],["i32",["le"]]]],[5,"i64","","Reads a i64 out of the byte stream with the specified endianess",N,[[],["i64"]]],[5,"be_i64","","Reads a i64 out of the byte stream with the specified endianess",N,[[],["i64",["be"]]]],[5,"le_i64","","Reads a i64 out of the byte stream with the specified endianess",N,[[],["i64",["le"]]]],[5,"f32","","Reads a i32 out of the byte stream with the specified endianess",N,[[],["f32"]]],[5,"be_f32","","Reads a i32 out of the byte stream with the specified endianess",N,[[],["f32",["be"]]]],[5,"le_f32","","Reads a i32 out of the byte stream with the specified endianess",N,[[],["f32",["le"]]]],[5,"f64","","Reads a i64 out of the byte stream with the specified endianess",N,[[],["f64"]]],[5,"be_f64","","Reads a i64 out of the byte stream with the specified endianess",N,[[],["f64",["be"]]]],[5,"le_f64","","Reads a i64 out of the byte stream with the specified endianess",N,[[],["f64",["le"]]]],[11,"clone","","",30,[[["self"]],["u16"]]],[11,"parse_lazy","","",30,N],[11,"clone","","",31,[[["self"]],["u32"]]],[11,"parse_lazy","","",31,N],[11,"clone","","",32,[[["self"]],["u64"]]],[11,"parse_lazy","","",32,N],[11,"clone","","",33,[[["self"]],["i16"]]],[11,"parse_lazy","","",33,N],[11,"clone","","",34,[[["self"]],["i32"]]],[11,"parse_lazy","","",34,N],[11,"clone","","",35,[[["self"]],["i64"]]],[11,"parse_lazy","","",35,N],[11,"clone","","",36,[[["self"]],["f32"]]],[11,"parse_lazy","","",36,N],[11,"clone","","",37,[[["self"]],["f64"]]],[11,"parse_lazy","","",37,N],[11,"clone","combine::parser::byte","",38,[[["self"]],["digit"]]],[11,"parse_lazy","","",38,N],[11,"parse_first","","",38,N],[11,"parse_partial","","",38,N],[11,"add_error","","",38,[[["self"],["tracked"]]]],[11,"clone","","",39,[[["self"]],["space"]]],[11,"parse_lazy","","",39,N],[11,"parse_first","","",39,N],[11,"parse_partial","","",39,N],[11,"add_error","","",39,[[["self"],["tracked"]]]],[11,"clone","","",40,[[["self"]],["spaces"]]],[11,"parse_lazy","","",40,N],[11,"parse_first","","",40,N],[11,"parse_partial","","",40,N],[11,"add_error","","",40,[[["self"],["tracked"]]]],[11,"clone","","",41,[[["self"]],["newline"]]],[11,"parse_lazy","","",41,N],[11,"parse_first","","",41,N],[11,"parse_partial","","",41,N],[11,"add_error","","",41,[[["self"],["tracked"]]]],[11,"clone","","",42,[[["self"]],["crlf"]]],[11,"parse_lazy","","",42,N],[11,"parse_first","","",42,N],[11,"parse_partial","","",42,N],[11,"add_error","","",42,[[["self"],["tracked"]]]],[11,"clone","","",43,[[["self"]],["tab"]]],[11,"parse_lazy","","",43,N],[11,"parse_first","","",43,N],[11,"parse_partial","","",43,N],[11,"add_error","","",43,[[["self"],["tracked"]]]],[11,"clone","","",44,[[["self"]],["upper"]]],[11,"parse_lazy","","",44,N],[11,"parse_first","","",44,N],[11,"parse_partial","","",44,N],[11,"add_error","","",44,[[["self"],["tracked"]]]],[11,"clone","","",45,[[["self"]],["lower"]]],[11,"parse_lazy","","",45,N],[11,"parse_first","","",45,N],[11,"parse_partial","","",45,N],[11,"add_error","","",45,[[["self"],["tracked"]]]],[11,"clone","","",46,[[["self"]],["alphanum"]]],[11,"parse_lazy","","",46,N],[11,"parse_first","","",46,N],[11,"parse_partial","","",46,N],[11,"add_error","","",46,[[["self"],["tracked"]]]],[11,"clone","","",47,[[["self"]],["letter"]]],[11,"parse_lazy","","",47,N],[11,"parse_first","","",47,N],[11,"parse_partial","","",47,N],[11,"add_error","","",47,[[["self"],["tracked"]]]],[11,"clone","","",48,[[["self"]],["octdigit"]]],[11,"parse_lazy","","",48,N],[11,"parse_first","","",48,N],[11,"parse_partial","","",48,N],[11,"add_error","","",48,[[["self"],["tracked"]]]],[11,"clone","","",49,[[["self"]],["hexdigit"]]],[11,"parse_lazy","","",49,N],[11,"parse_first","","",49,N],[11,"parse_partial","","",49,N],[11,"add_error","","",49,[[["self"],["tracked"]]]],[11,"clone","","",50,[[["self"]],["bytes"]]],[11,"parse_lazy","","",50,N],[11,"add_error","","",50,[[["self"],["tracked"]]]],[11,"clone","","",51,[[["self"]],["bytescmp"]]],[11,"parse_lazy","","",51,N],[11,"add_error","","",51,[[["self"],["tracked"]]]],[11,"parse_partial","","",52,N],[11,"parse_first","","",52,N],[11,"parse_mode","","",52,N],[11,"parse_partial","","",53,N],[11,"parse_first","","",53,N],[11,"parse_mode","","",53,N],[11,"parse_partial","","",54,N],[11,"parse_first","","",54,N],[11,"parse_mode","","",54,N],[0,"char","combine::parser","Module containing parsers specialized on character streams.",N,N],[3,"Digit","combine::parser::char","",N,N],[3,"Space","","",N,N],[3,"Spaces","","",N,N],[3,"Newline","","",N,N],[3,"CrLf","","",N,N],[3,"Tab","","",N,N],[3,"Upper","","",N,N],[3,"Lower","","",N,N],[3,"AlphaNum","","",N,N],[3,"Letter","","",N,N],[3,"OctDigit","","",N,N],[3,"HexDigit","","",N,N],[3,"Str","","",N,N],[3,"StrCmp","","",N,N],[5,"char","","Parses a character and succeeds if the character is equal to `c`.",N,[[["char"]],["token"]]],[5,"digit","","Parses a base-10 digit.",N,[[],["digit"]]],[5,"space","","Parse a single whitespace according to [`std::char::is_whitespace`].",N,[[],["space"]]],[5,"spaces","","Skips over zero or more spaces according to [`std::char::is_whitespace`].",N,[[],["spaces"]]],[5,"newline","","Parses a newline character (`'\\n'`).",N,[[],["newline"]]],[5,"crlf","","Parses carriage return and newline (`\"\\r\\n\"`), returning the newline character.",N,[[],["crlf"]]],[5,"tab","","Parses a tab character (`'\\t'`).",N,[[],["tab"]]],[5,"upper","","Parses an uppercase letter according to [`std::char::is_uppercase`].",N,[[],["upper"]]],[5,"lower","","Parses an lowercase letter according to [`std::char::is_lowercase`].",N,[[],["lower"]]],[5,"alpha_num","","Parses either an alphabet letter or digit according to [`std::char::is_alphanumeric`].",N,[[],["alphanum"]]],[5,"letter","","Parses an alphabet letter according to [`std::char::is_alphabetic`].",N,[[],["letter"]]],[5,"oct_digit","","Parses an octal digit.",N,[[],["octdigit"]]],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase.",N,[[],["hexdigit"]]],[5,"string","","Parses the string `s`.",N,[[["str"]],["str"]]],[5,"string_cmp","","Parses the string `s`, using `cmp` to compare each character.",N,[[["str"],["c"]],["strcmp"]]],[11,"clone","","",55,[[["self"]],["digit"]]],[11,"parse_partial","","",55,N],[11,"parse_first","","",55,N],[11,"parse_mode_impl","","",55,N],[11,"add_error","","",55,[[["self"],["tracked"]]]],[11,"clone","","",56,[[["self"]],["space"]]],[11,"parse_lazy","","",56,N],[11,"parse_first","","",56,N],[11,"parse_partial","","",56,N],[11,"add_error","","",56,[[["self"],["tracked"]]]],[11,"clone","","",57,[[["self"]],["spaces"]]],[11,"parse_lazy","","",57,N],[11,"parse_first","","",57,N],[11,"parse_partial","","",57,N],[11,"add_error","","",57,[[["self"],["tracked"]]]],[11,"clone","","",58,[[["self"]],["newline"]]],[11,"parse_lazy","","",58,N],[11,"parse_first","","",58,N],[11,"parse_partial","","",58,N],[11,"add_error","","",58,[[["self"],["tracked"]]]],[11,"clone","","",59,[[["self"]],["crlf"]]],[11,"parse_lazy","","",59,N],[11,"parse_first","","",59,N],[11,"parse_partial","","",59,N],[11,"add_error","","",59,[[["self"],["tracked"]]]],[11,"clone","","",60,[[["self"]],["tab"]]],[11,"parse_lazy","","",60,N],[11,"parse_first","","",60,N],[11,"parse_partial","","",60,N],[11,"add_error","","",60,[[["self"],["tracked"]]]],[11,"clone","","",61,[[["self"]],["upper"]]],[11,"parse_lazy","","",61,N],[11,"parse_first","","",61,N],[11,"parse_partial","","",61,N],[11,"add_error","","",61,[[["self"],["tracked"]]]],[11,"clone","","",62,[[["self"]],["lower"]]],[11,"parse_lazy","","",62,N],[11,"parse_first","","",62,N],[11,"parse_partial","","",62,N],[11,"add_error","","",62,[[["self"],["tracked"]]]],[11,"clone","","",63,[[["self"]],["alphanum"]]],[11,"parse_lazy","","",63,N],[11,"parse_first","","",63,N],[11,"parse_partial","","",63,N],[11,"add_error","","",63,[[["self"],["tracked"]]]],[11,"clone","","",64,[[["self"]],["letter"]]],[11,"parse_lazy","","",64,N],[11,"parse_first","","",64,N],[11,"parse_partial","","",64,N],[11,"add_error","","",64,[[["self"],["tracked"]]]],[11,"clone","","",65,[[["self"]],["octdigit"]]],[11,"parse_lazy","","",65,N],[11,"parse_first","","",65,N],[11,"parse_partial","","",65,N],[11,"add_error","","",65,[[["self"],["tracked"]]]],[11,"clone","","",66,[[["self"]],["hexdigit"]]],[11,"parse_lazy","","",66,N],[11,"parse_first","","",66,N],[11,"parse_partial","","",66,N],[11,"add_error","","",66,[[["self"],["tracked"]]]],[11,"clone","","",67,[[["self"]],["str"]]],[11,"parse_lazy","","",67,N],[11,"add_error","","",67,[[["self"],["tracked"]]]],[11,"clone","","",68,[[["self"]],["strcmp"]]],[11,"parse_lazy","","",68,N],[11,"add_error","","",68,[[["self"],["tracked"]]]],[0,"choice","combine::parser","Combinators which take one or more parsers and attempts to parse successfully with at least one of them.",N,N],[3,"Choice","combine::parser::choice","",N,N],[3,"Or","","",N,N],[3,"Optional","","",N,N],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",N,[[["p"]],["choice"]]],[5,"or","","Equivalent to [`p1.or(p2)`].",N,[[["p1"],["p2"]],["or"]]],[5,"optional","","Parses `parser` and outputs `Some(value)` if it succeeds, `None` if it fails without consuming any input. Fails if `parser` fails after having consumed some input.",N,[[["p"]],["optional"]]],[8,"ChoiceParser","","`ChoiceParser` represents a parser which may parse one of several different choices depending on the input.",N,N],[16,"Input","","",69,N],[16,"Output","","",69,N],[16,"PartialState","","",69,N],[10,"parse_first","","",69,N],[10,"parse_partial","","",69,N],[10,"parse_mode_choice","","",69,N],[10,"add_error_choice","","",69,[[["self"],["tracked"]]]],[11,"clone","","",70,[[["self"]],["choice"]]],[11,"parse_partial","","",70,N],[11,"parse_first","","",70,N],[11,"parse_mode_impl","","",70,N],[11,"add_error","","",70,[[["self"],["tracked"]]]],[11,"clone","","",71,[[["self"]],["or"]]],[11,"parse_partial","","",71,N],[11,"parse_first","","",71,N],[11,"parse_mode_impl","","",71,N],[11,"add_error","","",71,[[["self"],["tracked"]]]],[11,"clone","","",72,[[["self"]],["optional"]]],[11,"parse_partial","","",72,N],[11,"parse_first","","",72,N],[11,"parse_mode_impl","","",72,N],[11,"add_error","","",72,[[["self"],["tracked"]]]],[0,"combinator","combine::parser","Various combinators which do not fit anywhere else.",N,N],[3,"NotFollowedBy","combine::parser::combinator","",N,N],[12,"parser","","",73,N],[3,"Try","","",N,N],[3,"LookAhead","","",N,N],[3,"Map","","",N,N],[3,"FlatMap","","",N,N],[3,"AndThen","","",N,N],[3,"Recognize","","",N,N],[3,"NoPartial","","",N,N],[3,"Ignore","","",N,N],[3,"AnyPartialState","","",N,N],[3,"AnyPartialStateParser","","",N,N],[3,"AnySendPartialState","","",N,N],[3,"AnySendPartialStateParser","","",N,N],[3,"Lazy","","",N,N],[5,"not_followed_by","","Succeeds only if `parser` fails. Never consumes any input.",N,[[["p"]],["notfollowedby"]]],[5,"try","","`try(p)` behaves as `p` except it acts as if the parser hadn't consumed any input if `p` fails after consuming input.",N,[[["p"]],["try"]]],[5,"look_ahead","","`look_ahead(p)` acts as `p` but doesn't consume input on success.",N,[[["p"]],["lookahead"]]],[5,"map","","Equivalent to [`p.map(f)`].",N,[[["p"],["f"]],["map"]]],[5,"flat_map","","Equivalent to [`p.flat_map(f)`].",N,[[["p"],["f"]],["flatmap"]]],[5,"and_then","","Equivalent to [`p.and_then(f)`].",N,[[["p"],["f"]],["andthen"]]],[5,"recognize","","Constructs a parser which returns the tokens parsed by `parser` accumulated in `F: Extend<P::Input::Item>` instead of `P::Output`.",N,[[["p"]],["recognize"]]],[5,"no_partial","","",N,[[["p"]],["nopartial"]]],[5,"any_partial_state","","Returns a parser where `P::PartialState` is boxed. Useful as a way to avoid writing the type since it can get very large after combining a few parsers.",N,[[["p"]],["anypartialstateparser"]]],[5,"any_send_partial_state","","Returns a parser where `P::PartialState` is boxed. Useful as a way to avoid writing the type since it can get very large after combining a few parsers.",N,[[["p"]],["anysendpartialstateparser"]]],[5,"lazy","","Constructs the parser lazily and on each `parse_*` call. Can be used to effectively reduce the size of deeply nested parsers as only the function producing the parser is stored in `Lazy`",N,[[["p"]],["lazy"]]],[11,"clone","","",73,[[["self"]],["notfollowedby"]]],[11,"parse_partial","","",73,N],[11,"parse_first","","",73,N],[11,"parse_mode_impl","","",73,N],[11,"add_error","","",73,[[["self"],["tracked"]]]],[11,"clone","","",74,[[["self"]],["try"]]],[11,"parse_stream_consumed","","",74,N],[11,"parse_partial","","",74,N],[11,"parse_first","","",74,N],[11,"parse_consumed_mode","","",74,N],[11,"parse_mode_impl","","",74,N],[11,"clone","","",75,[[["self"]],["lookahead"]]],[11,"parse_lazy","","",75,N],[11,"add_error","","",75,[[["self"],["tracked"]]]],[11,"clone","","",76,[[["self"]],["map"]]],[11,"parse_partial","","",76,N],[11,"parse_first","","",76,N],[11,"parse_mode_impl","","",76,N],[11,"add_error","","",76,[[["self"],["tracked"]]]],[11,"clone","","",77,[[["self"]],["flatmap"]]],[11,"parse_partial","","",77,N],[11,"parse_first","","",77,N],[11,"parse_mode_impl","","",77,N],[11,"add_error","","",77,[[["self"],["tracked"]]]],[11,"clone","","",78,[[["self"]],["andthen"]]],[11,"parse_partial","","",78,N],[11,"parse_first","","",78,N],[11,"parse_mode_impl","","",78,N],[11,"add_error","","",78,[[["self"],["tracked"]]]],[11,"clone","","",79,[[["self"]],["recognize"]]],[11,"parse_partial","","",79,N],[11,"parse_first","","",79,N],[11,"parse_mode_impl","","",79,N],[11,"add_error","","",79,[[["self"],["tracked"]]]],[11,"parse_lazy","","",80,N],[11,"parse_partial","","",80,N],[11,"parse_first","","",80,N],[11,"parse_mode_impl","","",80,N],[11,"add_error","","",80,[[["self"],["tracked"]]]],[11,"clone","","",81,[[["self"]],["ignore"]]],[11,"parse_lazy","","",81,N],[11,"parse_partial","","",81,N],[11,"parse_first","","",81,N],[11,"parse_mode_impl","","",81,N],[11,"add_error","","",81,[[["self"],["tracked"]]]],[11,"default","","",82,[[],["anypartialstate"]]],[11,"parse_lazy","","",83,N],[11,"parse_partial","","",83,N],[11,"parse_first","","",83,N],[11,"parse_mode","","",83,N],[11,"add_error","","",83,[[["self"],["tracked"]]]],[11,"default","","",84,[[],["anysendpartialstate"]]],[11,"parse_lazy","","",85,N],[11,"parse_partial","","",85,N],[11,"parse_first","","",85,N],[11,"parse_mode","","",85,N],[11,"add_error","","",85,[[["self"],["tracked"]]]],[11,"clone","","",86,[[["self"]],["lazy"]]],[11,"parse_stream_consumed","","",86,N],[11,"parse_lazy","","",86,N],[11,"parse_partial","","",86,N],[11,"parse_first","","",86,N],[11,"parse_consumed_mode","","",86,N],[11,"parse_mode_impl","","",86,N],[0,"error","combine::parser","Parsers which cause errors or modifies the returned error on parse failure.",N,N],[3,"Unexpected","combine::parser::error","",N,N],[3,"Message","","",N,N],[3,"Expected","","",N,N],[5,"unexpected","","Always fails with `message` as an unexpected error. Never consumes any input.",N,[[["s"]],["unexpected"]]],[5,"unexpected_any","","Always fails with `message` as an unexpected error. Never consumes any input.",N,[[["s"]],["unexpected"]]],[5,"message","","Equivalent to [`p1.message(msg)`].",N,[[["p"],["info"]],["message"]]],[5,"expected","","Equivalent to [`p.expected(info)`].",N,[[["p"],["info"]],["expected"]]],[11,"clone","","",87,[[["self"]],["unexpected"]]],[11,"parse_lazy","","",87,N],[11,"add_error","","",87,[[["self"],["tracked"]]]],[11,"clone","","",88,[[["self"]],["message"]]],[11,"parse_partial","","",88,N],[11,"parse_first","","",88,N],[11,"parse_mode_impl","","",88,N],[11,"add_error","","",88,[[["self"],["tracked"]]]],[11,"clone","","",89,[[["self"]],["expected"]]],[11,"parse_partial","","",89,N],[11,"parse_first","","",89,N],[11,"parse_mode_impl","","",89,N],[11,"add_error","","",89,[[["self"],["tracked"]]]],[0,"function","combine::parser","Parsers constructor from regular functions",N,N],[3,"FnParser","combine::parser::function","",N,N],[3,"EnvParser","","",N,N],[5,"parser","","Wraps a function, turning it into a parser.",N,[[["f"]],["fnparser"]]],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to do the parsing. This is commonly useful to allow multiple parsers to share some environment while still allowing the parsers to be written in separate functions.",N,N],[11,"clone","","",90,[[["self"]],["fnparser"]]],[11,"parse_lazy","","",90,N],[11,"clone","","",91,[[["self"]],["self"]]],[11,"parse_lazy","","",91,N],[0,"item","combine::parser","Parsers working with single stream items.",N,N],[3,"Any","combine::parser::item","",N,N],[3,"Satisfy","","",N,N],[3,"SatisfyMap","","",N,N],[3,"Token","","",N,N],[3,"Tokens","","",N,N],[3,"Position","","",N,N],[3,"OneOf","","",N,N],[3,"NoneOf","","",N,N],[3,"Value","","",N,N],[3,"Eof","","",N,N],[5,"item","","Parses a character and succeeds if the character is equal to `c`.",N,N],[5,"any","","Parses any token.",N,[[],["any"]]],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`.",N,[[["p"]],["satisfy"]]],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds and returns the value inside the `Option`. If `predicate` returns `None` the parser fails without consuming any input.",N,[[["p"]],["satisfymap"]]],[5,"token","","Parses a character and succeeds if the character is equal to `c`.",N,N],[5,"tokens","","Parses multiple tokens.",N,[[["c"],["info"],["t"]],["tokens"]]],[5,"position","","Parser which just returns the current position in the stream.",N,[[],["position"]]],[5,"one_of","","Extract one token and succeeds if it is part of `tokens`.",N,[[["t"]],["oneof"]]],[5,"none_of","","Extract one token and succeeds if it is not part of `tokens`.",N,[[["t"]],["noneof"]]],[5,"value","","Always returns the value `v` without consuming any input.",N,[[["t"]],["value"]]],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",N,[[],["eof"]]],[11,"clone","","",92,[[["self"]],["any"]]],[11,"parse_lazy","","",92,N],[11,"clone","","",93,[[["self"]],["satisfy"]]],[11,"parse_lazy","","",93,N],[11,"clone","","",94,[[["self"]],["satisfymap"]]],[11,"parse_lazy","","",94,N],[11,"clone","","",95,[[["self"]],["token"]]],[11,"parse_lazy","","",95,N],[11,"add_error","","",95,[[["self"],["tracked"]]]],[11,"clone","","",96,[[["self"]],["tokens"]]],[11,"parse_lazy","","",96,N],[11,"add_error","","",96,[[["self"],["tracked"]]]],[11,"clone","","",97,[[["self"]],["position"]]],[11,"parse_lazy","","",97,N],[11,"clone","","",98,[[["self"]],["oneof"]]],[11,"parse_lazy","","",98,N],[11,"add_error","","",98,[[["self"],["tracked"]]]],[11,"clone","","",99,[[["self"]],["noneof"]]],[11,"parse_lazy","","",99,N],[11,"clone","","",100,[[["self"]],["value"]]],[11,"parse_lazy","","",100,N],[11,"clone","","",101,[[["self"]],["eof"]]],[11,"parse_lazy","","",101,N],[11,"add_error","","",101,[[["self"],["tracked"]]]],[0,"range","combine::parser","Module containing zero-copy parsers.",N,N],[3,"Range","combine::parser::range","",N,N],[3,"Recognize","","",N,N],[12,"parser","","",102,N],[3,"RecognizeWithValue","","",N,N],[3,"Take","","",N,N],[3,"TakeWhile","","",N,N],[3,"TakeWhile1","","",N,N],[3,"TakeUntilRange","","",N,N],[5,"recognize","","Zero-copy parser which returns consumed input range.",N,[[["p"]],["recognize"]]],[5,"recognize_with_value","","Zero-copy parser which returns a pair: (consumed input range, parsed value).",N,[[["p"]],["recognizewithvalue"]]],[5,"range","","Zero-copy parser which reads a range of length `i.len()` and succeeds if `i` is equal to that range.",N,N],[5,"take","","Zero-copy parser which reads a range of length `n`.",N,[[["usize"]],["take"]]],[5,"take_while","","Zero-copy parser which reads a range of 0 or more tokens which satisfy `f`.",N,[[["f"]],["takewhile"]]],[5,"take_while1","","Zero-copy parser which reads a range of 1 or more tokens which satisfy `f`.",N,[[["f"]],["takewhile1"]]],[5,"take_until_range","","Zero-copy parser which reads a range of 0 or more tokens until `r` is found.",N,N],[11,"parse_lazy","","",103,N],[11,"add_error","","",103,[[["self"],["tracked"]]]],[11,"clone","","",102,[[["self"]],["recognize"]]],[11,"parse_partial","","",102,N],[11,"parse_first","","",102,N],[11,"parse_mode_impl","","",102,N],[11,"add_error","","",102,[[["self"],["tracked"]]]],[11,"clone","","",104,[[["self"]],["recognizewithvalue"]]],[11,"parse_partial","","",104,N],[11,"parse_first","","",104,N],[11,"parse_mode","","",104,N],[11,"add_error","","",104,[[["self"],["tracked"]]]],[11,"parse_lazy","","",105,N],[11,"parse_partial","","",106,N],[11,"parse_first","","",106,N],[11,"parse_mode_impl","","",106,N],[11,"parse_partial","","",107,N],[11,"parse_first","","",107,N],[11,"parse_mode_impl","","",107,N],[11,"parse_partial","","",108,N],[0,"repeat","combine::parser","Combinators which take one or more parsers and applies them repeatedly.",N,N],[3,"Count","combine::parser::repeat","",N,N],[3,"SkipCount","","",N,N],[12,"count","","",109,N],[12,"parser","","",109,N],[3,"CountMinMax","","",N,N],[3,"SkipCountMinMax","","",N,N],[12,"min","","",110,N],[12,"max","","",110,N],[12,"parser","","",110,N],[3,"Iter","","",N,N],[3,"Many","","",N,N],[3,"Many1","","",N,N],[3,"SkipMany","","",N,N],[3,"SkipMany1","","",N,N],[3,"SepBy","","",N,N],[3,"SepBy1","","",N,N],[3,"SepEndBy","","",N,N],[3,"SepEndBy1","","",N,N],[3,"Chainl1","","",N,N],[3,"Chainr1","","",N,N],[3,"TakeUntil","","",N,N],[3,"SkipUntil","","",N,N],[12,"end","","",111,N],[3,"EscapedState","","",N,N],[3,"Escaped","","",N,N],[5,"count","","Parses `parser` from zero up to `count` times.",N,[[["usize"],["p"]],["count"]]],[5,"skip_count","","Parses `parser` from zero up to `count` times skipping the output of `parser`.",N,[[["usize"],["p"]],["skipcount"]]],[5,"count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`).",N,[[["usize"],["usize"],["p"]],["countminmax"]]],[5,"skip_count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`) skipping the output of `parser`.",N,[[["usize"],["usize"],["p"]],["skipcountminmax"]]],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.",N,[[["p"]],["many"]]],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.",N,[[["p"]],["many1"]]],[5,"skip_many","","Parses `p` zero or more times ignoring the result.",N,[[["p"]],["skipmany"]]],[5,"skip_many1","","Parses `p` one or more times ignoring the result.",N,[[["p"]],["skipmany1"]]],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sepby"]]],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sepby1"]]],[5,"sep_end_by","","Parses `parser` zero or more times separated and ended by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sependby"]]],[5,"sep_end_by1","","Parses `parser` one or more times separated and ended by `separator`, returning a collection with the values from `p`.",N,[[["p"],["s"]],["sependby1"]]],[5,"chainl1","","Parses `p` 1 or more times separated by `op`. The value returned is the one produced by the left associative application of the function returned by the parser `op`.",N,[[["p"],["op"]],["chainl1"]]],[5,"chainr1","","Parses `p` one or more times separated by `op`. The value returned is the one produced by the right associative application of the function returned by `op`.",N,[[["p"],["op"]],["chainr1"]]],[5,"take_until","","Takes input until `end` is encountered or `end` indicates that it has consumed input before failing (`try` can be used to make it look like it has not consumed any input)",N,[[["p"]],["takeuntil"]]],[5,"skip_until","","Skips input until `end` is encountered or `end` indicates that it has consumed input before failing (`try` can be used to make it look like it has not consumed any input)",N,[[["p"]],["skipuntil"]]],[5,"escaped","","Parses an escaped string by first applying `parser` which accept the normal characters which do not need escaping. Once `parser` can not consume any more input it checks if the next item is `escape`. If it is then `escape_parser` is used to parse the escaped character and then resumes parsing using `parser`. If `escape` was not found then the parser finishes successfully.",N,N],[11,"clone","","",112,[[["self"]],["count"]]],[11,"parse_partial","","",112,N],[11,"parse_first","","",112,N],[11,"parse_mode_impl","","",112,N],[11,"add_error","","",112,[[["self"],["tracked"]]]],[11,"clone","","",109,[[["self"]],["skipcount"]]],[11,"parse_partial","","",109,N],[11,"parse_first","","",109,N],[11,"parse_mode_impl","","",109,N],[11,"add_error","","",109,[[["self"],["tracked"]]]],[11,"clone","","",113,[[["self"]],["countminmax"]]],[11,"parse_partial","","",113,N],[11,"parse_first","","",113,N],[11,"parse_mode_impl","","",113,N],[11,"add_error","","",113,[[["self"],["tracked"]]]],[11,"clone","","",110,[[["self"]],["skipcountminmax"]]],[11,"parse_partial","","",110,N],[11,"parse_first","","",110,N],[11,"parse_mode_impl","","",110,N],[11,"add_error","","",110,[[["self"],["tracked"]]]],[11,"new","","",114,N],[11,"into_result","","Converts the iterator to a `ParseResult`, returning `Ok` if the parsing so far has be done without any errors which consumed data.",114,[[["self"],["o"]],["parseresult"]]],[11,"next","","",114,[[["self"]],["option"]]],[11,"clone","","",115,[[["self"]],["many"]]],[11,"parse_partial","","",115,N],[11,"parse_first","","",115,N],[11,"parse_mode_impl","","",115,N],[11,"add_error","","",115,[[["self"],["tracked"]]]],[11,"clone","","",116,[[["self"]],["many1"]]],[11,"parse_partial","","",116,N],[11,"parse_first","","",116,N],[11,"parse_mode_impl","","",116,N],[11,"add_error","","",116,[[["self"],["tracked"]]]],[11,"clone","","",117,[[["self"]],["skipmany"]]],[11,"parse_lazy","","",117,N],[11,"parse_partial","","",117,N],[11,"add_error","","",117,[[["self"],["tracked"]]]],[11,"clone","","",118,[[["self"]],["skipmany1"]]],[11,"parse_lazy","","",118,N],[11,"parse_partial","","",118,N],[11,"add_error","","",118,[[["self"],["tracked"]]]],[11,"clone","","",119,[[["self"]],["sepby"]]],[11,"parse_partial","","",119,N],[11,"parse_first","","",119,N],[11,"parse_mode_impl","","",119,N],[11,"add_error","","",119,[[["self"],["tracked"]]]],[11,"clone","","",120,[[["self"]],["sepby1"]]],[11,"parse_partial","","",120,N],[11,"parse_first","","",120,N],[11,"parse_mode_impl","","",120,N],[11,"add_error","","",120,[[["self"],["tracked"]]]],[11,"clone","","",121,[[["self"]],["sependby"]]],[11,"parse_partial","","",121,N],[11,"parse_first","","",121,N],[11,"parse_mode_impl","","",121,N],[11,"add_error","","",121,[[["self"],["tracked"]]]],[11,"clone","","",122,[[["self"]],["sependby1"]]],[11,"parse_partial","","",122,N],[11,"parse_first","","",122,N],[11,"parse_mode_impl","","",122,N],[11,"add_error","","",122,[[["self"],["tracked"]]]],[11,"clone","","",123,[[["self"]],["chainl1"]]],[11,"parse_partial","","",123,N],[11,"parse_first","","",123,N],[11,"parse_mode_impl","","",123,N],[11,"add_error","","",123,[[["self"],["tracked"]]]],[11,"clone","","",124,[[["self"]],["chainr1"]]],[11,"parse_lazy","","",124,N],[11,"add_error","","",124,[[["self"],["tracked"]]]],[11,"clone","","",125,[[["self"]],["takeuntil"]]],[11,"parse_partial","","",125,N],[11,"parse_first","","",125,N],[11,"parse_mode_impl","","",125,N],[11,"clone","","",111,[[["self"]],["skipuntil"]]],[11,"parse_partial","","",111,N],[11,"parse_first","","",111,N],[11,"parse_mode_impl","","",111,N],[11,"add_error","","",111,[[["self"],["tracked"]]]],[11,"default","","",126,[[],["escapedstate"]]],[11,"parse_lazy","","",127,N],[11,"add_error","","",127,[[["self"],["tracked"]]]],[0,"sequence","combine::parser","Combinators which take multiple parsers and applies them one after another.",N,N],[3,"PartialState1","combine::parser::sequence","",N,N],[12,"A","","",128,N],[3,"PartialState2","","",N,N],[12,"A","","",129,N],[12,"B","","",129,N],[3,"PartialState3","","",N,N],[12,"A","","",130,N],[12,"B","","",130,N],[12,"C","","",130,N],[3,"PartialState4","","",N,N],[12,"A","","",131,N],[12,"B","","",131,N],[12,"C","","",131,N],[12,"D","","",131,N],[3,"PartialState5","","",N,N],[12,"A","","",132,N],[12,"B","","",132,N],[12,"C","","",132,N],[12,"D","","",132,N],[12,"E","","",132,N],[3,"PartialState6","","",N,N],[12,"A","","",133,N],[12,"B","","",133,N],[12,"C","","",133,N],[12,"D","","",133,N],[12,"E","","",133,N],[12,"F","","",133,N],[3,"PartialState7","","",N,N],[12,"A","","",134,N],[12,"B","","",134,N],[12,"C","","",134,N],[12,"D","","",134,N],[12,"E","","",134,N],[12,"F","","",134,N],[12,"G","","",134,N],[3,"PartialState8","","",N,N],[12,"A","","",135,N],[12,"B","","",135,N],[12,"C","","",135,N],[12,"D","","",135,N],[12,"E","","",135,N],[12,"F","","",135,N],[12,"G","","",135,N],[12,"H","","",135,N],[3,"PartialState9","","",N,N],[12,"A","","",136,N],[12,"B","","",136,N],[12,"C","","",136,N],[12,"D","","",136,N],[12,"E","","",136,N],[12,"F","","",136,N],[12,"G","","",136,N],[12,"H","","",136,N],[12,"I","","",136,N],[3,"PartialState10","","",N,N],[12,"A","","",137,N],[12,"B","","",137,N],[12,"C","","",137,N],[12,"D","","",137,N],[12,"E","","",137,N],[12,"F","","",137,N],[12,"G","","",137,N],[12,"H","","",137,N],[12,"I","","",137,N],[12,"J","","",137,N],[3,"PartialState11","","",N,N],[12,"A","","",138,N],[12,"B","","",138,N],[12,"C","","",138,N],[12,"D","","",138,N],[12,"E","","",138,N],[12,"F","","",138,N],[12,"G","","",138,N],[12,"H","","",138,N],[12,"I","","",138,N],[12,"J","","",138,N],[12,"K","","",138,N],[3,"PartialState12","","",N,N],[12,"A","","",139,N],[12,"B","","",139,N],[12,"C","","",139,N],[12,"D","","",139,N],[12,"E","","",139,N],[12,"F","","",139,N],[12,"G","","",139,N],[12,"H","","",139,N],[12,"I","","",139,N],[12,"J","","",139,N],[12,"K","","",139,N],[12,"L","","",139,N],[3,"With","","",N,N],[3,"Skip","","",N,N],[3,"Between","","",N,N],[3,"Then","","",N,N],[3,"ThenPartial","","",N,N],[5,"with","","Equivalent to [`p1.with(p2)`].",N,[[["p1"],["p2"]],["with"]]],[5,"skip","","",N,[[["p1"],["p2"]],["skip"]]],[5,"between","","Parses `open` followed by `parser` followed by `close`. Returns the value of `parser`.",N,[[["l"],["r"],["p"]],["between"]]],[5,"then","","Equivalent to [`p.then(f)`].",N,[[["p"],["f"]],["then"]]],[5,"then_partial","","Equivalent to [`p.then_partial(f)`].",N,[[["p"],["f"]],["thenpartial"]]],[11,"default","","",128,[[],["partialstate1"]]],[11,"default","","",129,[[],["partialstate2"]]],[11,"default","","",130,[[],["partialstate3"]]],[11,"default","","",131,[[],["partialstate4"]]],[11,"default","","",132,[[],["partialstate5"]]],[11,"default","","",133,[[],["partialstate6"]]],[11,"default","","",134,[[],["partialstate7"]]],[11,"default","","",135,[[],["partialstate8"]]],[11,"default","","",136,[[],["partialstate9"]]],[11,"default","","",137,[[],["partialstate10"]]],[11,"default","","",138,[[],["partialstate11"]]],[11,"default","","",139,[[],["partialstate12"]]],[11,"clone","","",140,[[["self"]],["with"]]],[11,"parse_lazy","","",140,N],[11,"parse_partial","","",140,N],[11,"parse_first","","",140,N],[11,"parse_mode_impl","","",140,N],[11,"add_error","","",140,[[["self"],["tracked"]]]],[11,"clone","","",141,[[["self"]],["skip"]]],[11,"parse_partial","","",141,N],[11,"parse_first","","",141,N],[11,"parse_mode_impl","","",141,N],[11,"add_error","","",141,[[["self"],["tracked"]]]],[11,"clone","","",142,[[["self"]],["between"]]],[11,"parse_lazy","","",142,N],[11,"parse_partial","","",142,N],[11,"add_error","","",142,[[["self"],["tracked"]]]],[11,"clone","","",143,[[["self"]],["then"]]],[11,"parse_partial","","",143,N],[11,"parse_first","","",143,N],[11,"parse_mode_impl","","",143,N],[11,"add_error","","",143,[[["self"],["tracked"]]]],[11,"clone","","",144,[[["self"]],["thenpartial"]]],[11,"parse_partial","","",144,N],[11,"parse_first","","",144,N],[11,"parse_mode_impl","","",144,N],[11,"add_error","","",144,[[["self"],["tracked"]]]],[8,"Parser","combine::parser","By implementing the `Parser` trait a type says that it can be used to parse an input stream into the type `Output`.",N,N],[16,"Input","","The type which is taken as input for the parser. The type must implement the `Stream` trait which allows the parser to read items from the type.",145,N],[16,"Output","","The type which is returned if the parser is successful.",145,N],[16,"PartialState","","Determines the state necessary to resume parsing after more input is supplied.",145,N],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to parse it, returning an easy to use and format error if parsing did not succeed.",145,[[["self"],["i"]],["result",["parseerror"]]]],[11,"parse","","Entry point of the parser. Takes some input and tries to parse it.",145,N],[11,"parse_with_state","","Entry point of the parser when using partial parsing. Takes some input and tries to parse it.",145,N],[11,"parse_stream","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,N],[11,"parse_stream_consumed","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,N],[11,"parse_stream_consumed_partial","","",145,N],[11,"parse_lazy","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,N],[11,"parse_first","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`.",145,N],[11,"parse_partial","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`",145,N],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed with an `EmptyErr` result.",145,[[["self"],["tracked"]]]],[11,"by_ref","","Borrows a parser instead of consuming it.",145,[[["self"]],["self"]]],[11,"with","","Discards the value of the `self` parser and returns the value of `p`. Fails if any of the parsers fails.",145,[[["self"],["p2"]],["with"]]],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`. Fails if any of the parsers fails.",145,[[["self"],["p2"]],["skip"]]],[11,"and","","Parses with `self` followed by `p`. Succeeds if both parsers succeed, otherwise fails. Returns a tuple with both values on success.",145,N],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any input it tries to consume the same input using `p`.",145,[[["self"],["p2"]],["or"]]],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse the rest of the input.",145,[[["self"],["f"]],["then"]]],[11,"then_partial","","Variant of `then` which parses using `self` and then passes the value to `f` as a `&mut` reference.",145,[[["self"],["f"]],["thenpartial"]]],[11,"map","","Uses `f` to map over the parsed value.",145,[[["self"],["f"]],["map"]]],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",145,[[["self"],["f"]],["flatmap"]]],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error.",145,[[["self"],["s"]],["message"]]],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by `msg`. `msg` is then used in error messages as \"Expected `msg`\".",145,[[["self"],["s"]],["expected"]]],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully. `f` may optionally fail with an error which is automatically converted to a `ParseError`.",145,[[["self"],["f"]],["andthen"]]],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,N],[11,"partial_iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,N],[11,"boxed","","Turns the parser into a trait object by putting it in a `Box`. Can be used to easily return parsers from functions without naming the type.",145,[[["self"]],["box",["parser"]]]],[11,"left","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,[[["self"]],["either"]]],[11,"right","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,[[["self"]],["either"]]],[6,"ConsumedResult","combine","A `Result` type which has the consumed status flattened into the result. Conversions to and from `std::result::Result` can be done using `result.into()` or `From::from(result)`",N,N],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate whether they were successful or not. `O` is the type that is output on success. `I` is the specific stream type used in the parser.",N,N],[8,"ParseError","","Trait which defines a combine parse error.",N,N],[16,"StreamError","","",11,N],[10,"empty","","Constructs an empty error.",11,[[["position"]],["self"]]],[10,"from_error","","Creates a `ParseError` from a single `Self::StreamError`",11,N],[10,"set_position","","Sets the position of this `ParseError`",11,[[["self"],["position"]]]],[11,"merge","","Merges two errors. If they exist at the same position the errors of `other` are added to `self` (using the semantics of `add`). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",11,[[["self"],["self"]],["self"]]],[10,"add","","Adds a `StreamError` to `self`.",11,N],[11,"add_expected","","",11,[[["self"],["info"]]]],[11,"add_unexpected","","",11,[[["self"],["info"]]]],[11,"add_message","","",11,[[["self"],["info"]]]],[10,"set_expected","","Sets `info` as the only `Expected` error of `self`",11,N],[10,"is_unexpected_end_of_input","","",11,[[["self"]],["bool"]]],[10,"into_other","","Does a best-effort conversion of `self` into another `ParseError`",11,[[["self"]],["t"]]],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into the type `Output`.",N,N],[16,"Input","","The type which is taken as input for the parser. The type must implement the `Stream` trait which allows the parser to read items from the type.",145,N],[16,"Output","","The type which is returned if the parser is successful.",145,N],[16,"PartialState","","Determines the state necessary to resume parsing after more input is supplied.",145,N],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to parse it, returning an easy to use and format error if parsing did not succeed.",145,[[["self"],["i"]],["result",["parseerror"]]]],[11,"parse","","Entry point of the parser. Takes some input and tries to parse it.",145,N],[11,"parse_with_state","","Entry point of the parser when using partial parsing. Takes some input and tries to parse it.",145,N],[11,"parse_stream","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,N],[11,"parse_stream_consumed","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,N],[11,"parse_stream_consumed_partial","","",145,N],[11,"parse_lazy","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,N],[11,"parse_first","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`.",145,N],[11,"parse_partial","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`",145,N],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed with an `EmptyErr` result.",145,[[["self"],["tracked"]]]],[11,"by_ref","","Borrows a parser instead of consuming it.",145,[[["self"]],["self"]]],[11,"with","","Discards the value of the `self` parser and returns the value of `p`. Fails if any of the parsers fails.",145,[[["self"],["p2"]],["with"]]],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`. Fails if any of the parsers fails.",145,[[["self"],["p2"]],["skip"]]],[11,"and","","Parses with `self` followed by `p`. Succeeds if both parsers succeed, otherwise fails. Returns a tuple with both values on success.",145,N],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any input it tries to consume the same input using `p`.",145,[[["self"],["p2"]],["or"]]],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse the rest of the input.",145,[[["self"],["f"]],["then"]]],[11,"then_partial","","Variant of `then` which parses using `self` and then passes the value to `f` as a `&mut` reference.",145,[[["self"],["f"]],["thenpartial"]]],[11,"map","","Uses `f` to map over the parsed value.",145,[[["self"],["f"]],["map"]]],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",145,[[["self"],["f"]],["flatmap"]]],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error.",145,[[["self"],["s"]],["message"]]],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by `msg`. `msg` is then used in error messages as \"Expected `msg`\".",145,[[["self"],["s"]],["expected"]]],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully. `f` may optionally fail with an error which is automatically converted to a `ParseError`.",145,[[["self"],["f"]],["andthen"]]],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,N],[11,"partial_iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,N],[11,"boxed","","Turns the parser into a trait object by putting it in a `Box`. Can be used to easily return parsers from functions without naming the type.",145,[[["self"]],["box",["parser"]]]],[11,"left","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,[[["self"]],["either"]]],[11,"right","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,[[["self"]],["either"]]],[8,"Positioned","","A type which has a position.",N,N],[10,"position","","Returns the current position of the stream.",22,N],[8,"RangeStream","","A `RangeStream` is an extension of `Stream` which allows for zero copy parsing.",N,N],[8,"RangeStreamOnce","","A `RangeStream` is an extension of `StreamOnce` which allows for zero copy parsing.",N,N],[10,"uncons_range","","Takes `size` elements from the stream. Fails if the length of the stream is less than `size`.",25,[[["self"],["usize"]],["result",["streamerrorfor"]]]],[10,"uncons_while","","Takes items from stream, testing each one with `predicate`. returns the range of items which passed `predicate`.",25,[[["self"],["f"]],["result",["streamerrorfor"]]]],[11,"uncons_while1","","Takes items from stream, testing each one with `predicate` returns a range of at least one items which passed `predicate`.",25,[[["self"],["f"]],["fastresult",["streamerrorfor"]]]],[10,"distance","","Returns the distance between `self` and `end`. The returned `usize` must be so that",25,N],[8,"Stream","","A stream of tokens which can be duplicated",N,N],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",N,N],[16,"Item","","The type of items which is yielded from this stream.",23,N],[16,"Range","","The type of a range of items yielded from this stream. Types which do not a have a way of yielding ranges of items should just use the `Self::Item` for this type.",23,N],[16,"Position","","Type which represents the position in a stream. `Ord` is required to allow parsers to determine which of two positions are further ahead.",23,N],[16,"Error","","",23,N],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements. Returns `Err` if no element could be retrieved.",23,[[["self"]],["result",["streamerrorfor"]]]],[11,"is_partial","","Returns `true` if this stream only contains partial input.",23,[[["self"]],["bool"]]],[14,"parser","","Declares a named parser which can easily be reused.",N,N],[14,"choice","","Takes a number of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",N,N],[14,"struct_parser","","Sequences multiple parsers and builds a struct out of them.",N,N]],"paths":[[3,"Errors"],[3,"Stream"],[4,"Info"],[4,"Error"],[3,"Tracked"],[4,"Info"],[4,"Consumed"],[4,"UnexpectedParse"],[4,"StringStreamError"],[4,"FastResult"],[8,"StreamError"],[8,"ParseError"],[3,"PartialStream"],[3,"SliceStream"],[3,"PointerOffset"],[3,"BufferedStream"],[3,"State"],[3,"SourcePosition"],[8,"Positioner"],[8,"RangePositioner"],[8,"DefaultPositioned"],[3,"IndexPositioner"],[8,"Positioned"],[8,"StreamOnce"],[8,"Resetable"],[8,"RangeStreamOnce"],[8,"FullRangeStream"],[8,"Range"],[3,"IteratorStream"],[3,"ReadStream"],[3,"U16"],[3,"U32"],[3,"U64"],[3,"I16"],[3,"I32"],[3,"I64"],[3,"F32"],[3,"F64"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Bytes"],[3,"BytesCmp"],[3,"TakeUntilByte"],[3,"TakeUntilByte2"],[3,"TakeUntilByte3"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Str"],[3,"StrCmp"],[8,"ChoiceParser"],[3,"Choice"],[3,"Or"],[3,"Optional"],[3,"NotFollowedBy"],[3,"Try"],[3,"LookAhead"],[3,"Map"],[3,"FlatMap"],[3,"AndThen"],[3,"Recognize"],[3,"NoPartial"],[3,"Ignore"],[3,"AnyPartialState"],[3,"AnyPartialStateParser"],[3,"AnySendPartialState"],[3,"AnySendPartialStateParser"],[3,"Lazy"],[3,"Unexpected"],[3,"Message"],[3,"Expected"],[3,"FnParser"],[3,"EnvParser"],[3,"Any"],[3,"Satisfy"],[3,"SatisfyMap"],[3,"Token"],[3,"Tokens"],[3,"Position"],[3,"OneOf"],[3,"NoneOf"],[3,"Value"],[3,"Eof"],[3,"Recognize"],[3,"Range"],[3,"RecognizeWithValue"],[3,"Take"],[3,"TakeWhile"],[3,"TakeWhile1"],[3,"TakeUntilRange"],[3,"SkipCount"],[3,"SkipCountMinMax"],[3,"SkipUntil"],[3,"Count"],[3,"CountMinMax"],[3,"Iter"],[3,"Many"],[3,"Many1"],[3,"SkipMany"],[3,"SkipMany1"],[3,"SepBy"],[3,"SepBy1"],[3,"SepEndBy"],[3,"SepEndBy1"],[3,"Chainl1"],[3,"Chainr1"],[3,"TakeUntil"],[3,"EscapedState"],[3,"Escaped"],[3,"PartialState1"],[3,"PartialState2"],[3,"PartialState3"],[3,"PartialState4"],[3,"PartialState5"],[3,"PartialState6"],[3,"PartialState7"],[3,"PartialState8"],[3,"PartialState9"],[3,"PartialState10"],[3,"PartialState11"],[3,"PartialState12"],[3,"With"],[3,"Skip"],[3,"Between"],[3,"Then"],[3,"ThenPartial"],[8,"Parser"]]};
searchIndex["crc"]={"doc":"crc Rust implementation of CRC(16, 32, 64)","items":[[0,"crc16","crc","",N,N],[3,"Digest","crc::crc16","",N,N],[5,"make_table","","",N,N],[5,"update","","",N,N],[5,"checksum_x25","","",N,N],[5,"checksum_usb","","",N,N],[17,"X25","","",N,N],[17,"X25_TABLE","","",N,N],[17,"USB","","",N,N],[17,"USB_TABLE","","",N,N],[8,"Hasher16","","",N,N],[10,"reset","","",0,[[["self"]]]],[10,"write","","",0,N],[10,"sum16","","",0,[[["self"]],["u16"]]],[11,"new","","",1,[[["u16"]],["digest"]]],[11,"new_with_initial","","",1,[[["u16"],["u16"]],["digest"]]],[11,"reset","","",1,[[["self"]]]],[11,"write","","",1,N],[11,"sum16","","",1,[[["self"]],["u16"]]],[11,"write","","",1,N],[11,"finish","","",1,[[["self"]],["u64"]]],[0,"crc32","crc","",N,N],[3,"Digest","crc::crc32","",N,N],[5,"make_table","","",N,N],[5,"update","","",N,N],[5,"checksum_ieee","","",N,N],[5,"checksum_castagnoli","","",N,N],[5,"checksum_koopman","","",N,N],[17,"CASTAGNOLI","","",N,N],[17,"CASTAGNOLI_TABLE","","",N,N],[17,"IEEE","","",N,N],[17,"IEEE_TABLE","","",N,N],[17,"KOOPMAN","","",N,N],[17,"KOOPMAN_TABLE","","",N,N],[8,"Hasher32","","",N,N],[10,"reset","","",2,[[["self"]]]],[10,"write","","",2,N],[10,"sum32","","",2,[[["self"]],["u32"]]],[11,"new","","",3,[[["u32"]],["digest"]]],[11,"new_with_initial","","",3,[[["u32"],["u32"]],["digest"]]],[11,"reset","","",3,[[["self"]]]],[11,"write","","",3,N],[11,"sum32","","",3,[[["self"]],["u32"]]],[11,"write","","",3,N],[11,"finish","","",3,[[["self"]],["u64"]]],[0,"crc64","crc","",N,N],[3,"Digest","crc::crc64","",N,N],[5,"make_table","","",N,N],[5,"update","","",N,N],[5,"checksum_ecma","","",N,N],[5,"checksum_iso","","",N,N],[17,"ECMA","","",N,N],[17,"ECMA_TABLE","","",N,N],[17,"ISO","","",N,N],[17,"ISO_TABLE","","",N,N],[8,"Hasher64","","",N,N],[10,"reset","","",4,[[["self"]]]],[10,"write","","",4,N],[10,"sum64","","",4,[[["self"]],["u64"]]],[11,"new","","",5,[[["u64"]],["digest"]]],[11,"new_with_initial","","",5,[[["u64"],["u64"]],["digest"]]],[11,"reset","","",5,[[["self"]]]],[11,"write","","",5,N],[11,"sum64","","",5,[[["self"]],["u64"]]],[11,"write","","",5,N],[11,"finish","","",5,[[["self"]],["u64"]]]],"paths":[[8,"Hasher16"],[3,"Digest"],[8,"Hasher32"],[3,"Digest"],[8,"Hasher64"],[3,"Digest"]]};
searchIndex["crossbeam_deque"]={"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",N,N],[3,"Stealer","","A stealer that steals elements from the top of a deque.",N,N],[4,"Steal","","Possible outcomes of a steal operation.",N,N],[13,"Empty","","The deque was empty at the time of stealing.",0,N],[13,"Data","","Some data has been successfully stolen.",0,N],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["steal"]],["bool"]]],[11,"ne","","",0,[[["self"],["steal"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["steal"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["steal"]],["bool"]]],[11,"le","","",0,[[["self"],["steal"]],["bool"]]],[11,"gt","","",0,[[["self"],["steal"]],["bool"]]],[11,"ge","","",0,[[["self"],["steal"]],["bool"]]],[11,"cmp","","",0,[[["self"],["steal"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["steal"]]],[11,"new","","Returns a new deque.",1,[[],["deque"]]],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,[[["usize"]],["deque"]]],[11,"is_empty","","Returns `true` if the deque is empty.",1,[[["self"]],["bool"]]],[11,"len","","Returns the number of elements in the deque.",1,[[["self"]],["usize"]]],[11,"min_capacity","","Returns the minimum capacity of the deque.",1,[[["self"]],["usize"]]],[11,"capacity","","Returns the number of elements the deque can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"shrink_to_fit","","Shrinks the capacity of the deque as much as possible.",1,[[["self"]]]],[11,"push","","Pushes an element into the bottom of the deque.",1,[[["self"],["t"]]]],[11,"pop","","Pops an element from the bottom of the deque.",1,[[["self"]],["option"]]],[11,"steal","","Steals an element from the top of the deque.",1,[[["self"]],["steal"]]],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,[[["self"]],["stealer"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["deque"]]],[11,"is_empty","","Returns `true` if the deque is empty.",2,[[["self"]],["bool"]]],[11,"len","","Returns the number of elements in the deque.",2,[[["self"]],["usize"]]],[11,"steal","","Steals an element from the top of the deque.",2,[[["self"]],["steal"]]],[11,"clone","","Creates another stealer.",2,[[["self"]],["stealer"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"]={"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",N,N],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",N,N],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,N],[12,"new","","The new value, which the operation failed to store.",0,N],[3,"Owned","","An owned heap-allocated object.",N,N],[3,"Shared","","A pointer to an object protected by the epoch GC.",N,N],[3,"Guard","","A guard that keeps the current thread pinned.",N,N],[3,"Collector","","An epoch-based garbage collector.",N,N],[3,"Handle","","A handle to a garbage collector.",N,N],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",N,[[],["guard"]]],[5,"default_collector","","Returns the default handle associated with the current thread.",N,[[],["collector"]]],[5,"default_handle","","Returns the default handle associated with the current thread.",N,[[],["handle"]]],[5,"is_pinned","","Returns `true` if the current thread is pinned.",N,[[],["bool"]]],[5,"pin","","Pins the current thread.",N,[[],["guard"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"null","","Returns a new null atomic pointer.",1,[[],["atomic"]]],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,[[["t"]],["atomic"]]],[11,"load","","Loads a `Shared` from the atomic pointer.",1,[[["self"],["ordering"],["guard"]],["shared"]]],[11,"load_consume","","Loads a `Shared` from the atomic pointer using a \"consume\" memory ordering.",1,[[["self"],["guard"]],["shared"]]],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,[[["self"],["p"],["ordering"]]]],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,[[["self"],["p"],["ordering"],["guard"]],["shared"]]],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","Returns a copy of the atomic value.",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,[[["owned"]],["self"]]],[11,"from","","",1,[[["box"]],["self"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,[[["shared"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,N],[11,"into_usize","","",2,[[["self"]],["usize"]]],[11,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",2,[[["usize"]],["self"]]],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,[[["t"]],["owned"]]],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,N],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,[[["self"],["guard"]],["shared"]]],[11,"into_box","","Converts the owned pointer into a `Box`.",2,[[["self"]],["box"]]],[11,"tag","","Returns the tag stored within the pointer.",2,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,[[["self"],["usize"]],["owned"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["self"]]],[11,"from","","Returns a new owned pointer pointing to `b`.",2,[[["box"]],["self"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"as_ref","","",2,[[["self"]],["t"]]],[11,"as_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"into_usize","","",3,[[["self"]],["usize"]]],[11,"from_usize","","",3,[[["usize"]],["self"]]],[11,"null","","Returns a new null pointer.",3,[[],["shared"]]],[11,"is_null","","Returns `true` if the pointer is null.",3,[[["self"]],["bool"]]],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,N],[11,"deref","","Dereferences the pointer.",3,[[["self"]],["t"]]],[11,"as_ref","","Converts the pointer to a reference.",3,[[["self"]],["option"]]],[11,"into_owned","","Takes ownership of the pointee.",3,[[["self"]],["owned"]]],[11,"tag","","Returns the tag stored within the pointer.",3,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,[[["self"],["usize"]],["shared"]]],[11,"from","","Returns a new pointer pointing to `raw`.",3,N],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["self"]]],[11,"new","","Creates a new collector.",4,[[],["self"]]],[11,"register","","Registers a new handle for the collector.",4,[[["self"]],["handle"]]],[11,"clone","","Creates another reference to the same garbage collector.",4,[[["self"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","Checks if both handles point to the same collector.",4,[[["self"],["collector"]],["bool"]]],[11,"pin","","Pins the handle.",5,[[["self"]],["guard"]]],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,[[["self"]],["bool"]]],[11,"collector","","Returns the `Collector` associated with this handle.",5,[[["self"]],["collector"]]],[11,"drop","","",5,[[["self"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,[[["self"],["f"]]]],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,[[["self"]]]],[11,"repin","","Unpins and then immediately re-pins the thread.",6,[[["self"]]]],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,[[["self"],["f"]],["r"]]],[11,"collector","","Returns the `Collector` associated with this guard.",6,[[["self"]],["option",["collector"]]]],[11,"drop","","",6,[[["self"]]]],[11,"clone","","",6,[[["self"]],["guard"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",N,N],[10,"success","","The ordering of the operation when it succeeds.",7,[[["self"]],["ordering"]]],[10,"failure","","The ordering of the operation when it fails.",7,[[["self"]],["ordering"]]],[8,"Pointer","","A trait for either `Owned` or `Shared` pointers.",N,N],[10,"into_usize","","Returns the machine representation of the pointer.",8,[[["self"]],["usize"]]],[10,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",8,[[["usize"]],["self"]]]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[0,"cache_padded","crossbeam_utils","",N,N],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",N,N],[11,"drop","","",0,[[["self"]]]],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"default","","",0,[[],["self"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["self"]]],[0,"scoped","crossbeam_utils","",N,N],[3,"Scope","crossbeam_utils::scoped","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",1,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",1,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",1,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",3,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",3,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",3,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",2,[[["self"]],["result"]]],[11,"thread","","Get the underlying thread handle.",2,[[["self"]],["thread"]]],[11,"drop","","",1,[[["self"]]]],[0,"consume","crossbeam_utils","",N,N],[8,"AtomicConsume","crossbeam_utils::consume","Trait which allows reading from an atomic type with \"consume\" ordering.",N,N],[16,"Val","","Type returned by `load_consume`.",4,N],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",4,N]],"paths":[[3,"CachePadded"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"],[8,"AtomicConsume"]]};
searchIndex["docopt"]={"doc":"Docopt for Rust. This implementation conforms to the official description of Docopt and passes its test suite.","items":[[3,"ArgvMap","docopt","A map containing matched values from command line arguments.",N,N],[3,"Deserializer","","Deserializer for `ArgvMap` into your own `Deserialize`able types.",N,N],[3,"Docopt","","The main Docopt type, which is constructed with a Docopt usage string.",N,N],[4,"Error","","Represents the different types of Docopt errors.",N,N],[13,"Usage","","Parsing the usage string failed.",0,N],[13,"Argv","","Parsing the argv specified failed.",0,N],[13,"NoMatch","","The given argv parsed successfully, but it did not match any example usage of the program.",0,N],[13,"Deserialize","","This indicates a problem deserializing a successful argv match into a deserializable value.",0,N],[13,"WithProgramUsage","","Parsing failed, and the program usage should be printed next to the failure message. Typically this wraps `Argv` and `NoMatch` errors.",0,N],[13,"Help","","Decoding or parsing failed because the command line specified that the help message should be printed.",0,N],[13,"Version","","Decoding or parsing failed because the command line specified that the version should be printed",0,N],[4,"Value","","A matched command line value.",N,N],[13,"Switch","","A boolean value from a flag that has no argument.",1,N],[13,"Counted","","The number of occurrences of a repeated flag.",1,N],[13,"Plain","","A positional or flag argument.",1,N],[13,"List","","A List of positional or flag arguments.",1,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fatal","","Return whether this was a fatal error or not.",0,[[["self"]],["bool"]]],[11,"exit","","Print this error and immediately exit the program.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["stderror"]]]],[11,"custom","","",0,[[["t"]],["self"]]],[11,"clone","","",2,[[["self"]],["docopt"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Parse the Docopt usage string given.",2,[[["s"]],["result",["docopt","error"]]]],[11,"deserialize","","Parse and deserialize the given argv.",2,[[["self"]],["result",["error"]]]],[11,"parse","","Parse command line arguments and try to match them against a usage pattern specified in the Docopt string.",2,[[["self"]],["result",["argvmap","error"]]]],[11,"argv","","Set the argv to be used for Docopt parsing.",2,[[["self"],["i"]],["docopt"]]],[11,"options_first","","Enables the \"options first\" Docopt behavior.",2,[[["self"],["bool"]],["docopt"]]],[11,"help","","Enables automatic handling of `--help`.",2,[[["self"],["bool"]],["docopt"]]],[11,"version","","Enables automatic handling of `--version`.",2,[[["self"],["option",["string"]]],["docopt"]]],[11,"clone","","",3,[[["self"]],["argvmap"]]],[11,"deserialize","","Tries to deserialize the map of values into a struct.",3,[[["self"]],["result",["error"]]]],[11,"get_bool","","Finds the value corresponding to `key` and calls `as_bool()` on it. If the key does not exist, `false` is returned.",3,[[["self"],["str"]],["bool"]]],[11,"get_count","","Finds the value corresponding to `key` and calls `as_count()` on it. If the key does not exist, `0` is returned.",3,[[["self"],["str"]],["u64"]]],[11,"get_str","","Finds the value corresponding to `key` and calls `as_str()` on it. If the key does not exist, `\"\"` is returned.",3,[[["self"],["str"]],["str"]]],[11,"get_vec","","Finds the value corresponding to `key` and calls `as_vec()` on it. If the key does not exist, `vec!()` is returned.",3,[[["self"],["str"]],["vec",["str"]]]],[11,"find","","Return the raw value corresponding to some `key`.",3,[[["self"],["str"]],["option",["value"]]]],[11,"len","","Return the number of values, not including synonyms.",3,[[["self"]],["usize"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["value"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["value"]],["bool"]]],[11,"ne","","",1,[[["self"],["value"]],["bool"]]],[11,"as_bool","","Returns the value as a bool.",1,[[["self"]],["bool"]]],[11,"as_count","","Returns the value as a count of the number of times it occurred.",1,[[["self"]],["u64"]]],[11,"as_str","","Returns the value as a string.",1,[[["self"]],["str"]]],[11,"as_vec","","Returns the value as a list of strings.",1,[[["self"]],["vec",["str"]]]]],"paths":[[4,"Error"],[4,"Value"],[3,"Docopt"],[3,"ArgvMap"]]};
searchIndex["dtoa"]={"doc":"","items":[[5,"write","dtoa","",N,[[["w"],["v"]],["result",["usize"]]]],[8,"Floating","","",N,N],[10,"write","","",0,[[["self"],["w"]],["result",["usize"]]]],[14,"diyfp","","",N,N],[14,"dtoa","","",N,N]],"paths":[[8,"Floating"]]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"read","","",0,N],[11,"read_to_end","","",0,[[["self"],["vec"]],["result",["usize"]]]],[11,"fill_buf","","",0,[[["self"]],["result"]]],[11,"consume","","",0,[[["self"],["usize"]]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N]],"paths":[[4,"Either"]]};
searchIndex["encoding_rs"]={"doc":"encoding_rs is a Gecko-oriented Free Software / Open Source implementation of the Encoding Standard in Rust. Gecko-oriented means that converting to and from UTF-16 is supported in addition to converting to and from UTF-8, that the performance and streamability goals are browser-oriented, and that FFI-friendliness is a goal.","items":[[3,"Encoding","encoding_rs","An encoding as defined in the [Encoding Standard][1].",N,N],[3,"Decoder","","A converter that decodes a byte stream into Unicode according to a character encoding in a streaming (incremental) manner.",N,N],[3,"Encoder","","A converter that encodes a Unicode stream into bytes according to a character encoding in a streaming (incremental) manner.",N,N],[4,"CoderResult","","Result of a (potentially partial) decode or encode operation with replacement.",N,N],[13,"InputEmpty","","The input was exhausted.",0,N],[13,"OutputFull","","The converter cannot produce another unit of output, because the output buffer does not have enough space left.",0,N],[4,"DecoderResult","","Result of a (potentially partial) decode operation without replacement.",N,N],[13,"InputEmpty","","The input was exhausted.",1,N],[13,"OutputFull","","The decoder cannot produce another unit of output, because the output buffer does not have enough space left.",1,N],[13,"Malformed","","The decoder encountered a malformed byte sequence.",1,N],[4,"EncoderResult","","Result of a (potentially partial) encode operation without replacement.",N,N],[13,"InputEmpty","","The input was exhausted.",2,N],[13,"OutputFull","","The encoder cannot produce another unit of output, because the output buffer does not have enough space left.",2,N],[13,"Unmappable","","The encoder encountered an unmappable character.",2,N],[0,"mem","","Functions for converting between different in-RAM representations of text and for quickly checking if the Unicode Bidirectional Algorithm can be avoided.",N,N],[4,"Latin1Bidi","encoding_rs::mem","Classification of text as Latin1 (all code points are below U+0100), left-to-right with some non-Latin1 characters or as containing at least some right-to-left characters.",N,N],[13,"Latin1","","Every character is below U+0100.",3,N],[13,"LeftToRight","","There is at least one character that's U+0100 or higher, but there are no right-to-left characters.",3,N],[13,"Bidi","","There is at least one right-to-left character.",3,N],[5,"is_ascii","","Checks whether the buffer is all-ASCII.",N,N],[5,"is_basic_latin","","Checks whether the buffer is all-Basic Latin (i.e. UTF-16 representing only ASCII characters).",N,N],[5,"is_utf8_latin1","","Checks whether the buffer is valid UTF-8 representing only code points less than or equal to U+00FF.",N,N],[5,"is_str_latin1","","Checks whether the buffer represents only code point less than or equal to U+00FF.",N,[[["str"]],["bool"]]],[5,"is_utf16_latin1","","Checks whether the buffer represents only code point less than or equal to U+00FF.",N,N],[5,"is_utf8_bidi","","Checks whether a potentially-invalid UTF-8 buffer contains code points that trigger right-to-left processing.",N,N],[5,"is_str_bidi","","Checks whether a valid UTF-8 buffer contains code points that trigger right-to-left processing.",N,[[["str"]],["bool"]]],[5,"is_utf16_bidi","","Checks whether a UTF-16 buffer contains code points that trigger right-to-left processing.",N,N],[5,"is_char_bidi","","Checks whether a code point triggers right-to-left processing.",N,[[["char"]],["bool"]]],[5,"is_utf16_code_unit_bidi","","Checks whether a UTF-16 code unit triggers right-to-left processing.",N,[[["u16"]],["bool"]]],[5,"check_utf8_for_latin1_and_bidi","","Checks whether a potentially invalid UTF-8 buffer contains code points that trigger right-to-left processing or is all-Latin1.",N,N],[5,"check_str_for_latin1_and_bidi","","Checks whether a valid UTF-8 buffer contains code points that trigger right-to-left processing or is all-Latin1.",N,[[["str"]],["latin1bidi"]]],[5,"check_utf16_for_latin1_and_bidi","","Checks whether a potentially invalid UTF-16 buffer contains code points that trigger right-to-left processing or is all-Latin1.",N,N],[5,"convert_utf8_to_utf16","","Converts potentially-invalid UTF-8 to valid UTF-16 with errors replaced with the REPLACEMENT CHARACTER.",N,N],[5,"convert_str_to_utf16","","Converts valid UTF-8 to valid UTF-16.",N,N],[5,"convert_utf16_to_utf8","","Converts potentially-invalid UTF-16 to valid UTF-8 with errors replaced with the REPLACEMENT CHARACTER.",N,N],[5,"convert_utf16_to_str","","Converts potentially-invalid UTF-16 to valid UTF-8 with errors replaced with the REPLACEMENT CHARACTER such that the validity of the output is signaled using the Rust type system.",N,N],[5,"convert_latin1_to_utf16","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-16.",N,N],[5,"convert_latin1_to_utf8","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-8.",N,N],[5,"convert_latin1_to_str","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-8 such that the validity of the output is signaled using the Rust type system.",N,N],[5,"convert_utf8_to_latin1_lossy","","If the input is valid UTF-8 representing only Unicode code points from U+0000 to U+00FF, inclusive, converts the input into output that represents the value of each code point as the unsigned byte value of each output byte.",N,N],[5,"convert_utf16_to_latin1_lossy","","If the input is valid UTF-16 representing only Unicode code points from U+0000 to U+00FF, inclusive, converts the input into output that represents the value of each code point as the unsigned byte value of each output byte.",N,N],[5,"utf16_valid_up_to","","Returns the index of the first unpaired surrogate or, if the input is valid UTF-16 in its entirety, the length of the input.",N,N],[5,"ensure_utf16_validity","","Replaces unpaired surrogates in the input with the REPLACEMENT CHARACTER.",N,N],[5,"copy_ascii_to_ascii","","Copies ASCII from source to destination up to the first non-ASCII byte (or the end of the input if it is ASCII in its entirety).",N,N],[5,"copy_ascii_to_basic_latin","","Copies ASCII from source to destination zero-extending it to UTF-16 up to the first non-ASCII byte (or the end of the input if it is ASCII in its entirety).",N,N],[5,"copy_basic_latin_to_ascii","","Copies Basic Latin from source to destination narrowing it to ASCII up to the first non-Basic Latin code unit (or the end of the input if it is Basic Latin in its entirety).",N,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["latin1bidi"]],["bool"]]],[7,"BIG5_INIT","encoding_rs","The initializer for the Big5 encoding.",N,N],[7,"BIG5","","The Big5 encoding.",N,N],[7,"EUC_JP_INIT","","The initializer for the EUC-JP encoding.",N,N],[7,"EUC_JP","","The EUC-JP encoding.",N,N],[7,"EUC_KR_INIT","","The initializer for the EUC-KR encoding.",N,N],[7,"EUC_KR","","The EUC-KR encoding.",N,N],[7,"GBK_INIT","","The initializer for the GBK encoding.",N,N],[7,"GBK","","The GBK encoding.",N,N],[7,"IBM866_INIT","","The initializer for the IBM866 encoding.",N,N],[7,"IBM866","","The IBM866 encoding.",N,N],[7,"ISO_2022_JP_INIT","","The initializer for the ISO-2022-JP encoding.",N,N],[7,"ISO_2022_JP","","The ISO-2022-JP encoding.",N,N],[7,"ISO_8859_10_INIT","","The initializer for the ISO-8859-10 encoding.",N,N],[7,"ISO_8859_10","","The ISO-8859-10 encoding.",N,N],[7,"ISO_8859_13_INIT","","The initializer for the ISO-8859-13 encoding.",N,N],[7,"ISO_8859_13","","The ISO-8859-13 encoding.",N,N],[7,"ISO_8859_14_INIT","","The initializer for the ISO-8859-14 encoding.",N,N],[7,"ISO_8859_14","","The ISO-8859-14 encoding.",N,N],[7,"ISO_8859_15_INIT","","The initializer for the ISO-8859-15 encoding.",N,N],[7,"ISO_8859_15","","The ISO-8859-15 encoding.",N,N],[7,"ISO_8859_16_INIT","","The initializer for the ISO-8859-16 encoding.",N,N],[7,"ISO_8859_16","","The ISO-8859-16 encoding.",N,N],[7,"ISO_8859_2_INIT","","The initializer for the ISO-8859-2 encoding.",N,N],[7,"ISO_8859_2","","The ISO-8859-2 encoding.",N,N],[7,"ISO_8859_3_INIT","","The initializer for the ISO-8859-3 encoding.",N,N],[7,"ISO_8859_3","","The ISO-8859-3 encoding.",N,N],[7,"ISO_8859_4_INIT","","The initializer for the ISO-8859-4 encoding.",N,N],[7,"ISO_8859_4","","The ISO-8859-4 encoding.",N,N],[7,"ISO_8859_5_INIT","","The initializer for the ISO-8859-5 encoding.",N,N],[7,"ISO_8859_5","","The ISO-8859-5 encoding.",N,N],[7,"ISO_8859_6_INIT","","The initializer for the ISO-8859-6 encoding.",N,N],[7,"ISO_8859_6","","The ISO-8859-6 encoding.",N,N],[7,"ISO_8859_7_INIT","","The initializer for the ISO-8859-7 encoding.",N,N],[7,"ISO_8859_7","","The ISO-8859-7 encoding.",N,N],[7,"ISO_8859_8_INIT","","The initializer for the ISO-8859-8 encoding.",N,N],[7,"ISO_8859_8","","The ISO-8859-8 encoding.",N,N],[7,"ISO_8859_8_I_INIT","","The initializer for the ISO-8859-8-I encoding.",N,N],[7,"ISO_8859_8_I","","The ISO-8859-8-I encoding.",N,N],[7,"KOI8_R_INIT","","The initializer for the KOI8-R encoding.",N,N],[7,"KOI8_R","","The KOI8-R encoding.",N,N],[7,"KOI8_U_INIT","","The initializer for the KOI8-U encoding.",N,N],[7,"KOI8_U","","The KOI8-U encoding.",N,N],[7,"SHIFT_JIS_INIT","","The initializer for the Shift_JIS encoding.",N,N],[7,"SHIFT_JIS","","The Shift_JIS encoding.",N,N],[7,"UTF_16BE_INIT","","The initializer for the UTF-16BE encoding.",N,N],[7,"UTF_16BE","","The UTF-16BE encoding.",N,N],[7,"UTF_16LE_INIT","","The initializer for the UTF-16LE encoding.",N,N],[7,"UTF_16LE","","The UTF-16LE encoding.",N,N],[7,"UTF_8_INIT","","The initializer for the UTF-8 encoding.",N,N],[7,"UTF_8","","The UTF-8 encoding.",N,N],[7,"GB18030_INIT","","The initializer for the gb18030 encoding.",N,N],[7,"GB18030","","The gb18030 encoding.",N,N],[7,"MACINTOSH_INIT","","The initializer for the macintosh encoding.",N,N],[7,"MACINTOSH","","The macintosh encoding.",N,N],[7,"REPLACEMENT_INIT","","The initializer for the replacement encoding.",N,N],[7,"REPLACEMENT","","The replacement encoding.",N,N],[7,"WINDOWS_1250_INIT","","The initializer for the windows-1250 encoding.",N,N],[7,"WINDOWS_1250","","The windows-1250 encoding.",N,N],[7,"WINDOWS_1251_INIT","","The initializer for the windows-1251 encoding.",N,N],[7,"WINDOWS_1251","","The windows-1251 encoding.",N,N],[7,"WINDOWS_1252_INIT","","The initializer for the windows-1252 encoding.",N,N],[7,"WINDOWS_1252","","The windows-1252 encoding.",N,N],[7,"WINDOWS_1253_INIT","","The initializer for the windows-1253 encoding.",N,N],[7,"WINDOWS_1253","","The windows-1253 encoding.",N,N],[7,"WINDOWS_1254_INIT","","The initializer for the windows-1254 encoding.",N,N],[7,"WINDOWS_1254","","The windows-1254 encoding.",N,N],[7,"WINDOWS_1255_INIT","","The initializer for the windows-1255 encoding.",N,N],[7,"WINDOWS_1255","","The windows-1255 encoding.",N,N],[7,"WINDOWS_1256_INIT","","The initializer for the windows-1256 encoding.",N,N],[7,"WINDOWS_1256","","The windows-1256 encoding.",N,N],[7,"WINDOWS_1257_INIT","","The initializer for the windows-1257 encoding.",N,N],[7,"WINDOWS_1257","","The windows-1257 encoding.",N,N],[7,"WINDOWS_1258_INIT","","The initializer for the windows-1258 encoding.",N,N],[7,"WINDOWS_1258","","The windows-1258 encoding.",N,N],[7,"WINDOWS_874_INIT","","The initializer for the windows-874 encoding.",N,N],[7,"WINDOWS_874","","The windows-874 encoding.",N,N],[7,"X_MAC_CYRILLIC_INIT","","The initializer for the x-mac-cyrillic encoding.",N,N],[7,"X_MAC_CYRILLIC","","The x-mac-cyrillic encoding.",N,N],[7,"X_USER_DEFINED_INIT","","The initializer for the x-user-defined encoding.",N,N],[7,"X_USER_DEFINED","","The x-user-defined encoding.",N,N],[11,"for_label","","Implements the get an encoding algorithm.",4,N],[11,"for_label_no_replacement","","This method behaves the same as `for_label()`, except when `for_label()` would return `Some(REPLACEMENT)`, this method returns `None` instead.",4,N],[11,"for_bom","","Performs non-incremental BOM sniffing.",4,N],[11,"name","","Returns the name of this encoding.",4,[[["self"]],["str"]]],[11,"can_encode_everything","","Checks whether the output encoding of this encoding can encode every `char`. (Only true if the output encoding is UTF-8.)",4,[[["self"]],["bool"]]],[11,"is_ascii_compatible","","Checks whether the bytes 0x00...0x7F map exclusively to the characters U+0000...U+007F and vice versa.",4,[[["self"]],["bool"]]],[11,"output_encoding","","Returns the output encoding of this encoding. This is UTF-8 for UTF-16BE, UTF-16LE and replacement and the encoding itself otherwise.",4,[[["self"]],["encoding"]]],[11,"decode","","Decode complete input to `Cow<'a, str>` with BOM sniffing and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,N],[11,"decode_with_bom_removal","","Decode complete input to `Cow<'a, str>` with BOM removal and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,N],[11,"decode_without_bom_handling","","Decode complete input to `Cow<'a, str>` without BOM handling and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,N],[11,"decode_without_bom_handling_and_without_replacement","","Decode complete input to `Cow<'a, str>` without BOM handling and with malformed sequences treated as fatal when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,N],[11,"encode","","Encode complete input to `Cow<'a, [u8]>` with unmappable characters replaced with decimal numeric character references when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,N],[11,"new_decoder","","Instantiates a new decoder for this encoding with BOM sniffing enabled.",4,[[["self"]],["decoder"]]],[11,"new_decoder_with_bom_removal","","Instantiates a new decoder for this encoding with BOM removal.",4,[[["self"]],["decoder"]]],[11,"new_decoder_without_bom_handling","","Instantiates a new decoder for this encoding with BOM handling disabled.",4,[[["self"]],["decoder"]]],[11,"new_encoder","","Instantiates a new encoder for the output encoding of this encoding.",4,[[["self"]],["encoder"]]],[11,"utf8_valid_up_to","","Validates UTF-8.",4,N],[11,"ascii_valid_up_to","","Validates ASCII.",4,N],[11,"iso_2022_jp_ascii_valid_up_to","","Validates ISO-2022-JP ASCII-state data.",4,N],[11,"eq","","",4,[[["self"],["encoding"]],["bool"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["coderresult"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["decoderresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["decoderresult"]],["bool"]]],[11,"encoding","","The `Encoding` this `Decoder` is for.",5,[[["self"]],["encoding"]]],[11,"max_utf8_buffer_length","","Query the worst-case UTF-8 output size with replacement.",5,[[["self"],["usize"]],["option",["usize"]]]],[11,"max_utf8_buffer_length_without_replacement","","Query the worst-case UTF-8 output size without replacement.",5,[[["self"],["usize"]],["option",["usize"]]]],[11,"decode_to_utf8","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER.",5,N],[11,"decode_to_str","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER with type system signaling of UTF-8 validity.",5,N],[11,"decode_to_string","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER using a `String` receiver.",5,N],[11,"decode_to_utf8_without_replacement","","Incrementally decode a byte stream into UTF-8 without replacement.",5,N],[11,"decode_to_str_without_replacement","","Incrementally decode a byte stream into UTF-8 with type system signaling of UTF-8 validity.",5,N],[11,"decode_to_string_without_replacement","","Incrementally decode a byte stream into UTF-8 using a `String` receiver.",5,N],[11,"max_utf16_buffer_length","","Query the worst-case UTF-16 output size (with or without replacement).",5,[[["self"],["usize"]],["option",["usize"]]]],[11,"decode_to_utf16","","Incrementally decode a byte stream into UTF-16 with malformed sequences replaced with the REPLACEMENT CHARACTER.",5,N],[11,"decode_to_utf16_without_replacement","","Incrementally decode a byte stream into UTF-16 without replacement.",5,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["encoderresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["encoderresult"]],["bool"]]],[11,"encoding","","The `Encoding` this `Encoder` is for.",6,[[["self"]],["encoding"]]],[11,"has_pending_state","","Returns `true` if this is an ISO-2022-JP encoder that's not in the ASCII state and `false` otherwise.",6,[[["self"]],["bool"]]],[11,"max_buffer_length_from_utf8_if_no_unmappables","","Query the worst-case output size when encoding from UTF-8 with replacement.",6,[[["self"],["usize"]],["option",["usize"]]]],[11,"max_buffer_length_from_utf8_without_replacement","","Query the worst-case output size when encoding from UTF-8 without replacement.",6,[[["self"],["usize"]],["option",["usize"]]]],[11,"encode_from_utf8","","Incrementally encode into byte stream from UTF-8 with unmappable characters replaced with HTML (decimal) numeric character references.",6,N],[11,"encode_from_utf8_to_vec","","Incrementally encode into byte stream from UTF-8 with unmappable characters replaced with HTML (decimal) numeric character references.",6,N],[11,"encode_from_utf8_without_replacement","","Incrementally encode into byte stream from UTF-8 without replacement.",6,N],[11,"encode_from_utf8_to_vec_without_replacement","","Incrementally encode into byte stream from UTF-8 without replacement.",6,N],[11,"max_buffer_length_from_utf16_if_no_unmappables","","Query the worst-case output size when encoding from UTF-16 with replacement.",6,[[["self"],["usize"]],["option",["usize"]]]],[11,"max_buffer_length_from_utf16_without_replacement","","Query the worst-case output size when encoding from UTF-16 without replacement.",6,[[["self"],["usize"]],["option",["usize"]]]],[11,"encode_from_utf16","","Incrementally encode into byte stream from UTF-16 with unmappable characters replaced with HTML (decimal) numeric character references.",6,N],[11,"encode_from_utf16_without_replacement","","Incrementally encode into byte stream from UTF-16 without replacement.",6,N]],"paths":[[4,"CoderResult"],[4,"DecoderResult"],[4,"EncoderResult"],[4,"Latin1Bidi"],[3,"Encoding"],[3,"Decoder"],[3,"Encoder"]]};
searchIndex["env_proxy"]={"doc":"Determine proxy parameters for a URL from the environment.","items":[[3,"ProxyUrl","env_proxy","A wrapper for the proxy URL retrieved from the environment.",N,N],[5,"for_url","","Determine proxy parameters for a URL by examining the environment variables.",N,[[["url"]],["proxyurl"]]],[5,"for_url_str","","Determine proxy parameters for a URL given as a string.",N,[[["s"]],["proxyurl"]]],[11,"raw_value","","Return the raw value of the proxy URL.",0,[[["self"]],["option",["string"]]]],[11,"is_none","","Return `true` if the `None` value is wrapped.",0,[[["self"]],["bool"]]],[11,"with_default_port","","Set the default port to use when transforming the raw URL value if the port isn't specified in the URL.",0,[[["self"],["u16"]],["self"]]],[11,"with_no_default_port","","Don't use the default port value when transforming the raw URL.",0,[[["self"]],["self"]]],[11,"to_url","","Transform the raw proxy URL into a `Url`.",0,[[["self"]],["option",["url"]]]],[11,"host_port","","Return the (host, port) tuple of the proxy.",0,[[["self"]],["option"]]],[11,"to_string","","Return the string representation of the proxy URL.",0,[[["self"]],["option",["string"]]]]],"paths":[[3,"ProxyUrl"]]};
searchIndex["error_chain"]={"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",N,N],[3,"Iter","","Iterator over the error chain using the `Error::cause()` method.",N,N],[3,"DisplayChain","","A struct which formats an error for output.",N,N],[0,"example_generated","","These modules show an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",N,N],[3,"Error","error_chain::example_generated","The Error type.",N,N],[12,"0","","The kind of the error.",0,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",1,N],[13,"Inner","","Link to another `ErrorChain`.",1,N],[13,"Io","","Link to a `std::error::Error` type.",1,N],[13,"Custom","","A custom error kind.",1,N],[0,"inner","","Another code generated by the macro.",N,N],[3,"Error","error_chain::example_generated::inner","The Error type.",N,N],[12,"0","","The kind of the error.",2,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",3,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",4,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","",2,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",2,N],[11,"with_chain","","",2,[[["e"],["k"]],["self"]]],[11,"kind","","",2,N],[11,"iter","","",2,[[["self"]],["iter"]]],[11,"chain_err","","",2,[[["self"],["f"]],["self"]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",2,[[["error"]],["option",["arc"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",2,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",2,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",2,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",2,[[["self"],["f"]],["error"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["errorkind"]],["self"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"deref","","",2,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",3,[[["self"]],["str"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["string"]],["self"]]],[11,"from","","",3,[[["error"]],["self"]]],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",0,N],[11,"with_chain","","",0,[[["e"],["k"]],["self"]]],[11,"kind","","",0,N],[11,"iter","","",0,[[["self"]],["iter"]]],[11,"chain_err","","",0,[[["self"],["f"]],["self"]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",0,[[["error"]],["option",["arc"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",0,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",0,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[["self"],["f"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["errorkind"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"deref","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",1,[[["self"]],["str"]]],[11,"from","","",1,[[["errorkind"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",N,N],[10,"code","","Returns the value to use as the exit status.",6,[[["self"]],["i32"]]],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",N,N],[16,"ErrorKind","","Associated kind type.",7,N],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",7,N],[10,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",7,[[["e"],["k"]],["self"]]],[10,"kind","","Returns the kind of the error.",7,N],[10,"iter","","Iterates over the error chain.",7,[[["self"]],["iter"]]],[10,"backtrace","","Returns the backtrace associated with this error.",7,[[["self"]],["option",["backtrace"]]]],[11,"display_chain","","Returns an object which implements `Display` for printing the full context of this error.",7,[[["self"]],["displaychain"]]],[10,"chain_err","","Extends the error chain with a new entry.",7,[[["self"],["f"]],["self"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new iterator over the error chain using `Error::cause()`.",8,[[["option",["error"]]],["iter"]]],[11,"next","","",8,[[["self"]],["option",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[14,"error_chain","","Macro for generating error types and traits. See crate level documentation for details.",N,N],[14,"quick_main","","Convenient wrapper to be able to use `?` and such in the main. You can use it with a separated function:",N,N],[14,"bail","","Exits a function early with an error",N,N],[14,"ensure","","Exits a function early with an error if the condition is not satisfied",N,N],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",10,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",10,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",10,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",10,N],[11,"clone","","",10,[[["self"]],["backtrace"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",10,[[],["backtrace"]]],[11,"from","","",10,[[["vec",["backtraceframe"]]],["backtrace"]]],[11,"into","","",10,[[["self"]],["vec",["backtraceframe"]]]]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ResultExt"],[8,"ExitCode"],[8,"ChainedError"],[3,"Iter"],[3,"DisplayChain"],[3,"Backtrace"]]};
searchIndex["foreign_types"]={"doc":"A framework for Rust wrappers over C APIs.","items":[[3,"Opaque","foreign_types","An opaque type used to define `ForeignTypeRef` types.",N,N],[8,"ForeignType","","A type implemented by wrappers over foreign types.",N,N],[16,"CType","","The raw C type.",0,N],[16,"Ref","","The type representing a reference to this type.",0,N],[10,"from_ptr","","Constructs an instance of this type from its raw type.",0,N],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",0,N],[8,"ForeignTypeRef","","A trait implemented by types which reference borrowed foreign types.",N,N],[16,"CType","","The raw C type.",1,N],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",1,N],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",1,N],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",1,N],[14,"foreign_type","","A macro to easily define wrappers for foreign types.",N,N]],"paths":[[8,"ForeignType"],[8,"ForeignTypeRef"]]};
searchIndex["foreign_types_shared"]={"doc":"Internal crate used by foreign-types","items":[[3,"Opaque","foreign_types_shared","An opaque type used to define `ForeignTypeRef` types.",N,N],[8,"ForeignType","","A type implemented by wrappers over foreign types.",N,N],[16,"CType","","The raw C type.",0,N],[16,"Ref","","The type representing a reference to this type.",0,N],[10,"from_ptr","","Constructs an instance of this type from its raw type.",0,N],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",0,N],[8,"ForeignTypeRef","","A trait implemented by types which reference borrowed foreign types.",N,N],[16,"CType","","The raw C type.",1,N],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",1,N],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",1,N],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",1,N]],"paths":[[8,"ForeignType"],[8,"ForeignTypeRef"]]};
searchIndex["futures"]={"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",0,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,N],[11,"clone","","",0,[[["self"]],["async"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["async"]],["bool"]]],[11,"ne","","",0,[[["self"],["async"]],["bool"]]],[11,"map","","Change the success value of this `Async` with the closure provided",0,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",0,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["async"]]],[11,"clone","","",1,[[["self"]],["asyncsink"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,[[["self"]],["bool"]]],[0,"future","","Futures",N,N],[3,"Empty","futures::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",2,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",3,N],[13,"B","","Second branch of the type",3,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["futureresult"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"from","","",8,[[["result"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"poll","","",11,[[["self"]],["poll"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","","",12,[[["self"]],["poll",["option"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",13,[[["self"]],["bool"]]],[11,"poll","","",13,[[["self"]],["poll"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"poll","","",14,[[["self"]],["poll",["option"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","","",15,[[["self"]],["poll"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["self"]],["poll"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"poll","","",18,[[["self"]],["poll"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"poll","","",19,[[["self"]],["poll"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"poll","","",21,[[["self"]],["poll"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"poll","","",22,[[["self"]],["poll"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"poll","","",23,[[["self"]],["poll"]]],[11,"poll","","",24,[[["self"]],["poll"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"poll","","",25,[[["self"]],["poll"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"poll","","",26,[[["self"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"poll","","",27,[[["self"]],["poll"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"poll","","",28,[[["self"]],["poll"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"poll","","",29,[[["self"]],["poll"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"poll","","",30,[[["self"]],["poll"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"poll","","",31,[[["self"]],["poll"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,[[["self"]],["option",["result"]]]],[11,"poll","","",32,[[["self"]],["poll"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"drop","","",32,[[["self"]]]],[11,"clone","","",33,[[["self"]],["shareditem"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"deref","","",33,[[["self"]],["t"]]],[11,"clone","","",34,[[["self"]],["sharederror"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"deref","","",34,[[["self"]],["e"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"description","","",34,[[["self"]],["str"]]],[11,"cause","","",34,[[["self"]],["option",["error"]]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,[[["self"]],["poll"]]],[11,"wait","","Block the current thread until this future is resolved.",35,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",35,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",35,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",35,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",35,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",35,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",36,N],[16,"Item","","The item that the future may resolve with.",36,N],[16,"Error","","The error that the future may resolve with.",36,N],[10,"into_future","","Consumes this object and produces a future.",36,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",37,N],[16,"Error","","Possible errors during conversion.",37,N],[10,"future_from","","Consume the given value, beginning the conversion.",37,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["executeerrorkind"]]],[11,"eq","","",4,[[["self"],["executeerrorkind"]],["bool"]]],[11,"new","","Create a new `ExecuteError`",39,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",39,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,[[["self"]],["f"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[0,"stream","futures","Asynchronous streams",N,N],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",40,N],[12,"1","","",40,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",41,N],[13,"Second","","An item from the second stream",41,N],[13,"Both","","Items from both streams",41,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"poll","","",42,[[["self"]],["poll",["option"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"poll","","",43,[[["self"]],["poll",["option"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"poll","","",44,[[["self"]],["poll",["option"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"poll","","",45,[[["self"]],["poll",["option"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["s"]]],[11,"start_send","","",46,N],[11,"poll_complete","","",46,[[["self"]],["poll"]]],[11,"close","","",46,[[["self"]],["poll"]]],[11,"poll","","",46,[[["self"]],["poll",["option"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"poll","","",47,[[["self"]],["poll",["option"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",48,[[["self"]],["poll"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",49,[[["self"]],["poll"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"poll","","",50,[[["self"]],["poll",["option"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["s"]]],[11,"start_send","","",51,N],[11,"poll_complete","","",51,[[["self"]],["poll"]]],[11,"close","","",51,[[["self"]],["poll"]]],[11,"poll","","",51,[[["self"]],["poll",["option"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,[[["self"]],["s"]]],[11,"start_send","","",52,N],[11,"poll_complete","","",52,[[["self"]],["poll"]]],[11,"close","","",52,[[["self"]],["poll"]]],[11,"poll","","",52,[[["self"]],["poll",["option"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,[[["self"]],["s"]]],[11,"start_send","","",53,N],[11,"poll_complete","","",53,[[["self"]],["poll"]]],[11,"close","","",53,[[["self"]],["poll"]]],[11,"poll","","",53,[[["self"]],["poll",["option"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"poll","","",54,[[["self"]],["poll"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"poll","","",55,[[["self"]],["poll"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,[[["self"]],["s"]]],[11,"poll","","",56,[[["self"]],["poll",["option"]]]],[11,"start_send","","",56,N],[11,"poll_complete","","",56,[[["self"]],["poll"]]],[11,"close","","",56,[[["self"]],["poll"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",57,N],[11,"poll_complete","","",57,[[["self"]],["poll"]]],[11,"close","","",57,[[["self"]],["poll"]]],[11,"poll","","",57,[[["self"]],["poll",["option"]]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,[[["self"]],["s"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,[[["self"]],["option"]]],[11,"poll","","",58,[[["self"]],["poll"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,[[["self"]],["s"]]],[11,"start_send","","",59,N],[11,"poll_complete","","",59,[[["self"]],["poll"]]],[11,"close","","",59,[[["self"]],["poll"]]],[11,"poll","","",59,[[["self"]],["poll",["option"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,[[["self"]],["s"]]],[11,"start_send","","",60,N],[11,"poll_complete","","",60,[[["self"]],["poll"]]],[11,"close","","",60,[[["self"]],["poll"]]],[11,"poll","","",60,[[["self"]],["poll",["option"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,[[["self"]],["s"]]],[11,"start_send","","",61,N],[11,"poll_complete","","",61,[[["self"]],["poll"]]],[11,"close","","",61,[[["self"]],["poll"]]],[11,"poll","","",61,[[["self"]],["poll",["option"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,[[["self"]],["s"]]],[11,"start_send","","",62,N],[11,"poll_complete","","",62,[[["self"]],["poll"]]],[11,"close","","",62,[[["self"]],["poll"]]],[11,"poll","","",62,[[["self"]],["poll",["option"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"poll","","",63,[[["self"]],["poll",["option"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"poll","","",64,[[["self"]],["poll",["option"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",65,N],[11,"poll_complete","","",65,[[["self"]],["poll"]]],[11,"close","","",65,[[["self"]],["poll"]]],[11,"poll","","",65,[[["self"]],["poll",["option"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",66,N],[11,"poll_complete","","",66,[[["self"]],["poll"]]],[11,"close","","",66,[[["self"]],["poll"]]],[11,"poll","","",66,[[["self"]],["poll",["option"]]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,[[["self"]],["poll",["option"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"poll","","",67,[[["self"]],["poll",["option"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"poll","","",68,[[["self"]],["poll",["option"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,[[["self"]],["s"]]],[11,"start_send","","",69,N],[11,"poll_complete","","",69,[[["self"]],["poll"]]],[11,"close","","",69,[[["self"]],["poll"]]],[11,"poll","","",69,[[["self"]],["poll",["option"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,[[["self"]],["s"]]],[11,"start_send","","",70,N],[11,"poll_complete","","",70,[[["self"]],["poll"]]],[11,"close","","",70,[[["self"]],["poll"]]],[11,"poll","","",70,[[["self"]],["poll",["option"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,[[["self"]],["s"]]],[11,"start_send","","",71,N],[11,"poll_complete","","",71,[[["self"]],["poll"]]],[11,"close","","",71,[[["self"]],["poll"]]],[11,"poll","","",71,[[["self"]],["poll",["option"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,[[["self"]],["s"]]],[11,"start_send","","",72,N],[11,"poll_complete","","",72,[[["self"]],["poll"]]],[11,"close","","",72,[[["self"]],["poll"]]],[11,"poll","","",72,[[["self"]],["poll",["option"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",73,N],[11,"poll_complete","","",73,[[["self"]],["poll"]]],[11,"close","","",73,[[["self"]],["poll"]]],[11,"poll","","",73,[[["self"]],["poll",["option"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"poll","","",74,[[["self"]],["poll",["option"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"poll","","",75,[[["self"]],["poll",["option"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"poll","","",76,[[["self"]],["poll"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,[[["self"]],["s"]]],[11,"start_send","","",77,N],[11,"poll_complete","","",77,[[["self"]],["poll"]]],[11,"close","","",77,[[["self"]],["poll"]]],[11,"poll","","",77,[[["self"]],["poll",["option"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,[[["self"]],["s"]]],[11,"poll","","",78,[[["self"]],["poll",["option"]]]],[11,"start_send","","",78,N],[11,"poll_complete","","",78,[[["self"]],["poll"]]],[11,"close","","",78,[[["self"]],["poll"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"poll","","",79,[[["self"]],["poll",["option"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["poll"]]],[11,"close","","",80,[[["self"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,[[["self"]],["s"]]],[11,"poll","","",80,[[["self"]],["poll",["option"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"poll","","",81,[[["self"]],["poll",["vec"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,[[["self"]],["s"]]],[11,"next","","",82,[[["self"]],["option"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"poll","","",83,[[["self"]],["poll",["option"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["poll"]]],[11,"close","","",84,[[["self"]],["poll"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"description","","",40,[[["self"]],["str"]]],[0,"futures_unordered","","An unbounded set of futures.",N,N],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",85,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",85,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",85,[[["self"],["t"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,[[["self"]],["itermut"]]],[11,"poll","","",85,[[["self"]],["poll",["option"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"drop","","",85,[[["self"]]]],[11,"from_iter","","",85,[[["t"]],["self"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"size_hint","","",86,N],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",87,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",87,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",87,[[["self"],["t"]]]],[11,"poll","","",87,[[["self"]],["poll",["option"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",87,[[["t"]],["self"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",88,N],[16,"Error","","The type of error this stream may generate.",88,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,[[["self"]],["poll",["option"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",88,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",88,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",88,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",88,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspecterr"]]],[0,"sink","futures","Asynchronous sinks",N,N],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[11,"clone","","",89,[[["self"]],["with"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"poll","","",89,[[["self"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",89,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,[[["self"]],["s"]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["poll"]]],[11,"close","","",89,[[["self"]],["poll"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",90,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,[[["self"]],["s"]]],[11,"poll","","",90,[[["self"]],["poll",["option"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["poll"]]],[11,"close","","",90,[[["self"]],["poll"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",91,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",91,[[["self"]],["s"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,[[["self"]],["s"]]],[11,"poll","","",91,[[["self"]],["poll"]]],[11,"clone","","",92,[[["self"]],["sinkfromerr"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",92,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,[[["self"]],["s"]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["poll"]]],[11,"close","","",92,[[["self"]],["poll"]]],[11,"poll","","",92,[[["self"]],["poll",["option"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",93,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",93,[[["self"]],["s"]]],[11,"poll","","",93,[[["self"]],["poll"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"poll","","",94,[[["self"]],["poll"]]],[11,"clone","","",95,[[["self"]],["sinkmaperr"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",95,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,[[["self"]],["s"]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["poll"]]],[11,"close","","",95,[[["self"]],["poll"]]],[11,"poll","","",95,[[["self"]],["poll",["option"]]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,N],[11,"fmt","","",96,[[["self"],["formatter"]],["fmtresult"]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["poll"]]],[11,"close","","",96,[[["self"]],["poll"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",97,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,[[["self"]],["s"]]],[11,"poll","","",97,[[["self"]],["poll",["option"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["poll"]]],[11,"close","","",97,[[["self"]],["poll"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,N],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,[[["self"]],["result"]]],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,[[["self"]],["result"]]],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",99,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,N],[10,"start_send","","Begin the process of sending a value to the sink.",99,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,[[["self"]],["poll"]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,[[["self"]],["poll"]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",99,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",99,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",99,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",99,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,[[["self"],["s"]],["sendall"]]],[0,"task","futures","Tasks used to drive a future computation",N,N],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[5,"init","","Initialize the `futures` task system.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",100,[[["self"],["usize"]]]],[0,"executor","futures","Executors",N,N],[3,"Run","futures::executor","Units of work submitted to an `Executor`, currently only created internally.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",N,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",N,[[["t"],["usize"],["f"]],["r"]]],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",101,[[["self"]]]],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",102,[[["self"],["run"]]]],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",103,[[["self"],["usize"]]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,[[["self"],["usize"]]]],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",N,N],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",104,[[["self"]],["notifyhandle"]]],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",104,[[["self"]]]],[0,"sync","futures","Future-aware synchronization",N,N],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",N,N],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",N,N],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",N,N],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",N,N],[0,"oneshot","","A one-shot, futures-aware channel",N,N],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",106,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",106,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",106,[[["self"]],["bool"]]],[11,"drop","","",106,[[["self"]]]],[11,"clone","","",107,[[["self"]],["canceled"]]],[11,"eq","","",107,[[["self"],["canceled"]],["bool"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"description","","",107,[[["self"]],["str"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",105,[[["self"]]]],[11,"poll","","",105,[[["self"]],["poll",["canceled"]]]],[11,"drop","","",105,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",108,[[["self"]]]],[11,"poll","","",108,[[["self"]],["poll"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"drop","","",108,[[["self"]]]],[11,"poll","","",109,[[["self"]],["poll"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"drop","","",109,[[["self"]]]],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",N,N],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",N,N],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"TrySendError","","Error type returned from `try_send`",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"clone","","",114,[[["self"]],["senderror"]]],[11,"eq","","",114,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",114,[[["self"],["senderror"]],["bool"]]],[11,"clone","","",115,[[["self"]],["trysenderror"]]],[11,"eq","","",115,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",115,[[["self"],["trysenderror"]],["bool"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"description","","",114,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",114,[[["self"]],["t"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"description","","",115,[[["self"]],["str"]]],[11,"is_full","","Returns true if this error is a result of the channel being full",115,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",115,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",115,[[["self"]],["t"]]],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",110,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",110,[[["self"]],["poll",["senderror"]]]],[11,"start_send","","",110,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",110,[[["self"]],["poll",["senderror"]]]],[11,"close","","",110,[[["self"]],["poll",["senderror"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",111,[[["self"],["t"]],["result",["senderror"]]]],[11,"start_send","","",111,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",111,[[["self"]],["poll",["senderror"]]]],[11,"close","","",111,[[["self"]],["poll",["senderror"]]]],[11,"clone","","",111,[[["self"]],["unboundedsender"]]],[11,"clone","","",110,[[["self"]],["sender"]]],[11,"drop","","",110,[[["self"]]]],[11,"close","","Closes the receiving half",112,[[["self"]]]],[11,"poll","","",112,[[["self"]],["poll",["option"]]]],[11,"drop","","",112,[[["self"]]]],[11,"close","","Closes the receiving half",113,[[["self"]]]],[11,"poll","","",113,[[["self"]],["poll",["option"]]]],[11,"poll","","",116,[[["self"]],["poll",["option"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"poll","","",117,[[["self"]],["poll"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync","",118,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `BiLock` protecting the provided data.",118,N],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",118,[[["self"]],["async",["bilockguard"]]]],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",118,[[["self"]],["bilockacquire"]]],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",118,[[["self"],["self"]],["result",["reuniteerror"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"deref","","",119,[[["self"]],["t"]]],[11,"deref_mut","","",119,[[["self"]],["t"]]],[11,"drop","","",119,[[["self"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"poll","","",120,[[["self"]],["poll",["bilockacquired"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",121,[[["self"]],["bilock"]]],[11,"deref","","",121,[[["self"]],["t"]]],[11,"deref_mut","","",121,[[["self"]],["t"]]],[11,"drop","","",121,[[["self"]]]],[0,"unsync","futures","Future-aware single-threaded synchronization",N,N],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",N,N],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",N,N],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["self"]]],[11,"start_send","","",122,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",122,[[["self"]],["poll",["senderror"]]]],[11,"close","","",122,[[["self"]],["poll",["senderror"]]]],[11,"drop","","",122,[[["self"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",123,[[["self"]]]],[11,"poll","","",123,[[["self"]],["poll",["option"]]]],[11,"drop","","",123,[[["self"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"clone","","",124,[[["self"]],["self"]]],[11,"start_send","","",124,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",124,[[["self"]],["poll",["senderror"]]]],[11,"close","","",124,[[["self"]],["poll",["senderror"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",124,[[["self"],["t"]],["result",["senderror"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",125,[[["self"]]]],[11,"poll","","",125,[[["self"]],["poll",["option"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"description","","",126,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",126,[[["self"]],["t"]]],[11,"poll","","",127,[[["self"]],["poll",["option"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"poll","","",128,[[["self"]],["poll"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",N,N],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",129,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",129,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",129,[[["self"]],["bool"]]],[11,"drop","","",129,[[["self"]]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",130,[[["self"]]]],[11,"poll","","",130,[[["self"]],["poll"]]],[11,"drop","","",130,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",131,[[["self"]]]],[11,"poll","","",131,[[["self"]],["poll"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"poll","","",132,[[["self"]],["poll"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",N,N],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`",N,N],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",133,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",133,[[["self"]]]],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",133,[[["self"],["task"]]]],[11,"notify","","Notifies the task that last called `register`.",133,[[["self"]]]],[11,"default","","",133,[[],["self"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",134,[[["self"],["f"]],["r"]]],[11,"poll_future","futures::executor","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",135,[[["self"],["arc",["unpark"]]],["poll"]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",135,[[["self"]],["result"]]],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",135,[[["self"],["arc",["executor"]]]]],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",135,[[["self"],["arc",["unpark"]]],["poll",["option"]]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",135,[[["self"]],["option",["result"]]]],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",135,N],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",135,[[["self"],["arc"]],["poll"]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",135,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",135,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",135,[[["self"]],["result"]]],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",136,[[["self"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"clone","futures::task","",137,[[["self"]],["unparkevent"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",137,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"from","futures::executor","",138,[[["arc"]],["notifyhandle"]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,[[["self"],["usize"]]]],[11,"clone","futures::task","",139,[[["self"]],["task"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",139,[[["self"]]]],[11,"is_current","","Returns `true` when called from within the context of the task.",139,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",139,[[["self"]],["bool"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",135,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",135,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",135,[[["self"]],["t"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",135,[[["self"],["n"],["usize"]],["poll"]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",135,[[["self"],["n"],["usize"]],["poll",["option"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",135,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",135,[[["self"],["n"],["usize"]],["poll"]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",135,[[["self"],["n"],["usize"]],["poll"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a new `NotifyHandle` directly.",138,N],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",138,[[["self"],["usize"]]]],[11,"clone","","",138,[[["self"]],["self"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"drop","","",138,[[["self"]]]],[11,"from","","",138,[[["t"]],["notifyhandle"]]]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["futures_cpupool"]={"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",N,N],[3,"Builder","","Thread pool configuration object",N,N],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,[[["usize"]],["cpupool"]]],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,[[],["cpupool"]]],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,[[["self"],["f"]],["cpufuture"]]],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,[[["self"],["f"]],["cpufuture"]]],[11,"execute","","",0,[[["self"],["f"]],["result",["executeerror"]]]],[11,"clone","","",0,[[["self"]],["cpupool"]]],[11,"drop","","",0,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",2,[[["self"]]]],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",1,[[],["builder"]]],[11,"pool_size","","Set size of a future CpuPool",1,[[["self"],["usize"]],["self"]]],[11,"stack_size","","Set stack size of threads in the pool.",1,[[["self"],["usize"]],["self"]]],[11,"name_prefix","","Set thread name prefix of a future CpuPool",1,[[["self"],["s"]],["self"]]],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",1,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute function `f` before each worker thread stops.",1,[[["self"],["f"]],["self"]]],[11,"create","","Create CpuPool with configured parameters",1,[[["self"]],["cpupool"]]]],"paths":[[3,"CpuPool"],[3,"Builder"],[3,"CpuFuture"]]};
searchIndex["httparse"]={"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",N,N],[3,"Request","","A parsed Request.",N,N],[12,"method","","The request method, such as `GET`.",0,N],[12,"path","","The request path, such as `/about-us`.",0,N],[12,"version","","The request version, such as `HTTP/1.1`.",0,N],[12,"headers","","The request headers.",0,N],[3,"Response","","A parsed Response.",N,N],[12,"version","","The response version, such as `HTTP/1.1`.",1,N],[12,"code","","The response code, such as `200`.",1,N],[12,"reason","","The response reason-phrase, such as `OK`.",1,N],[12,"headers","","The response headers.",1,N],[3,"Header","","Represents a parsed header.",N,N],[12,"name","","The name portion of a header.",2,N],[12,"value","","The value portion of a header.",2,N],[4,"Error","","An error in parsing.",N,N],[13,"HeaderName","","Invalid byte in header name.",3,N],[13,"HeaderValue","","Invalid byte in header value.",3,N],[13,"NewLine","","Invalid byte in new line.",3,N],[13,"Status","","Invalid byte in Response status.",3,N],[13,"Token","","Invalid byte where token is required.",3,N],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,N],[13,"Version","","Invalid byte in HTTP version.",3,N],[4,"Status","","The result of a successful parse pass.",N,N],[13,"Complete","","The completed result.",4,N],[13,"Partial","","A partial result.",4,N],[5,"parse_headers","","Parse a buffer of bytes as headers.",N,N],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",N,N],[6,"Result","","A Result of any parsing action.",N,N],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",N,N],[11,"clone","","",3,[[["self"]],["error"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["invalidchunksize"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["status"]]],[11,"eq","","",4,[[["self"],["status"]],["bool"]]],[11,"ne","","",4,[[["self"],["status"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"is_complete","","Convenience method to check if status is complete.",4,[[["self"]],["bool"]]],[11,"is_partial","","Convenience method to check if status is partial.",4,[[["self"]],["bool"]]],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["request"]],["bool"]]],[11,"ne","","",0,[[["self"],["request"]],["bool"]]],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,N],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["response"]],["bool"]]],[11,"ne","","",1,[[["self"],["response"]],["bool"]]],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,N],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,N],[11,"clone","","",2,[[["self"]],["header"]]],[11,"eq","","",2,[[["self"],["header"]],["bool"]]],[11,"ne","","",2,[[["self"],["header"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"]={"doc":"Hyper","items":[[3,"Uri","hyper","The Request-URI of a Request's StartLine.",N,N],[3,"Body","","A `Stream` for `Chunk`s used in requests and responses.",N,N],[3,"Chunk","","A piece of a message body.",N,N],[3,"Request","","An HTTP Request",N,N],[3,"Response","","An HTTP Response",N,N],[4,"Method","","The Request Method (VERB)",N,N],[13,"Options","","OPTIONS",0,N],[13,"Get","","GET",0,N],[13,"Post","","POST",0,N],[13,"Put","","PUT",0,N],[13,"Delete","","DELETE",0,N],[13,"Head","","HEAD",0,N],[13,"Trace","","TRACE",0,N],[13,"Connect","","CONNECT",0,N],[13,"Patch","","PATCH",0,N],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",0,N],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",1,N],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",1,N],[13,"Processing","","102 Processing [RFC2518]",1,N],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",1,N],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",1,N],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",1,N],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",1,N],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",1,N],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",1,N],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",1,N],[13,"MultiStatus","","207 Multi-Status [RFC4918]",1,N],[13,"AlreadyReported","","208 Already Reported [RFC5842]",1,N],[13,"ImUsed","","226 IM Used [RFC3229]",1,N],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",1,N],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",1,N],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",1,N],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",1,N],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",1,N],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",1,N],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",1,N],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",1,N],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",1,N],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",1,N],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",1,N],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",1,N],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",1,N],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",1,N],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",1,N],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",1,N],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",1,N],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",1,N],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",1,N],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",1,N],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",1,N],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",1,N],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",1,N],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",1,N],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",1,N],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",1,N],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",1,N],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",1,N],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",1,N],[13,"Locked","","423 Locked [RFC4918]",1,N],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",1,N],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",1,N],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",1,N],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",1,N],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",1,N],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",1,N],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",1,N],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",1,N],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",1,N],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",1,N],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",1,N],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",1,N],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",1,N],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",1,N],[13,"LoopDetected","","508 Loop Detected [RFC5842]",1,N],[13,"NotExtended","","510 Not Extended [RFC2774]",1,N],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",1,N],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",1,N],[4,"HttpVersion","","Represents a version of the HTTP spec.",N,N],[13,"Http09","","`HTTP/0.9`",2,N],[13,"Http10","","`HTTP/1.0`",2,N],[13,"Http11","","`HTTP/1.1`",2,N],[13,"H2","","`HTTP/2.0` over TLS",2,N],[13,"H2c","","`HTTP/2.0` over cleartext",2,N],[0,"client","","HTTP Client",N,N],[8,"Service","hyper::client","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Request","","Requests handled by the service.",3,N],[16,"Response","","Responses given by the service.",3,N],[16,"Error","","Errors produced by the service.",3,N],[16,"Future","","The future response value.",3,N],[10,"call","","Process the request and return the response asynchronously.",3,N],[3,"Response","","An HTTP Response",N,N],[3,"Request","","An HTTP Request",N,N],[3,"HttpConnector","","A connector for the `http` scheme.",N,N],[3,"Client","","A Client to make outgoing HTTP requests.",N,N],[3,"FutureResponse","","A `Future` that will resolve to an HTTP Response.",N,N],[3,"Config","","Configuration for a Client",N,N],[3,"UseDefaultConnector","","Phantom type used to signal that `Config` should create a `HttpConnector`.",N,N],[0,"conn","","Lower-level client connection API.",N,N],[3,"SendRequest","hyper::client::conn","The sender side of an established connection.",N,N],[3,"Connection","","A future that processes all HTTP state for the IO object.",N,N],[3,"Builder","","A builder to configure an HTTP connection.",N,N],[3,"Handshake","","A future setting up HTTP over an IO object.",N,N],[3,"ResponseFuture","","A future returned by `SendRequest::send_request`.",N,N],[3,"Parts","","Deconstructed parts of a `Connection`.",N,N],[12,"io","","The original IO object used in the handshake.",4,N],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",4,N],[5,"handshake","","Returns a `Handshake` future over some IO.",N,[[["t"]],["handshake",["body"]]]],[11,"clone","","",5,[[["self"]],["builder"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll_ready","","Polls to determine whether this sender can be used yet for a request.",6,[[["self"]],["poll",["error"]]]],[11,"send_request","","Sends a `Request` on the associated connection.",6,[[["self"],["request"]],["responsefuture"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"into_parts","","Return the inner IO object, and additional information.",7,[[["self"]],["parts"]]],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",7,[[["self"]],["poll",["error"]]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new connection builder.",5,[[],["builder"]]],[11,"handshake","","Constructs a connection with the configured options and IO.",5,[[["self"],["t"]],["handshake"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","hyper::client","",10,[[["self"]],["httpconnector"]]],[11,"new","","Construct a new HttpConnector.",10,[[["usize"],["handle"]],["httpconnector"]]],[11,"new_with_executor","","Construct a new HttpConnector.",10,[[["e"],["handle"]],["httpconnector"]]],[11,"enforce_http","","Option to enforce all `Uri`s have the `http` scheme.",10,[[["self"],["bool"]]]],[11,"set_keepalive","","Set that all sockets have `SO_KEEPALIVE` set with the supplied duration.",10,[[["self"],["option",["duration"]]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"call","","",10,N],[8,"Connect","","A connector creates an Io to a remote address..",N,N],[16,"Output","","The connected Io Stream.",11,N],[16,"Future","","A Future that will resolve to the connected Stream.",11,N],[10,"connect","","Connect to a remote address.",11,N],[11,"new","","Create a new Client with the default config.",12,[[["handle"]],["client",["httpconnector","body"]]]],[11,"configure","","Configure a Client.",12,[[],["config",["usedefaultconnector","body"]]]],[11,"get","","Send a GET Request using this Client.",12,[[["self"],["uri"]],["futureresponse"]]],[11,"request","","Send a constructed Request using this Client.",12,[[["self"],["request"]],["futureresponse"]]],[11,"call","","",12,N],[11,"clone","","",12,[[["self"]],["client"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"poll","","",13,[[["self"]],["poll"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["usedefaultconnector"]]],[11,"default","","",15,[[],["config",["usedefaultconnector","body"]]]],[11,"body","","Set the body stream to be used by the `Client`.",15,[[["self"]],["config"]]],[11,"connector","","Set the `Connect` type to be used.",15,[[["self"],["cc"]],["config"]]],[11,"keep_alive","","Enable or disable keep-alive mechanics.",15,[[["self"],["bool"]],["config"]]],[11,"keep_alive_timeout","","Set an optional timeout for idle sockets being kept-alive.",15,[[["self"],["option",["duration"]]],["config"]]],[11,"http1_writev","","Set whether HTTP/1 connections should try to use vectored writes, or always flatten into a single buffer.",15,[[["self"],["bool"]],["config"]]],[11,"retry_canceled_requests","","Set whether to retry requests that get disrupted before ever starting to write.",15,[[["self"],["bool"]],["config"]]],[11,"set_host","","Set whether to automatically add the `Host` header to requests.",15,[[["self"],["bool"]],["config"]]],[11,"build","","Construct the Client with this configuration.",15,[[["self"],["handle"]],["client"]]],[11,"executor","","Construct a Client with this configuration and an executor.",15,[[["self"],["e"]],["client"]]],[11,"build","","Construct the Client with this configuration.",15,[[["self"],["handle"]],["client",["httpconnector"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["config"]]],[0,"error","hyper","Error and Result module.",N,N],[3,"UriError","hyper::error","An error parsing a `Uri`.",N,N],[3,"Canceled","","A pending item was dropped before ever being processed.",N,N],[4,"Error","","A set of errors that can occur parsing HTTP streams.",N,N],[13,"Method","","An invalid `Method`, such as `GE,T`.",16,N],[13,"Uri","","An invalid `Uri`, such as `exam ple.domain`.",16,N],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",16,N],[13,"Header","","An invalid `Header`.",16,N],[13,"TooLarge","","A message head is too large to be reasonable.",16,N],[13,"Incomplete","","A message reached EOF, but is not complete.",16,N],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",16,N],[13,"Timeout","","A timeout occurred waiting for an IO event.",16,N],[13,"Upgrade","","A protocol upgrade was encountered, but not yet supported in hyper.",16,N],[13,"Cancel","","A pending item was dropped before ever being processed.",16,N],[13,"Closed","","Indicates a connection is closed.",16,N],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",16,N],[13,"Utf8","","Parsing a field as string failed",16,N],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",N,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"description","","",16,[[["self"]],["str"]]],[11,"cause","","",16,[[["self"]],["option",["stderror"]]]],[11,"from","","",16,[[["urierror"]],["error"]]],[11,"from","","",16,[[["ioerror"]],["error"]]],[11,"from","","",16,[[["utf8error"]],["error"]]],[11,"from","","",16,[[["fromutf8error"]],["error"]]],[11,"from","","",16,[[["error"]],["error"]]],[11,"clone","hyper","",0,[[["self"]],["method"]]],[11,"eq","","",0,[[["self"],["method"]],["bool"]]],[11,"ne","","",0,[[["self"],["method"]],["bool"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",0,[[["self"]],["bool"]]],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",0,[[["self"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result",["method","error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["method"]]],[0,"header","","Headers container, and common header fields.",N,N],[3,"LanguageTag","hyper::header","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",18,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",18,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",18,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",18,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",18,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",18,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",18,N],[3,"EntityTag","","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",19,N],[3,"HttpDate","","A timestamp with HTTP formatting and parsing",N,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",20,N],[12,"quality","","The quality (client or server preference) for the value.",20,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",21,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",22,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",23,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",24,N],[3,"Accept","","`Accept` header, defined in RFC7231",N,N],[12,"0","","",25,N],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",26,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",27,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",28,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",29,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",30,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",31,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",32,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",33,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",34,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input. Note: A compliant client MUST always send a password (which may be the empty string).",34,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",35,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",36,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",37,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266.",N,N],[12,"disposition","","The disposition",38,N],[12,"parameters","","Disposition parameters",38,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",39,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",40,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",41,N],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",N,N],[12,"0","","",42,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",43,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",44,N],[3,"Cookie","","`Cookie` header, defined in RFC6265",N,N],[3,"CookieIter","","Iterator for cookie.",N,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",45,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",46,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",47,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",48,N],[3,"Host","","The `Host` header.",N,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",49,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",50,N],[3,"LastEventId","","`Last-Event-ID` header, defined in RFC3864",N,N],[12,"0","","",51,N],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",52,N],[3,"Link","","The `Link` header, defined in RFC5988",N,N],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",N,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[3,"Origin","","The `Origin` header.",N,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",53,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",54,N],[3,"ProxyAuthorization","","`Proxy-Authorization` header, defined in RFC7235",N,N],[12,"0","","",55,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[3,"Server","","`Server` header, defined in RFC7231",N,N],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",N,N],[12,"0","","",56,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",57,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",57,N],[3,"Te","","`TE` header, defined in RFC7230",N,N],[12,"0","","",58,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",59,N],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",60,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",61,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",61,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[3,"Warning","","`Warning` header, defined in RFC7234",N,N],[12,"code","","The 3 digit warn code.",62,N],[12,"agent","","The name or pseudonym of the server adding this header.",62,N],[12,"text","","The warning message describing the error.",62,N],[12,"date","","An optional warning date.",62,N],[3,"Raw","","A raw header value.",N,N],[3,"Formatter","","A formatter used to serialize headers to an output stream.",N,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",N,N],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",N,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",63,N],[13,"Iso_8859_1","","ISO-8859-1",63,N],[13,"Iso_8859_2","","ISO-8859-2",63,N],[13,"Iso_8859_3","","ISO-8859-3",63,N],[13,"Iso_8859_4","","ISO-8859-4",63,N],[13,"Iso_8859_5","","ISO-8859-5",63,N],[13,"Iso_8859_6","","ISO-8859-6",63,N],[13,"Iso_8859_7","","ISO-8859-7",63,N],[13,"Iso_8859_8","","ISO-8859-8",63,N],[13,"Iso_8859_9","","ISO-8859-9",63,N],[13,"Iso_8859_10","","ISO-8859-10",63,N],[13,"Shift_Jis","","Shift_JIS",63,N],[13,"Euc_Jp","","EUC-JP",63,N],[13,"Iso_2022_Kr","","ISO-2022-KR",63,N],[13,"Euc_Kr","","EUC-KR",63,N],[13,"Iso_2022_Jp","","ISO-2022-JP",63,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",63,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",63,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",63,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",63,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",63,N],[13,"Gb2312","","GB2312",63,N],[13,"Big5","","Big5",63,N],[13,"Koi8_R","","KOI8-R",63,N],[13,"Ext","","An arbitrary charset specified as a string",63,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",64,N],[13,"Brotli","","The `br` encoding.",64,N],[13,"Gzip","","The `gzip` encoding.",64,N],[13,"Deflate","","The `deflate` encoding.",64,N],[13,"Compress","","The `compress` encoding.",64,N],[13,"Identity","","The `identity` encoding.",64,N],[13,"Trailers","","The `trailers` encoding.",64,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",64,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",65,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",65,N],[13,"Unregistered","","The given range unit is not registered at IANA.",65,N],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",66,N],[13,"Null","","A hidden origin",66,N],[13,"Value","","Allow one particular origin",66,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",67,N],[13,"NoStore","","\"no-store\"",67,N],[13,"NoTransform","","\"no-transform\"",67,N],[13,"OnlyIfCached","","\"only-if-cached\"",67,N],[13,"MaxAge","","\"max-age=delta\"",67,N],[13,"MaxStale","","\"max-stale=delta\"",67,N],[13,"MinFresh","","\"min-fresh=delta\"",67,N],[13,"MustRevalidate","","\"must-revalidate\"",67,N],[13,"Public","","\"public\"",67,N],[13,"Private","","\"private\"",67,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",67,N],[13,"SMaxAge","","\"s-maxage=delta\"",67,N],[13,"Extension","","Extension directives. Optionally include an argument.",67,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",68,N],[13,"Close","","The `close` connection value.",68,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",68,N],[4,"DispositionType","","The implied disposition of the content of the HTTP body.",N,N],[13,"Inline","","Inline implies default processing",69,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",69,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",69,N],[4,"DispositionParam","","A parameter to the disposition type.",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",70,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",70,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",71,N],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",71,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",71,N],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",71,N],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",71,N],[12,"resp","","other-range-resp",71,N],[4,"Expect","hyper::header","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",72,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",73,N],[13,"Items","","Only the listed items are a match",73,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",74,N],[13,"Items","","Only the listed items are a match",74,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",75,N],[13,"Date","","The date when the client retrieved the resource",75,N],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",N,N],[13,"Alternate","","alternate.",76,N],[13,"Appendix","","appendix.",76,N],[13,"Bookmark","","bookmark.",76,N],[13,"Chapter","","chapter.",76,N],[13,"Contents","","contents.",76,N],[13,"Copyright","","copyright.",76,N],[13,"Current","","current.",76,N],[13,"DescribedBy","","describedby.",76,N],[13,"Edit","","edit.",76,N],[13,"EditMedia","","edit-media.",76,N],[13,"Enclosure","","enclosure.",76,N],[13,"First","","first.",76,N],[13,"Glossary","","glossary.",76,N],[13,"Help","","help.",76,N],[13,"Hub","","hub.",76,N],[13,"Index","","index.",76,N],[13,"Last","","last.",76,N],[13,"LatestVersion","","latest-version.",76,N],[13,"License","","license.",76,N],[13,"Next","","next.",76,N],[13,"NextArchive","","next-archive.",76,N],[13,"Payment","","payment.",76,N],[13,"Prev","","prev.",76,N],[13,"PredecessorVersion","","predecessor-version.",76,N],[13,"Previous","","previous.",76,N],[13,"PrevArchive","","prev-archive.",76,N],[13,"Related","","related.",76,N],[13,"Replies","","replies.",76,N],[13,"Section","","section.",76,N],[13,"RelationTypeSelf","","self.",76,N],[13,"Service","","service.",76,N],[13,"Start","","start.",76,N],[13,"Stylesheet","","stylesheet.",76,N],[13,"Subsection","","subsection.",76,N],[13,"SuccessorVersion","","successor-version.",76,N],[13,"Up","","up.",76,N],[13,"VersionHistory","","versionHistory.",76,N],[13,"Via","","via.",76,N],[13,"WorkingCopy","","working-copy.",76,N],[13,"WorkingCopyOf","","working-copy-of.",76,N],[13,"ExtRelType","","ext-rel-type.",76,N],[4,"MediaDesc","","A Media Descriptors Enum based on: [https://www.w3.org/TR/html401/types.html#h-6.13][url]",N,N],[13,"Screen","","screen.",77,N],[13,"Tty","","tty.",77,N],[13,"Tv","","tv.",77,N],[13,"Projection","","projection.",77,N],[13,"Handheld","","handheld.",77,N],[13,"Print","","print.",77,N],[13,"Braille","","braille.",77,N],[13,"Aural","","aural.",77,N],[13,"All","","all.",77,N],[13,"Extension","","Unrecognized media descriptor extension.",77,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",78,N],[13,"Ext","","Every value other than `no-cache`.",78,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",79,N],[13,"ReturnRepresentation","","\"return=representation\"",79,N],[13,"ReturnMinimal","","\"return=minimal\"",79,N],[13,"HandlingStrict","","\"handling=strict\"",79,N],[13,"HandlingLenient","","\"handling=lenient\"",79,N],[13,"Wait","","\"wait=delta\"",79,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",80,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,N],[13,"Last","","Get last x bytes (\"-x\")",81,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",82,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,N],[13,"SameOrigin","","`same-origin`",82,N],[13,"Origin","","`origin`",82,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,N],[13,"UnsafeUrl","","`unsafe-url`",82,N],[13,"StrictOrigin","","`strict-origin`",82,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,N],[4,"RetryAfter","","The `Retry-After` header.",N,N],[13,"Delay","","Retry after this duration has elapsed",83,N],[13,"DateTime","","Retry after the given DateTime",83,N],[4,"ProtocolName","","A protocol name used to identify a specific protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",84,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",84,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",84,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",84,N],[13,"Unregistered","","Any other protocol name not known to hyper",84,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",85,N],[13,"Items","","Only the listed items are a match",85,N],[5,"qitem","","Convenience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[5,"q","","Convenience function to create a `Quality` from a float or integer.",N,[[["t"]],["quality"]]],[11,"clone","","",21,[[["self"]],["acceptcharset"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",21,[[["self"],["acceptcharset"]],["bool"]]],[11,"deref","","",21,[[["self"]],["vec"]]],[11,"deref_mut","","",21,[[["self"]],["vec"]]],[11,"header_name","","",21,[[],["str"]]],[11,"parse_header","","",21,[[["raw"]],["result"]]],[11,"fmt_header","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["acceptencoding"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",22,[[["self"],["acceptencoding"]],["bool"]]],[11,"deref","","",22,[[["self"]],["vec"]]],[11,"deref_mut","","",22,[[["self"]],["vec"]]],[11,"header_name","","",22,[[],["str"]]],[11,"parse_header","","",22,[[["raw"]],["result"]]],[11,"fmt_header","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["acceptlanguage"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",23,[[["self"],["acceptlanguage"]],["bool"]]],[11,"deref","","",23,[[["self"]],["vec"]]],[11,"deref_mut","","",23,[[["self"]],["vec"]]],[11,"header_name","","",23,[[],["str"]]],[11,"parse_header","","",23,[[["raw"]],["result"]]],[11,"fmt_header","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["acceptranges"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",24,[[["self"],["acceptranges"]],["bool"]]],[11,"deref","","",24,[[["self"]],["vec"]]],[11,"deref_mut","","",24,[[["self"]],["vec"]]],[11,"header_name","","",24,[[],["str"]]],[11,"parse_header","","",24,[[["raw"]],["result"]]],[11,"fmt_header","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["rangeunit"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",65,[[["self"],["rangeunit"]],["bool"]]],[11,"from_str","","",65,[[["str"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["accept"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["accept"]],["bool"]]],[11,"ne","","",25,[[["self"],["accept"]],["bool"]]],[11,"deref","","",25,[[["self"]],["vec"]]],[11,"deref_mut","","",25,[[["self"]],["vec"]]],[11,"header_name","","",25,[[],["str"]]],[11,"parse_header","","",25,[[["raw"]],["result"]]],[11,"fmt_header","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"star","","A constructor to easily create `Accept: */*`.",25,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",25,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",25,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",25,[[],["accept"]]],[11,"clone","","",86,[[["self"]],["accesscontrolallowcredentials"]]],[11,"eq","","",86,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",86,[[],["str"]]],[11,"parse_header","","",86,[[["raw"]],["result",["accesscontrolallowcredentials"]]]],[11,"fmt_header","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["accesscontrolallowheaders"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",26,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"deref","","",26,[[["self"]],["vec"]]],[11,"deref_mut","","",26,[[["self"]],["vec"]]],[11,"header_name","","",26,[[],["str"]]],[11,"parse_header","","",26,[[["raw"]],["result"]]],[11,"fmt_header","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["accesscontrolallowmethods"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",27,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"deref","","",27,[[["self"]],["vec"]]],[11,"deref_mut","","",27,[[["self"]],["vec"]]],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,[[["raw"]],["result"]]],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",66,[[["self"]],["accesscontrolalloworigin"]]],[11,"eq","","",66,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",66,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",66,[[],["str"]]],[11,"parse_header","","",66,[[["raw"]],["result",["accesscontrolalloworigin"]]]],[11,"fmt_header","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["accesscontrolexposeheaders"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",28,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"deref","","",28,[[["self"]],["vec"]]],[11,"deref_mut","","",28,[[["self"]],["vec"]]],[11,"header_name","","",28,[[],["str"]]],[11,"parse_header","","",28,[[["raw"]],["result"]]],[11,"fmt_header","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["accesscontrolmaxage"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",29,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"deref","","",29,[[["self"]],["u32"]]],[11,"deref_mut","","",29,[[["self"]],["u32"]]],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,[[["raw"]],["result"]]],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["accesscontrolrequestheaders"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",30,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"deref","","",30,[[["self"]],["vec"]]],[11,"deref_mut","","",30,[[["self"]],["vec"]]],[11,"header_name","","",30,[[],["str"]]],[11,"parse_header","","",30,[[["raw"]],["result"]]],[11,"fmt_header","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["accesscontrolrequestmethod"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",31,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"deref","","",31,[[["self"]],["method"]]],[11,"deref_mut","","",31,[[["self"]],["method"]]],[11,"header_name","","",31,[[],["str"]]],[11,"parse_header","","",31,[[["raw"]],["result"]]],[11,"fmt_header","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["allow"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["allow"]],["bool"]]],[11,"ne","","",32,[[["self"],["allow"]],["bool"]]],[11,"deref","","",32,[[["self"]],["vec"]]],[11,"deref_mut","","",32,[[["self"]],["vec"]]],[11,"header_name","","",32,[[],["str"]]],[11,"parse_header","","",32,[[["raw"]],["result"]]],[11,"fmt_header","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["authorization"]]],[11,"eq","","",33,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",33,[[["self"],["authorization"]],["bool"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"deref","","",33,[[["self"]],["s"]]],[11,"deref_mut","","",33,[[["self"]],["s"]]],[11,"header_name","","",33,[[],["str"]]],[11,"parse_header","","",33,[[["raw"]],["result",["authorization"]]]],[11,"fmt_header","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["basic"]]],[11,"eq","","",34,[[["self"],["basic"]],["bool"]]],[11,"ne","","",34,[[["self"],["basic"]],["bool"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"scheme","","",34,[[],["option",["str"]]]],[11,"fmt_scheme","","",34,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",34,[[["str"]],["result",["basic"]]]],[11,"clone","","",35,[[["self"]],["bearer"]]],[11,"eq","","",35,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",35,[[["self"],["bearer"]],["bool"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"scheme","","",35,[[],["option",["str"]]]],[11,"fmt_scheme","","",35,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",35,[[["str"]],["result",["bearer"]]]],[11,"eq","","",36,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",36,[[["self"],["cachecontrol"]],["bool"]]],[11,"clone","","",36,[[["self"]],["cachecontrol"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"deref","","",36,[[["self"]],["vec"]]],[11,"deref_mut","","",36,[[["self"]],["vec"]]],[11,"header_name","","",36,[[],["str"]]],[11,"parse_header","","",36,[[["raw"]],["result",["cachecontrol"]]]],[11,"fmt_header","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",67,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",67,[[["self"],["cachedirective"]],["bool"]]],[11,"clone","","",67,[[["self"]],["cachedirective"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",67,[[["str"]],["result",["cachedirective","option"]]]],[11,"clone","","",68,[[["self"]],["connectionoption"]]],[11,"eq","","",68,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",68,[[["self"],["connectionoption"]],["bool"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",68,[[["str"]],["result",["connectionoption"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["connection"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["connection"]],["bool"]]],[11,"ne","","",37,[[["self"],["connection"]],["bool"]]],[11,"deref","","",37,[[["self"]],["vec"]]],[11,"deref_mut","","",37,[[["self"]],["vec"]]],[11,"header_name","","",37,[[],["str"]]],[11,"parse_header","","",37,[[["raw"]],["result"]]],[11,"fmt_header","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"close","","A constructor to easily create a `Connection: close` header.",37,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",37,[[],["connection"]]],[11,"clone","","",69,[[["self"]],["dispositiontype"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",69,[[["self"],["dispositiontype"]],["bool"]]],[11,"clone","","",70,[[["self"]],["dispositionparam"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"eq","","",70,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",70,[[["self"],["dispositionparam"]],["bool"]]],[11,"clone","","",38,[[["self"]],["contentdisposition"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",38,[[["self"],["contentdisposition"]],["bool"]]],[11,"header_name","","",38,[[],["str"]]],[11,"parse_header","","",38,[[["raw"]],["result",["contentdisposition"]]]],[11,"fmt_header","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["contentencoding"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",39,[[["self"],["contentencoding"]],["bool"]]],[11,"deref","","",39,[[["self"]],["vec"]]],[11,"deref_mut","","",39,[[["self"]],["vec"]]],[11,"header_name","","",39,[[],["str"]]],[11,"parse_header","","",39,[[["raw"]],["result"]]],[11,"fmt_header","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["contentlanguage"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",40,[[["self"],["contentlanguage"]],["bool"]]],[11,"deref","","",40,[[["self"]],["vec"]]],[11,"deref_mut","","",40,[[["self"]],["vec"]]],[11,"header_name","","",40,[[],["str"]]],[11,"parse_header","","",40,[[["raw"]],["result"]]],[11,"fmt_header","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["contentlength"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",41,[[["self"],["contentlength"]],["bool"]]],[11,"header_name","","",41,[[],["str"]]],[11,"parse_header","","",41,[[["raw"]],["result",["contentlength"]]]],[11,"fmt_header","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"deref","","",41,[[["self"]],["u64"]]],[11,"deref_mut","","",41,[[["self"]],["u64"]]],[11,"clone","","",42,[[["self"]],["contentlocation"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["contentlocation"]],["bool"]]],[11,"ne","","",42,[[["self"],["contentlocation"]],["bool"]]],[11,"deref","","",42,[[["self"]],["string"]]],[11,"deref_mut","","",42,[[["self"]],["string"]]],[11,"header_name","","",42,[[],["str"]]],[11,"parse_header","","",42,[[["raw"]],["result"]]],[11,"fmt_header","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["contentrange"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",43,[[["self"],["contentrange"]],["bool"]]],[11,"deref","","",43,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",43,[[["self"]],["contentrangespec"]]],[11,"header_name","","",43,[[],["str"]]],[11,"parse_header","","",43,[[["raw"]],["result"]]],[11,"fmt_header","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",71,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",71,[[["self"],["contentrangespec"]],["bool"]]],[11,"clone","","",71,[[["self"]],["contentrangespec"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",71,[[["str"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["contenttype"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",44,[[["self"],["contenttype"]],["bool"]]],[11,"deref","","",44,[[["self"]],["mime"]]],[11,"deref_mut","","",44,[[["self"]],["mime"]]],[11,"header_name","","",44,[[],["str"]]],[11,"parse_header","","",44,[[["raw"]],["result"]]],[11,"fmt_header","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",44,[[],["contenttype"]]],[11,"text","","A constructor  to easily create a `Content-Type: text/plain` header.",44,[[],["contenttype"]]],[11,"text_utf8","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",44,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html` header.",44,[[],["contenttype"]]],[11,"xml","","A constructor  to easily create a `Content-Type: text/xml` header.",44,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",44,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",44,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",44,[[],["contenttype"]]],[11,"octet_stream","","A constructor  to easily create a `Content-Type: application/octet-stream` header.",44,[[],["contenttype"]]],[11,"clone","","",87,[[["self"]],["cookie"]]],[11,"new","","Creates a new `Cookie` header.",87,[[],["cookie"]]],[11,"set","","Sets a name and value for the `Cookie`.",87,[[["self"],["k"],["v"]]]],[11,"append","","Append a name and value for the `Cookie`.",87,[[["self"],["k"],["v"]]]],[11,"get","","Get a value for the name, if it exists.",87,[[["self"],["str"]],["option",["str"]]]],[11,"iter","","Iterate cookies.",87,[[["self"]],["cookieiter"]]],[11,"header_name","","",87,[[],["str"]]],[11,"parse_header","","",87,[[["raw"]],["result",["cookie"]]]],[11,"fmt_header","","",87,[[["self"],["formatter"]],["result"]]],[11,"eq","","",87,[[["self"],["cookie"]],["bool"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"next","","",88,[[["self"]],["option"]]],[11,"clone","","",45,[[["self"]],["date"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["date"]],["bool"]]],[11,"ne","","",45,[[["self"],["date"]],["bool"]]],[11,"deref","","",45,[[["self"]],["httpdate"]]],[11,"deref_mut","","",45,[[["self"]],["httpdate"]]],[11,"header_name","","",45,[[],["str"]]],[11,"parse_header","","",45,[[["raw"]],["result"]]],[11,"fmt_header","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["etag"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["etag"]],["bool"]]],[11,"ne","","",46,[[["self"],["etag"]],["bool"]]],[11,"deref","","",46,[[["self"]],["entitytag"]]],[11,"deref_mut","","",46,[[["self"]],["entitytag"]]],[11,"header_name","","",46,[[],["str"]]],[11,"parse_header","","",46,[[["raw"]],["result"]]],[11,"fmt_header","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["expect"]]],[11,"eq","","",72,[[["self"],["expect"]],["bool"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",72,[[],["str"]]],[11,"parse_header","","",72,[[["raw"]],["result",["expect"]]]],[11,"fmt_header","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["expires"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["expires"]],["bool"]]],[11,"ne","","",47,[[["self"],["expires"]],["bool"]]],[11,"deref","","",47,[[["self"]],["httpdate"]]],[11,"deref_mut","","",47,[[["self"]],["httpdate"]]],[11,"header_name","","",47,[[],["str"]]],[11,"parse_header","","",47,[[["raw"]],["result"]]],[11,"fmt_header","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["from"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["from"]],["bool"]]],[11,"ne","","",48,[[["self"],["from"]],["bool"]]],[11,"deref","","",48,[[["self"]],["string"]]],[11,"deref_mut","","",48,[[["self"]],["string"]]],[11,"header_name","","",48,[[],["str"]]],[11,"parse_header","","",48,[[["raw"]],["result"]]],[11,"fmt_header","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["host"]]],[11,"eq","","",89,[[["self"],["host"]],["bool"]]],[11,"ne","","",89,[[["self"],["host"]],["bool"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a `Host` header, providing the hostname and optional port.",89,[[["h"],["p"]],["host"]]],[11,"hostname","","Get the hostname, such as example.domain.",89,[[["self"]],["str"]]],[11,"port","","Get the optional port number.",89,[[["self"]],["option",["u16"]]]],[11,"header_name","","",89,[[],["str"]]],[11,"parse_header","","",89,[[["raw"]],["result",["host"]]]],[11,"fmt_header","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",89,[[["str"]],["result",["host"]]]],[11,"clone","","",73,[[["self"]],["ifmatch"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",73,[[["self"],["ifmatch"]],["bool"]]],[11,"header_name","","",73,[[],["str"]]],[11,"parse_header","","",73,[[["raw"]],["result"]]],[11,"fmt_header","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["ifmodifiedsince"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"deref","","",49,[[["self"]],["httpdate"]]],[11,"deref_mut","","",49,[[["self"]],["httpdate"]]],[11,"header_name","","",49,[[],["str"]]],[11,"parse_header","","",49,[[["raw"]],["result"]]],[11,"fmt_header","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",74,[[["self"]],["ifnonematch"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"eq","","",74,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",74,[[["self"],["ifnonematch"]],["bool"]]],[11,"header_name","","",74,[[],["str"]]],[11,"parse_header","","",74,[[["raw"]],["result"]]],[11,"fmt_header","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"clone","","",75,[[["self"]],["ifrange"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"eq","","",75,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",75,[[["self"],["ifrange"]],["bool"]]],[11,"header_name","","",75,[[],["str"]]],[11,"parse_header","","",75,[[["raw"]],["result",["ifrange"]]]],[11,"fmt_header","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["ifunmodifiedsince"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"deref","","",50,[[["self"]],["httpdate"]]],[11,"deref_mut","","",50,[[["self"]],["httpdate"]]],[11,"header_name","","",50,[[],["str"]]],[11,"parse_header","","",50,[[["raw"]],["result"]]],[11,"fmt_header","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["lasteventid"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["lasteventid"]],["bool"]]],[11,"ne","","",51,[[["self"],["lasteventid"]],["bool"]]],[11,"header_name","","",51,[[],["str"]]],[11,"parse_header","","",51,[[["raw"]],["result"]]],[11,"fmt_header","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"deref","","",51,[[["self"]],["string"]]],[11,"deref_mut","","",51,[[["self"]],["string"]]],[11,"clone","","",52,[[["self"]],["lastmodified"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",52,[[["self"],["lastmodified"]],["bool"]]],[11,"deref","","",52,[[["self"]],["httpdate"]]],[11,"deref_mut","","",52,[[["self"]],["httpdate"]]],[11,"header_name","","",52,[[],["str"]]],[11,"parse_header","","",52,[[["raw"]],["result"]]],[11,"fmt_header","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["link"]]],[11,"eq","","",90,[[["self"],["link"]],["bool"]]],[11,"ne","","",90,[[["self"],["link"]],["bool"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["linkvalue"]]],[11,"eq","","",91,[[["self"],["linkvalue"]],["bool"]]],[11,"ne","","",91,[[["self"],["linkvalue"]],["bool"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["mediadesc"]]],[11,"eq","","",77,[[["self"],["mediadesc"]],["bool"]]],[11,"ne","","",77,[[["self"],["mediadesc"]],["bool"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["relationtype"]]],[11,"eq","","",76,[[["self"],["relationtype"]],["bool"]]],[11,"ne","","",76,[[["self"],["relationtype"]],["bool"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",90,[[["vec",["linkvalue"]]],["link"]]],[11,"values","","Get the `Link` header's `LinkValue`s.",90,N],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",90,[[["self"],["linkvalue"]]]],[11,"new","","Create `LinkValue` from URI-Reference.",91,[[["t"]],["linkvalue"]]],[11,"link","","Get the `LinkValue`'s value.",91,[[["self"]],["str"]]],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",91,[[["self"]],["option"]]],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",91,[[["self"]],["option",["str"]]]],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",91,[[["self"]],["option"]]],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",91,[[["self"]],["option"]]],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",91,[[["self"]],["option"]]],[11,"title","","Get the `LinkValue`'s `title` parameter.",91,[[["self"]],["option",["str"]]]],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",91,[[["self"]],["option",["str"]]]],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",91,[[["self"]],["option",["mime"]]]],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",91,[[["self"],["relationtype"]],["linkvalue"]]],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",91,[[["self"],["t"]],["linkvalue"]]],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",91,[[["self"],["relationtype"]],["linkvalue"]]],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",91,[[["self"],["languagetag"]],["linkvalue"]]],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",91,[[["self"],["mediadesc"]],["linkvalue"]]],[11,"set_title","","Set `LinkValue`'s `title` parameter.",91,[[["self"],["t"]],["linkvalue"]]],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",91,[[["self"],["t"]],["linkvalue"]]],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",91,[[["self"],["mime"]],["linkvalue"]]],[11,"header_name","","",90,[[],["str"]]],[11,"parse_header","","",90,[[["raw"]],["result",["link"]]]],[11,"fmt_header","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",90,[[["str"]],["result",["link"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",77,[[["str"]],["result",["mediadesc"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",76,[[["str"]],["result",["relationtype"]]]],[11,"clone","","",92,[[["self"]],["location"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["location"]],["bool"]]],[11,"ne","","",92,[[["self"],["location"]],["bool"]]],[11,"new","","Creates a new $id",92,[[["i"]],["self"]]],[11,"deref","","",92,N],[11,"header_name","","",92,[[],["str"]]],[11,"parse_header","","",92,[[["raw"]],["result"]]],[11,"fmt_header","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",93,[[["self"],["origin"]],["bool"]]],[11,"ne","","",93,[[["self"],["origin"]],["bool"]]],[11,"clone","","",93,[[["self"]],["origin"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Origin` header.",93,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"null","","Creates a `Null` `Origin` header.",93,[[],["origin"]]],[11,"is_null","","Checks if `Origin` is `Null`.",93,[[["self"]],["bool"]]],[11,"scheme","","The scheme, such as http or https.",93,[[["self"]],["option",["str"]]]],[11,"host","","The host, such as `Host { hostname: \"hyper.rs\".to_owned(), port: None}`.",93,[[["self"]],["option",["host"]]]],[11,"header_name","","",93,[[],["str"]]],[11,"parse_header","","",93,[[["raw"]],["result",["origin"]]]],[11,"fmt_header","","",93,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",93,[[["str"]],["result",["origin"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["pragma"]]],[11,"eq","","",78,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",78,[[["self"],["pragma"]],["bool"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",78,[[],["str"]]],[11,"parse_header","","",78,[[["raw"]],["result",["pragma"]]]],[11,"fmt_header","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",53,[[["self"],["prefer"]],["bool"]]],[11,"clone","","",53,[[["self"]],["prefer"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"deref","","",53,[[["self"]],["vec"]]],[11,"deref_mut","","",53,[[["self"]],["vec"]]],[11,"header_name","","",53,[[],["str"]]],[11,"parse_header","","",53,[[["raw"]],["result",["prefer"]]]],[11,"fmt_header","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",79,[[["self"],["preference"]],["bool"]]],[11,"ne","","",79,[[["self"],["preference"]],["bool"]]],[11,"clone","","",79,[[["self"]],["preference"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",79,[[["str"]],["result",["preference","option"]]]],[11,"eq","","",54,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",54,[[["self"],["preferenceapplied"]],["bool"]]],[11,"clone","","",54,[[["self"]],["preferenceapplied"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"deref","","",54,[[["self"]],["vec"]]],[11,"deref_mut","","",54,[[["self"]],["vec"]]],[11,"header_name","","",54,[[],["str"]]],[11,"parse_header","","",54,[[["raw"]],["result",["preferenceapplied"]]]],[11,"fmt_header","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["proxyauthorization"]]],[11,"eq","","",55,[[["self"],["proxyauthorization"]],["bool"]]],[11,"ne","","",55,[[["self"],["proxyauthorization"]],["bool"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"deref","","",55,[[["self"]],["s"]]],[11,"deref_mut","","",55,[[["self"]],["s"]]],[11,"header_name","","",55,[[],["str"]]],[11,"parse_header","","",55,[[["raw"]],["result",["proxyauthorization"]]]],[11,"fmt_header","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",80,[[["self"],["range"]],["bool"]]],[11,"ne","","",80,[[["self"],["range"]],["bool"]]],[11,"clone","","",80,[[["self"]],["range"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"eq","","",81,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",81,[[["self"],["byterangespec"]],["bool"]]],[11,"clone","","",81,[[["self"]],["byterangespec"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"to_satisfiable_range","","Given the full length of the entity, attempt to normalize the byte range into an satisfiable end-inclusive (from, to) range.",81,[[["self"],["u64"]],["option"]]],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,[[["vec"]],["range"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",80,[[["str"]],["result",["range"]]]],[11,"from_str","","",81,[[["str"]],["result",["byterangespec"]]]],[11,"header_name","","",80,[[],["str"]]],[11,"parse_header","","",80,[[["raw"]],["result",["range"]]]],[11,"fmt_header","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["referer"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"eq","","",94,[[["self"],["referer"]],["bool"]]],[11,"ne","","",94,[[["self"],["referer"]],["bool"]]],[11,"new","","Creates a new $id",94,[[["i"]],["self"]]],[11,"deref","","",94,N],[11,"header_name","","",94,[[],["str"]]],[11,"parse_header","","",94,[[["raw"]],["result"]]],[11,"fmt_header","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",82,[[["self"]],["referrerpolicy"]]],[11,"eq","","",82,[[["self"],["referrerpolicy"]],["bool"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",82,[[],["str"]]],[11,"parse_header","","",82,[[["raw"]],["result",["referrerpolicy"]]]],[11,"fmt_header","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"clone","","",83,[[["self"]],["retryafter"]]],[11,"eq","","",83,[[["self"],["retryafter"]],["bool"]]],[11,"ne","","",83,[[["self"],["retryafter"]],["bool"]]],[11,"header_name","","",83,[[],["str"]]],[11,"parse_header","","",83,[[["raw"]],["result",["retryafter"]]]],[11,"fmt_header","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["server"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"eq","","",95,[[["self"],["server"]],["bool"]]],[11,"ne","","",95,[[["self"],["server"]],["bool"]]],[11,"new","","Creates a new $id",95,[[["i"]],["self"]]],[11,"deref","","",95,N],[11,"header_name","","",95,[[],["str"]]],[11,"parse_header","","",95,[[["raw"]],["result"]]],[11,"fmt_header","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["setcookie"]]],[11,"eq","","",56,[[["self"],["setcookie"]],["bool"]]],[11,"ne","","",56,[[["self"],["setcookie"]],["bool"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"deref","","",56,[[["self"]],["vec"]]],[11,"deref_mut","","",56,[[["self"]],["vec"]]],[11,"header_name","","",56,[[],["str"]]],[11,"parse_header","","",56,[[["raw"]],["result",["setcookie"]]]],[11,"fmt_header","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["stricttransportsecurity"]]],[11,"eq","","",57,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",57,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"including_subdomains","","Create an STS header that includes subdomains",57,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",57,[[["u64"]],["stricttransportsecurity"]]],[11,"from_str","","",57,[[["str"]],["result",["stricttransportsecurity"]]]],[11,"header_name","","",57,[[],["str"]]],[11,"parse_header","","",57,[[["raw"]],["result",["stricttransportsecurity"]]]],[11,"fmt_header","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",58,[[["self"]],["te"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"eq","","",58,[[["self"],["te"]],["bool"]]],[11,"ne","","",58,[[["self"],["te"]],["bool"]]],[11,"deref","","",58,[[["self"]],["vec"]]],[11,"deref_mut","","",58,[[["self"]],["vec"]]],[11,"header_name","","",58,[[],["str"]]],[11,"parse_header","","",58,[[["raw"]],["result"]]],[11,"fmt_header","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"clone","","",59,[[["self"]],["transferencoding"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"eq","","",59,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",59,[[["self"],["transferencoding"]],["bool"]]],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[11,"header_name","","",59,[[],["str"]]],[11,"parse_header","","",59,[[["raw"]],["result"]]],[11,"fmt_header","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",59,[[],["transferencoding"]]],[11,"clone","","",60,[[["self"]],["upgrade"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"eq","","",60,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",60,[[["self"],["upgrade"]],["bool"]]],[11,"deref","","",60,[[["self"]],["vec"]]],[11,"deref_mut","","",60,[[["self"]],["vec"]]],[11,"header_name","","",60,[[],["str"]]],[11,"parse_header","","",60,[[["raw"]],["result"]]],[11,"fmt_header","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["protocolname"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"eq","","",84,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",84,[[["self"],["protocolname"]],["bool"]]],[11,"from_str","","",84,[[["str"]],["result",["protocolname"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",61,[[["self"]],["protocol"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"eq","","",61,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",61,[[["self"],["protocol"]],["bool"]]],[11,"new","","Creates a new Protocol with the given name and version",61,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"from_str","","",61,[[["str"]],["result",["protocol"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"clone","","",96,[[["self"]],["useragent"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"eq","","",96,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",96,[[["self"],["useragent"]],["bool"]]],[11,"new","","Creates a new $id",96,[[["i"]],["self"]]],[11,"deref","","",96,N],[11,"header_name","","",96,[[],["str"]]],[11,"parse_header","","",96,[[["raw"]],["result"]]],[11,"fmt_header","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["vary"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"eq","","",85,[[["self"],["vary"]],["bool"]]],[11,"ne","","",85,[[["self"],["vary"]],["bool"]]],[11,"header_name","","",85,[[],["str"]]],[11,"parse_header","","",85,[[["raw"]],["result"]]],[11,"fmt_header","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"eq","","",62,[[["self"],["warning"]],["bool"]]],[11,"ne","","",62,[[["self"],["warning"]],["bool"]]],[11,"clone","","",62,[[["self"]],["warning"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",62,[[],["str"]]],[11,"parse_header","","",62,[[["raw"]],["result",["warning"]]]],[11,"fmt_header","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",62,[[["str"]],["result",["warning"]]]],[11,"clone","","",97,[[["self"]],["raw"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"len","","Returns the amount of lines.",97,[[["self"]],["usize"]]],[11,"one","","Returns the line if there is only 1.",97,[[["self"]],["option"]]],[11,"iter","","Iterate the lines of raw bytes.",97,[[["self"]],["rawlines"]]],[11,"push","","Append a line to this `Raw` header value.",97,[[["self"],["v"]]]],[11,"eq","","",97,[[["self"],["raw"]],["bool"]]],[11,"eq","","",97,N],[11,"eq","","",97,N],[11,"eq","","",97,N],[11,"eq","","",97,N],[11,"eq","","",97,N],[11,"eq","","",97,[[["self"],["str"]],["bool"]]],[11,"from","","",97,[[["vec",["vec"]]],["raw"]]],[11,"from","","",97,[[["string"]],["raw"]]],[11,"from","","",97,[[["vec",["u8"]]],["raw"]]],[11,"from","","",97,[[["str"]],["raw"]]],[11,"from","","",97,N],[11,"from","","",97,[[["bytes"]],["raw"]]],[11,"index","","",97,N],[11,"clone","","",63,[[["self"]],["charset"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"eq","","",63,[[["self"],["charset"]],["bool"]]],[11,"ne","","",63,[[["self"],["charset"]],["bool"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",63,[[["str"]],["result",["charset"]]]],[11,"clone","","",64,[[["self"]],["encoding"]]],[11,"eq","","",64,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",64,[[["self"],["encoding"]],["bool"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",64,[[["str"]],["result",["encoding"]]]],[11,"clone","","",19,[[["self"]],["entitytag"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",19,[[["self"],["entitytag"]],["bool"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",19,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",19,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",19,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",19,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",19,[[["self"],["string"]]]],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",19,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",19,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",19,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",19,[[["self"],["entitytag"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",19,[[["str"]],["result",["entitytag"]]]],[11,"clone","","",98,[[["self"]],["httpdate"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"eq","","",98,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",98,[[["self"],["httpdate"]],["bool"]]],[11,"partial_cmp","","",98,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",98,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",98,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",98,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",98,[[["self"],["httpdate"]],["bool"]]],[11,"cmp","","",98,[[["self"],["httpdate"]],["ordering"]]],[11,"from_str","","",98,[[["str"]],["result",["httpdate"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"from","","",98,[[["systemtime"]],["httpdate"]]],[11,"clone","","",99,[[["self"]],["quality"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",99,[[["self"],["quality"]],["ordering"]]],[11,"eq","","",99,[[["self"],["quality"]],["bool"]]],[11,"ne","","",99,[[["self"],["quality"]],["bool"]]],[11,"partial_cmp","","",99,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",99,[[["self"],["quality"]],["bool"]]],[11,"le","","",99,[[["self"],["quality"]],["bool"]]],[11,"gt","","",99,[[["self"],["quality"]],["bool"]]],[11,"ge","","",99,[[["self"],["quality"]],["bool"]]],[11,"default","","",99,[[],["quality"]]],[11,"clone","","",20,[[["self"]],["qualityitem"]]],[11,"eq","","",20,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",20,[[["self"],["qualityitem"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",20,[[["t"],["quality"]],["qualityitem"]]],[11,"partial_cmp","","",20,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",20,[[["str"]],["result",["qualityitem"]]]],[0,"parsing","","Utility functions for Header implementations.",N,N],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",N,N],[12,"charset","","The character set that is used to encode the `value` to a string.",100,N],[12,"language_tag","","The human language details of the `value`, if available.",100,N],[12,"value","","The parameter value, as expressed in octets.",100,N],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",N,[[["raw"]],["result"]]],[5,"from_raw_str","","Reads a raw string into a value.",N,N],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",N,[[["raw"]],["result",["vec"]]]],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",N,N],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",N,[[["str"]],["result",["extendedvalue"]]]],[5,"http_percent_encode","","Percent encode a sequence of bytes with a character set defined in [https://tools.ietf.org/html/rfc5987#section-3.2][url]",N,N],[11,"clone","","",100,[[["self"]],["extendedvalue"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"eq","","",100,[[["self"],["extendedvalue"]],["bool"]]],[11,"ne","","",100,[[["self"],["extendedvalue"]],["bool"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",101,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",101,[[["self"],["formatter"]],["result"]]],[8,"Header","","A trait for any object that will represent a header field and value.",N,N],[10,"header_name","","Returns the name of the header field this belongs to.",102,[[],["str"]]],[10,"parse_header","","Parse a header from a raw stream of bytes.",102,[[["raw"]],["result"]]],[10,"fmt_header","","Format a header to outgoing stream.",102,[[["self"],["formatter"]],["result"]]],[11,"fmt_line","","Format one 'line' of a header.",103,[[["self"],["display"]],["result"]]],[11,"clone","","",104,[[["self"]],["headers"]]],[11,"default","","",104,[[],["headers"]]],[11,"new","","Creates a new, empty headers map.",104,[[],["headers"]]],[11,"with_capacity","","Creates a new `Headers` struct with space reserved for `len` headers.",104,[[["usize"]],["headers"]]],[11,"set","","Set a header field to the corresponding value.",104,[[["self"],["h"]]]],[11,"get","","Get a reference to the header field's value, if it exists.",104,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",104,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",104,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",104,[[["self"]],["option"]]],[11,"iter","","Returns an iterator over the header fields.",104,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",104,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",104,[[["self"]]]],[11,"get_raw","","Access the raw value of a header.",104,[[["self"],["str"]],["option",["raw"]]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",104,[[["self"],["k"],["v"]]]],[11,"append_raw","","Append a value to raw value of this header.",104,[[["self"],["k"],["v"]]]],[11,"remove_raw","","Remove a header by name.",104,[[["self"],["str"]]]],[11,"eq","","",104,[[["self"],["headers"]],["bool"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"next","","",105,[[["self"]],["option",["headerview"]]]],[11,"is","","Check if a HeaderView is a certain Header.",106,[[["self"]],["bool"]]],[11,"name","","Get the Header name as a slice.",106,[[["self"]],["str"]]],[11,"value","","Cast the value to a certain Header type.",106,[[["self"]],["option"]]],[11,"value_string","","Get just the header value as a String.",106,[[["self"]],["string"]]],[11,"raw","","Access the raw value of the header.",106,[[["self"]],["raw"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"extend","","",104,[[["self"],["i"]]]],[11,"extend","","",104,[[["self"],["i"]]]],[11,"from_iter","","",104,[[["i"]],["headers"]]],[11,"empty","hyper","Return an empty body stream",107,[[],["body"]]],[11,"pair","","Return a body stream with an associated sender half",107,N],[11,"is_empty","","Returns if this body was constructed via `Body::empty()`.",107,[[["self"]],["bool"]]],[11,"default","","",107,[[],["body"]]],[11,"poll","","",107,[[["self"]],["poll",["option","error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"from","","",107,[[["receiver",["result"]]],["body"]]],[11,"from","","",107,[[["chunk"]],["body"]]],[11,"from","","",107,[[["bytes"]],["body"]]],[11,"from","","",107,[[["vec",["u8"]]],["body"]]],[11,"from","","",107,N],[11,"from","","",107,[[["cow"]],["body"]]],[11,"from","","",107,[[["string"]],["body"]]],[11,"from","","",107,[[["str"]],["body"]]],[11,"from","","",107,[[["cow",["str"]]],["body"]]],[11,"from","","",107,[[["option",["body"]]],["body"]]],[11,"from","","",108,[[["vec",["u8"]]],["chunk"]]],[11,"from","","",108,N],[11,"from","","",108,[[["string"]],["chunk"]]],[11,"from","","",108,[[["str"]],["chunk"]]],[11,"from","","",108,[[["bytes"]],["chunk"]]],[11,"deref","","",108,N],[11,"as_ref","","",108,N],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"default","","",108,[[],["chunk"]]],[11,"into_iter","","",108,N],[11,"extend","","",108,[[["self"],["t"]]]],[11,"new","","Construct a new Request.",109,[[["method"],["uri"]],["request"]]],[11,"uri","","Read the Request Uri.",109,[[["self"]],["uri"]]],[11,"version","","Read the Request Version.",109,[[["self"]],["httpversion"]]],[11,"headers","","Read the Request headers.",109,[[["self"]],["headers"]]],[11,"method","","Read the Request method.",109,[[["self"]],["method"]]],[11,"body_ref","","Read the Request body.",109,[[["self"]],["option"]]],[11,"body_mut","","Get a mutable reference to the Request body.",109,[[["self"]],["option"]]],[11,"path","","The target path of this Request.",109,[[["self"]],["str"]]],[11,"query","","The query string of this Request.",109,[[["self"]],["option",["str"]]]],[11,"set_method","","Set the Method of this request.",109,[[["self"],["method"]]]],[11,"headers_mut","","Get a mutable reference to the Request headers.",109,[[["self"]],["headers"]]],[11,"set_uri","","Set the `Uri` of this request.",109,[[["self"],["uri"]]]],[11,"set_version","","Set the `HttpVersion` of this request.",109,[[["self"],["httpversion"]]]],[11,"set_body","","Set the body of the request.",109,[[["self"],["t"]]]],[11,"set_proxy","","Set that the URI should use the absolute form.",109,[[["self"],["bool"]]]],[11,"deconstruct","","Deconstruct this Request into its pieces.",109,N],[11,"body","","Take the Request body.",109,[[["self"]],["body"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a default response",110,[[],["response"]]],[11,"version","","Get the HTTP version of this response.",110,[[["self"]],["httpversion"]]],[11,"headers","","Get the headers from the response.",110,[[["self"]],["headers"]]],[11,"headers_mut","","Get a mutable reference to the headers.",110,[[["self"]],["headers"]]],[11,"status","","Get the status from the server.",110,[[["self"]],["statuscode"]]],[11,"set_status","","Set the `StatusCode` for this response.",110,[[["self"],["statuscode"]]]],[11,"with_status","","Set the status and move the Response.",110,[[["self"],["statuscode"]],["self"]]],[11,"with_header","","Set a header and move the Response.",110,[[["self"],["h"]],["self"]]],[11,"with_headers","","Set the headers and move the Response.",110,[[["self"],["headers"]],["self"]]],[11,"set_body","","Set the body.",110,[[["self"],["t"]]]],[11,"with_body","","Set the body and move the Response.",110,[[["self"],["t"]],["self"]]],[11,"body_ref","","Read the body.",110,[[["self"]],["option"]]],[11,"body","","Take the `Body` of this response.",110,[[["self"]],["body"]]],[11,"default","","",110,[[],["response"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[0,"server","","HTTP Server",N,N],[8,"NewService","hyper::server","Creates new `Service` values.",N,N],[16,"Request","","Requests handled by the service",111,N],[16,"Response","","Responses given by the service",111,N],[16,"Error","","Errors produced by the service",111,N],[16,"Instance","","The `Service` value created by this factory",111,N],[10,"new_service","","Create and return a new service value.",111,[[["self"]],["result",["error"]]]],[8,"Service","","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Request","","Requests handled by the service.",3,N],[16,"Response","","Responses given by the service.",3,N],[16,"Error","","Errors produced by the service.",3,N],[16,"Future","","The future response value.",3,N],[10,"call","","Process the request and return the response asynchronously.",3,N],[3,"Response","","An HTTP Response",N,N],[3,"Request","","An HTTP Request",N,N],[3,"Http","","A configuration of the HTTP protocol.",N,N],[3,"Server","","An instance of a server created through `Http::bind`.",N,N],[3,"Serve","","A stream mapping incoming IOs to new services.",N,N],[3,"AddrIncoming","","A stream of connections from binding to an address.",N,N],[5,"const_service","","Create a `NewService` by sharing references of `service.",N,[[["s"]],["constservice"]]],[5,"service_fn","","Create a `Service` from a function.",N,[[["f"]],["servicefn"]]],[0,"conn","","Lower-level Server connection API.",N,N],[3,"Connection","hyper::server::conn","A future binding a connection with a Service.",N,N],[3,"Parts","","Deconstructed parts of a `Connection`.",N,N],[12,"io","","The original IO object used in the handshake.",112,N],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",112,N],[12,"service","","The `Service` used to serve this connection.",112,N],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"disable_keep_alive","","Disables keep-alive for this connection.",113,[[["self"]]]],[11,"into_parts","","Return the inner IO object, and additional information.",113,[[["self"]],["parts"]]],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",113,[[["self"]],["poll",["error"]]]],[11,"poll","","",113,[[["self"]],["poll"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::server","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new instance of the HTTP protocol, ready to spawn a server or start accepting connections.",116,[[],["http"]]],[11,"keep_alive","","Enables or disables HTTP keep-alive.",116,[[["self"],["bool"]],["self"]]],[11,"max_buf_size","","Set the maximum buffer size for the connection.",116,[[["self"],["usize"]],["self"]]],[11,"pipeline","","Aggregates flushes to better support pipelined responses.",116,[[["self"],["bool"]],["self"]]],[11,"sleep_on_errors","","Swallow connection accept errors. Instead of passing up IO errors when the server is under heavy load the errors will be ignored. Some connection accept errors (like \"connection reset\") can be ignored, some (like \"too many files open\") may consume 100% CPU and a timout of 10ms is used in that case.",116,[[["self"],["bool"]],["self"]]],[11,"bind","","Bind the provided `addr` and return a server ready to handle connections.",116,[[["self"],["socketaddr"],["s"]],["result",["server"]]]],[11,"serve_addr_handle","","Bind the provided `addr` and return a server with a shared `Core`.",116,[[["self"],["socketaddr"],["handle"],["s"]],["result",["serve"]]]],[11,"serve_incoming","","Bind the provided stream of incoming IO objects with a `NewService`.",116,[[["self"],["i"],["s"]],["serve"]]],[11,"serve_connection","","Bind a connection together with a Service.",116,[[["self"],["i"],["s"]],["connection"]]],[11,"clone","","",116,[[["self"]],["http"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"local_addr","","Returns the local address that this server is bound to.",117,[[["self"]],["result",["socketaddr"]]]],[11,"handle","","Returns a handle to the underlying event loop that this server will be running on.",117,[[["self"]],["handle"]]],[11,"shutdown_timeout","","Configure the amount of time this server will wait for a \"graceful shutdown\".",117,[[["self"],["duration"]],["self"]]],[11,"run","","Execute this server infinitely.",117,[[["self"]],["result"]]],[11,"run_until","","Execute this server until the given future, `shutdown_signal`, resolves.",117,[[["self"],["f"]],["result"]]],[11,"run_threads","","Run the server on multiple threads.",117,[[["self"],["usize"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"incoming_ref","","Get a reference to the incoming stream.",114,[[["self"]],["i"]]],[11,"poll","","",114,[[["self"]],["poll",["option"]]]],[11,"local_addr","","Get the local address bound to this listener.",115,[[["self"]],["socketaddr"]]],[11,"poll","","",115,[[["self"]],["poll",["option"]]]],[11,"fmt","hyper","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"try_from","","Try to convert a `u16` into a `StatusCode`.",1,[[["u16"]],["result",["statuscode","invalidstatuscode"]]]],[11,"as_u16","","Get the `u16` code from this `StatusCode`.",1,[[["self"]],["u16"]]],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",1,[[["self"]],["option",["str"]]]],[11,"is_informational","","Check if this `StatusCode` is within 100-199.",1,[[["self"]],["bool"]]],[11,"is_success","","Check if this `StatusCode` is within 200-299.",1,[[["self"]],["bool"]]],[11,"is_redirection","","Check if this `StatusCode` is within 300-399.",1,[[["self"]],["bool"]]],[11,"is_client_error","","Check if this `StatusCode` is within 400-499.",1,[[["self"]],["bool"]]],[11,"is_server_error","","Check if this `StatusCode` is within 500-599.",1,[[["self"]],["bool"]]],[11,"is_strange_status","","Check if this `StatusCode` is not within 100-599.",1,[[["self"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["statuscode"]],["bool"]]],[11,"clone","","",1,[[["self"]],["statuscode"]]],[11,"partial_cmp","","",1,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["statuscode"]],["ordering"]]],[11,"default","","",1,[[],["statuscode"]]],[11,"clone","","",118,[[["self"]],["uri"]]],[11,"hash","","",118,N],[11,"path","","Get the path of this `Uri`.",118,[[["self"]],["str"]]],[11,"scheme","","Get the scheme of this `Uri`.",118,[[["self"]],["option",["str"]]]],[11,"authority","","Get the authority of this `Uri`.",118,[[["self"]],["option",["str"]]]],[11,"host","","Get the host of this `Uri`.",118,[[["self"]],["option",["str"]]]],[11,"port","","Get the port of this `Uri`.",118,[[["self"]],["option",["u16"]]]],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",118,[[["self"]],["option",["str"]]]],[11,"is_absolute","","Returns whether this URI is in `absolute-form`.",118,[[["self"]],["bool"]]],[11,"from_str","","",118,[[["str"]],["result",["uri","urierror"]]]],[11,"eq","","",118,[[["self"],["uri"]],["bool"]]],[11,"eq","","",118,[[["self"],["str"]],["bool"]]],[11,"eq","","",118,[[["self"],["str"]],["bool"]]],[11,"as_ref","","",118,[[["self"]],["str"]]],[11,"default","","",118,[[],["uri"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"clone","hyper::error","",119,[[["self"]],["urierror"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"description","","",119,[[["self"]],["str"]]],[11,"eq","hyper","",2,[[["self"],["httpversion"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["httpversion"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["httpversion"]]],[11,"cmp","","",2,[[["self"],["httpversion"]],["ordering"]]],[11,"hash","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",2,[[["str"]],["result",["httpversion","error"]]]],[11,"default","","",2,[[],["httpversion"]]],[14,"header","","",N,N],[11,"clone","hyper::header","",18,[[["self"]],["languagetag"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",18,[[["str"]],["result",["languagetag","error"]]]],[11,"default","","",18,[[],["languagetag"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",18,[[["self"],["languagetag"]],["bool"]]],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",18,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",18,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",18,[[["self"]],["languagetag"]]]],"paths":[[4,"Method"],[4,"StatusCode"],[4,"HttpVersion"],[8,"Service"],[3,"Parts"],[3,"Builder"],[3,"SendRequest"],[3,"Connection"],[3,"Handshake"],[3,"ResponseFuture"],[3,"HttpConnector"],[8,"Connect"],[3,"Client"],[3,"FutureResponse"],[3,"UseDefaultConnector"],[3,"Config"],[4,"Error"],[3,"Canceled"],[3,"LanguageTag"],[3,"EntityTag"],[3,"QualityItem"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentLocation"],[3,"ContentRange"],[3,"ContentType"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastEventId"],[3,"LastModified"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"ProxyAuthorization"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"Te"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"Warning"],[4,"Charset"],[4,"Encoding"],[4,"RangeUnit"],[4,"AccessControlAllowOrigin"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"RelationType"],[4,"MediaDesc"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"RetryAfter"],[4,"ProtocolName"],[4,"Vary"],[3,"AccessControlAllowCredentials"],[3,"Cookie"],[3,"CookieIter"],[3,"Host"],[3,"Link"],[3,"LinkValue"],[3,"Location"],[3,"Origin"],[3,"Referer"],[3,"Server"],[3,"UserAgent"],[3,"Raw"],[3,"HttpDate"],[3,"Quality"],[3,"ExtendedValue"],[8,"Scheme"],[8,"Header"],[3,"Formatter"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"Body"],[3,"Chunk"],[3,"Request"],[3,"Response"],[8,"NewService"],[3,"Parts"],[3,"Connection"],[3,"Serve"],[3,"AddrIncoming"],[3,"Http"],[3,"Server"],[3,"Uri"],[3,"UriError"]]};
searchIndex["hyper_tls"]={"doc":"hyper-tls","items":[[3,"Error","hyper_tls","An error returned from the TLS implementation.",N,N],[3,"HttpsConnector","","A Connector for the `https` scheme.",N,N],[3,"HttpsConnecting","","A Future representing work to connect to a URL, and a TLS handshake.",N,N],[4,"MaybeHttpsStream","","A stream that might be protected with TLS.",N,N],[13,"Http","","A stream over plain text.",0,N],[13,"Https","","A stream protected with TLS.",0,N],[11,"clone","","",1,[[["self"]],["httpsconnector"]]],[11,"new","","Construct a new HttpsConnector.",1,[[["usize"],["handle"]],["result",["error"]]]],[11,"danger_disable_hostname_verification","","Disable hostname verification when connecting.",1,[[["self"],["bool"]]]],[11,"from","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"call","","",1,N],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"read","","",0,N],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"prepare_uninitialized_buffer","","",0,N],[11,"shutdown","","",0,[[["self"]],["poll",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"openssl_error","","",3,[[["self"]],["error"]]],[11,"from","","",3,[[["t"]],["error"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[4,"MaybeHttpsStream"],[3,"HttpsConnector"],[3,"HttpsConnecting"],[3,"Error"]]};
searchIndex["idna"]={"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",N,[[["str"]],["result",["string","errors"]]]],[5,"domain_to_unicode","","The domain to Unicode algorithm.",N,N],[0,"punycode","","Punycode (RFC 3492) implementation.",N,N],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",N,[[["str"]],["option",["string"]]]],[5,"decode","","Convert Punycode to Unicode.",N,[[["str"]],["option",["vec"]]]],[5,"encode_str","","Convert an Unicode `str` to Punycode.",N,[[["str"]],["option",["string"]]]],[5,"encode","","Convert Unicode to Punycode.",N,N],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",N,N],[3,"Flags","idna::uts46","",N,N],[12,"use_std3_ascii_rules","","",0,N],[12,"transitional_processing","","",0,N],[12,"verify_dns_length","","",0,N],[3,"Errors","","Errors recorded during UTS #46 processing.",N,N],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",N,[[["str"],["flags"]],["result",["string","errors"]]]],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",N,N],[7,"PUNYCODE_PREFIX","","",N,N],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["iovec"]={"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",N,N],[0,"unix","","IoVec extensions for Unix platforms.",N,N],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",N,N],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",N,N],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",N,N],[11,"from_bytes","","",0,N],[11,"from_bytes_mut","","",0,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N]],"paths":[[3,"IoVec"]]};
searchIndex["itoa"]={"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N]],"paths":[]};
searchIndex["language_tags"]={"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,N],[4,"Error","","Defines an Error type for langtags.",N,N],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,N],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,N],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,N],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,N],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,N],[13,"InvalidLanguage","","The given language subtag is invalid.",1,N],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,N],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,N],[6,"Result","","Result type used for this library.",N,N],[17,"GRANDFATHERED","","Contains all grandfathered tags.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["languagetag"]]],[11,"clone","","",0,[[["self"]],["languagetag"]]],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",0,[[["self"]],["languagetag"]]],[11,"eq","","",0,[[["self"],["languagetag"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"langtag","","Utility for creating simple language tags.",N,N]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"__lazy_static_create","","",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["lazycell"]={"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",N,N],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["lazycell"]]],[11,"new","","Creates a new, empty, `LazyCell`.",0,[[],["lazycell"]]],[11,"fill","","Put a value into this cell.",0,[[["self"],["t"]],["result"]]],[11,"filled","","Test whether this cell has been previously filled.",0,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",0,[[["self"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["atomiclazycell"]]],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,[[],["atomiclazycell"]]],[11,"fill","","Put a value into this cell.",1,[[["self"],["t"]],["result"]]],[11,"filled","","Test whether this cell has been previously filled.",1,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,[[["self"]],["option"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",1,[[["self"]],["option"]]]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"dirent","","",N,N],[12,"d_ino","","",37,N],[12,"d_off","","",37,N],[12,"d_reclen","","",37,N],[12,"d_type","","",37,N],[12,"d_name","","",37,N],[3,"dirent64","","",N,N],[12,"d_ino","","",38,N],[12,"d_off","","",38,N],[12,"d_reclen","","",38,N],[12,"d_type","","",38,N],[12,"d_name","","",38,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",39,N],[12,"rlim_max","","",39,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",40,N],[12,"gl_pathv","","",40,N],[12,"gl_offs","","",40,N],[12,"gl_flags","","",40,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",41,N],[12,"pw_passwd","","",41,N],[12,"pw_uid","","",41,N],[12,"pw_gid","","",41,N],[12,"pw_gecos","","",41,N],[12,"pw_dir","","",41,N],[12,"pw_shell","","",41,N],[3,"spwd","","",N,N],[12,"sp_namp","","",42,N],[12,"sp_pwdp","","",42,N],[12,"sp_lstchg","","",42,N],[12,"sp_min","","",42,N],[12,"sp_max","","",42,N],[12,"sp_warn","","",42,N],[12,"sp_inact","","",42,N],[12,"sp_expire","","",42,N],[12,"sp_flag","","",42,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",43,N],[12,"dqb_bsoftlimit","","",43,N],[12,"dqb_curspace","","",43,N],[12,"dqb_ihardlimit","","",43,N],[12,"dqb_isoftlimit","","",43,N],[12,"dqb_curinodes","","",43,N],[12,"dqb_btime","","",43,N],[12,"dqb_itime","","",43,N],[12,"dqb_valid","","",43,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",44,N],[12,"ssi_errno","","",44,N],[12,"ssi_code","","",44,N],[12,"ssi_pid","","",44,N],[12,"ssi_uid","","",44,N],[12,"ssi_fd","","",44,N],[12,"ssi_tid","","",44,N],[12,"ssi_band","","",44,N],[12,"ssi_overrun","","",44,N],[12,"ssi_trapno","","",44,N],[12,"ssi_status","","",44,N],[12,"ssi_int","","",44,N],[12,"ssi_ptr","","",44,N],[12,"ssi_utime","","",44,N],[12,"ssi_stime","","",44,N],[12,"ssi_addr","","",44,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",45,N],[12,"it_value","","",45,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",46,N],[12,"mq_maxmsg","","",46,N],[12,"mq_msgsize","","",46,N],[12,"mq_curmsgs","","",46,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",47,N],[12,"if_name","","",47,N],[3,"msginfo","","",N,N],[12,"msgpool","","",48,N],[12,"msgmap","","",48,N],[12,"msgmax","","",48,N],[12,"msgmnb","","",48,N],[12,"msgmni","","",48,N],[12,"msgssz","","",48,N],[12,"msgtql","","",48,N],[12,"msgseg","","",48,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",49,N],[12,"msg_len","","",49,N],[3,"sembuf","","",N,N],[12,"sem_num","","",50,N],[12,"sem_op","","",50,N],[12,"sem_flg","","",50,N],[3,"input_event","","",N,N],[12,"time","","",51,N],[12,"type_","","",51,N],[12,"code","","",51,N],[12,"value","","",51,N],[3,"input_id","","",N,N],[12,"bustype","","",52,N],[12,"vendor","","",52,N],[12,"product","","",52,N],[12,"version","","",52,N],[3,"input_absinfo","","",N,N],[12,"value","","",53,N],[12,"minimum","","",53,N],[12,"maximum","","",53,N],[12,"fuzz","","",53,N],[12,"flat","","",53,N],[12,"resolution","","",53,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",54,N],[12,"len","","",54,N],[12,"index","","",54,N],[12,"keycode","","",54,N],[12,"scancode","","",54,N],[3,"input_mask","","",N,N],[12,"type_","","",55,N],[12,"codes_size","","",55,N],[12,"codes_ptr","","",55,N],[3,"ff_replay","","",N,N],[12,"length","","",56,N],[12,"delay","","",56,N],[3,"ff_trigger","","",N,N],[12,"button","","",57,N],[12,"interval","","",57,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",58,N],[12,"attack_level","","",58,N],[12,"fade_length","","",58,N],[12,"fade_level","","",58,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",59,N],[12,"envelope","","",59,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",60,N],[12,"end_level","","",60,N],[12,"envelope","","",60,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",61,N],[12,"left_saturation","","",61,N],[12,"right_coeff","","",61,N],[12,"left_coeff","","",61,N],[12,"deadband","","",61,N],[12,"center","","",61,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",62,N],[12,"period","","",62,N],[12,"magnitude","","",62,N],[12,"offset","","",62,N],[12,"phase","","",62,N],[12,"envelope","","",62,N],[12,"custom_len","","",62,N],[12,"custom_data","","",62,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",63,N],[12,"weak_magnitude","","",63,N],[3,"ff_effect","","",N,N],[12,"type_","","",64,N],[12,"id","","",64,N],[12,"direction","","",64,N],[12,"trigger","","",64,N],[12,"replay","","",64,N],[12,"u","","",64,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",65,N],[12,"dlpi_name","","",65,N],[12,"dlpi_phdr","","",65,N],[12,"dlpi_phnum","","",65,N],[12,"dlpi_adds","","",65,N],[12,"dlpi_subs","","",65,N],[12,"dlpi_tls_modid","","",65,N],[12,"dlpi_tls_data","","",65,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",66,N],[12,"p_offset","","",66,N],[12,"p_vaddr","","",66,N],[12,"p_paddr","","",66,N],[12,"p_filesz","","",66,N],[12,"p_memsz","","",66,N],[12,"p_flags","","",66,N],[12,"p_align","","",66,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",67,N],[12,"p_flags","","",67,N],[12,"p_offset","","",67,N],[12,"p_vaddr","","",67,N],[12,"p_paddr","","",67,N],[12,"p_filesz","","",67,N],[12,"p_memsz","","",67,N],[12,"p_align","","",67,N],[3,"ucred","","",N,N],[12,"pid","","",68,N],[12,"uid","","",68,N],[12,"gid","","",68,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",69,N],[12,"mnt_dir","","",69,N],[12,"mnt_type","","",69,N],[12,"mnt_opts","","",69,N],[12,"mnt_freq","","",69,N],[12,"mnt_passno","","",69,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",70,N],[12,"version","","",70,N],[12,"reserved","","",70,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",71,N],[12,"ipi6_ifindex","","",71,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",72,N],[12,"aio_lio_opcode","","",72,N],[12,"aio_reqprio","","",72,N],[12,"aio_buf","","",72,N],[12,"aio_nbytes","","",72,N],[12,"aio_sigevent","","",72,N],[12,"aio_offset","","",72,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",73,N],[12,"e_exit","","",73,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",74,N],[12,"tv_usec","","",74,N],[3,"utmpx","","",N,N],[12,"ut_type","","",75,N],[12,"ut_pid","","",75,N],[12,"ut_line","","",75,N],[12,"ut_id","","",75,N],[12,"ut_user","","",75,N],[12,"ut_host","","",75,N],[12,"ut_exit","","",75,N],[12,"ut_session","","",75,N],[12,"ut_tv","","",75,N],[12,"ut_addr_v6","","",75,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",76,N],[12,"sa_mask","","",76,N],[12,"sa_flags","","",76,N],[12,"sa_restorer","","",76,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",77,N],[12,"ss_flags","","",77,N],[12,"ss_size","","",77,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",78,N],[12,"si_errno","","",78,N],[12,"si_code","","",78,N],[12,"_pad","","",78,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",79,N],[12,"gl_pathv","","",79,N],[12,"gl_offs","","",79,N],[12,"gl_flags","","",79,N],[3,"statfs","","",N,N],[12,"f_type","","",80,N],[12,"f_bsize","","",80,N],[12,"f_blocks","","",80,N],[12,"f_bfree","","",80,N],[12,"f_bavail","","",80,N],[12,"f_files","","",80,N],[12,"f_ffree","","",80,N],[12,"f_fsid","","",80,N],[12,"f_namelen","","",80,N],[12,"f_frsize","","",80,N],[3,"msghdr","","",N,N],[12,"msg_name","","",81,N],[12,"msg_namelen","","",81,N],[12,"msg_iov","","",81,N],[12,"msg_iovlen","","",81,N],[12,"msg_control","","",81,N],[12,"msg_controllen","","",81,N],[12,"msg_flags","","",81,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",82,N],[12,"cmsg_level","","",82,N],[12,"cmsg_type","","",82,N],[3,"termios","","",N,N],[12,"c_iflag","","",83,N],[12,"c_oflag","","",83,N],[12,"c_cflag","","",83,N],[12,"c_lflag","","",83,N],[12,"c_line","","",83,N],[12,"c_cc","","",83,N],[12,"c_ispeed","","",83,N],[12,"c_ospeed","","",83,N],[3,"flock","","",N,N],[12,"l_type","","",84,N],[12,"l_whence","","",84,N],[12,"l_start","","",84,N],[12,"l_len","","",84,N],[12,"l_pid","","",84,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",85,N],[12,"ordblks","","",85,N],[12,"smblks","","",85,N],[12,"hblks","","",85,N],[12,"hblkhd","","",85,N],[12,"usmblks","","",85,N],[12,"fsmblks","","",85,N],[12,"uordblks","","",85,N],[12,"fordblks","","",85,N],[12,"keepcost","","",85,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",86,N],[12,"nlmsg_type","","",86,N],[12,"nlmsg_flags","","",86,N],[12,"nlmsg_seq","","",86,N],[12,"nlmsg_pid","","",86,N],[3,"nlmsgerr","","",N,N],[12,"error","","",87,N],[12,"msg","","",87,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",88,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",89,N],[12,"nm_block_nr","","",89,N],[12,"nm_frame_size","","",89,N],[12,"nm_frame_nr","","",89,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",90,N],[12,"nm_len","","",90,N],[12,"nm_group","","",90,N],[12,"nm_pid","","",90,N],[12,"nm_uid","","",90,N],[12,"nm_gid","","",90,N],[3,"nlattr","","",N,N],[12,"nla_len","","",91,N],[12,"nla_type","","",91,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",92,N],[12,"rt_dst","","",92,N],[12,"rt_gateway","","",92,N],[12,"rt_genmask","","",92,N],[12,"rt_flags","","",92,N],[12,"rt_pad2","","",92,N],[12,"rt_pad3","","",92,N],[12,"rt_tos","","",92,N],[12,"rt_class","","",92,N],[12,"rt_pad4","","",92,N],[12,"rt_metric","","",92,N],[12,"rt_dev","","",92,N],[12,"rt_mtu","","",92,N],[12,"rt_window","","",92,N],[12,"rt_irtt","","",92,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",93,N],[12,"loads","","",93,N],[12,"totalram","","",93,N],[12,"freeram","","",93,N],[12,"sharedram","","",93,N],[12,"bufferram","","",93,N],[12,"totalswap","","",93,N],[12,"freeswap","","",93,N],[12,"procs","","",93,N],[12,"pad","","",93,N],[12,"totalhigh","","",93,N],[12,"freehigh","","",93,N],[12,"mem_unit","","",93,N],[12,"_f","","",93,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",94,N],[12,"msg_stime","","",94,N],[12,"msg_rtime","","",94,N],[12,"msg_ctime","","",94,N],[12,"msg_qnum","","",94,N],[12,"msg_qbytes","","",94,N],[12,"msg_lspid","","",94,N],[12,"msg_lrpid","","",94,N],[3,"stat","","",N,N],[12,"st_dev","","",95,N],[12,"st_ino","","",95,N],[12,"st_nlink","","",95,N],[12,"st_mode","","",95,N],[12,"st_uid","","",95,N],[12,"st_gid","","",95,N],[12,"st_rdev","","",95,N],[12,"st_size","","",95,N],[12,"st_blksize","","",95,N],[12,"st_blocks","","",95,N],[12,"st_atime","","",95,N],[12,"st_atime_nsec","","",95,N],[12,"st_mtime","","",95,N],[12,"st_mtime_nsec","","",95,N],[12,"st_ctime","","",95,N],[12,"st_ctime_nsec","","",95,N],[3,"stat64","","",N,N],[12,"st_dev","","",96,N],[12,"st_ino","","",96,N],[12,"st_nlink","","",96,N],[12,"st_mode","","",96,N],[12,"st_uid","","",96,N],[12,"st_gid","","",96,N],[12,"st_rdev","","",96,N],[12,"st_size","","",96,N],[12,"st_blksize","","",96,N],[12,"st_blocks","","",96,N],[12,"st_atime","","",96,N],[12,"st_atime_nsec","","",96,N],[12,"st_mtime","","",96,N],[12,"st_mtime_nsec","","",96,N],[12,"st_ctime","","",96,N],[12,"st_ctime_nsec","","",96,N],[3,"statfs64","","",N,N],[12,"f_type","","",97,N],[12,"f_bsize","","",97,N],[12,"f_blocks","","",97,N],[12,"f_bfree","","",97,N],[12,"f_bavail","","",97,N],[12,"f_files","","",97,N],[12,"f_ffree","","",97,N],[12,"f_fsid","","",97,N],[12,"f_namelen","","",97,N],[12,"f_frsize","","",97,N],[12,"f_flags","","",97,N],[12,"f_spare","","",97,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",98,N],[12,"f_frsize","","",98,N],[12,"f_blocks","","",98,N],[12,"f_bfree","","",98,N],[12,"f_bavail","","",98,N],[12,"f_files","","",98,N],[12,"f_ffree","","",98,N],[12,"f_favail","","",98,N],[12,"f_fsid","","",98,N],[12,"f_flag","","",98,N],[12,"f_namemax","","",98,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",99,N],[12,"exponent","","",99,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",100,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",101,N],[12,"swd","","",101,N],[12,"ftw","","",101,N],[12,"fop","","",101,N],[12,"rip","","",101,N],[12,"rdp","","",101,N],[12,"mxcsr","","",101,N],[12,"mxcr_mask","","",101,N],[12,"_st","","",101,N],[12,"_xmm","","",101,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",102,N],[12,"swd","","",102,N],[12,"ftw","","",102,N],[12,"fop","","",102,N],[12,"rip","","",102,N],[12,"rdp","","",102,N],[12,"mxcsr","","",102,N],[12,"mxcr_mask","","",102,N],[12,"st_space","","",102,N],[12,"xmm_space","","",102,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",103,N],[12,"r14","","",103,N],[12,"r13","","",103,N],[12,"r12","","",103,N],[12,"rbp","","",103,N],[12,"rbx","","",103,N],[12,"r11","","",103,N],[12,"r10","","",103,N],[12,"r9","","",103,N],[12,"r8","","",103,N],[12,"rax","","",103,N],[12,"rcx","","",103,N],[12,"rdx","","",103,N],[12,"rsi","","",103,N],[12,"rdi","","",103,N],[12,"orig_rax","","",103,N],[12,"rip","","",103,N],[12,"cs","","",103,N],[12,"eflags","","",103,N],[12,"rsp","","",103,N],[12,"ss","","",103,N],[12,"fs_base","","",103,N],[12,"gs_base","","",103,N],[12,"ds","","",103,N],[12,"es","","",103,N],[12,"fs","","",103,N],[12,"gs","","",103,N],[3,"user","","",N,N],[12,"regs","","",104,N],[12,"u_fpvalid","","",104,N],[12,"i387","","",104,N],[12,"u_tsize","","",104,N],[12,"u_dsize","","",104,N],[12,"u_ssize","","",104,N],[12,"start_code","","",104,N],[12,"start_stack","","",104,N],[12,"signal","","",104,N],[12,"u_ar0","","",104,N],[12,"u_fpstate","","",104,N],[12,"magic","","",104,N],[12,"u_comm","","",104,N],[12,"u_debugreg","","",104,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",105,N],[12,"fpregs","","",105,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",106,N],[12,"uc_link","","",106,N],[12,"uc_stack","","",106,N],[12,"uc_mcontext","","",106,N],[12,"uc_sigmask","","",106,N],[3,"ipc_perm","","",N,N],[12,"__key","","",107,N],[12,"uid","","",107,N],[12,"gid","","",107,N],[12,"cuid","","",107,N],[12,"cgid","","",107,N],[12,"mode","","",107,N],[12,"__seq","","",107,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",108,N],[12,"shm_segsz","","",108,N],[12,"shm_atime","","",108,N],[12,"shm_dtime","","",108,N],[12,"shm_ctime","","",108,N],[12,"shm_cpid","","",108,N],[12,"shm_lpid","","",108,N],[12,"shm_nattch","","",108,N],[3,"termios2","","",N,N],[12,"c_iflag","","",109,N],[12,"c_oflag","","",109,N],[12,"c_cflag","","",109,N],[12,"c_lflag","","",109,N],[12,"c_line","","",109,N],[12,"c_cc","","",109,N],[12,"c_ispeed","","",109,N],[12,"c_ospeed","","",109,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",110,N],[12,"f_frsize","","",110,N],[12,"f_blocks","","",110,N],[12,"f_bfree","","",110,N],[12,"f_bavail","","",110,N],[12,"f_files","","",110,N],[12,"f_ffree","","",110,N],[12,"f_favail","","",110,N],[12,"f_fsid","","",110,N],[12,"f_flag","","",110,N],[12,"f_namemax","","",110,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"fdopendir","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",95,[[["self"]],["stat"]]],[11,"clone","","",96,[[["self"]],["stat64"]]],[11,"clone","","",97,[[["self"]],["statfs64"]]],[11,"clone","","",98,[[["self"]],["statvfs64"]]],[11,"clone","","",111,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",99,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",100,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",101,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",102,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",103,[[["self"]],["user_regs_struct"]]],[11,"clone","","",104,[[["self"]],["user"]]],[11,"clone","","",105,[[["self"]],["mcontext_t"]]],[11,"clone","","",106,[[["self"]],["ucontext_t"]]],[11,"clone","","",107,[[["self"]],["ipc_perm"]]],[11,"clone","","",108,[[["self"]],["shmid_ds"]]],[11,"clone","","",109,[[["self"]],["termios2"]]],[11,"clone","","",110,[[["self"]],["statvfs"]]],[11,"clone","","",112,[[["self"]],["sigset_t"]]],[11,"clone","","",93,[[["self"]],["sysinfo"]]],[11,"clone","","",94,[[["self"]],["msqid_ds"]]],[11,"clone","","",72,[[["self"]],["aiocb"]]],[11,"clone","","",73,[[["self"]],["__exit_status"]]],[11,"clone","","",74,[[["self"]],["__timeval"]]],[11,"clone","","",75,[[["self"]],["utmpx"]]],[11,"clone","","",76,[[["self"]],["sigaction"]]],[11,"clone","","",77,[[["self"]],["stack_t"]]],[11,"clone","","",78,[[["self"]],["siginfo_t"]]],[11,"clone","","",79,[[["self"]],["glob64_t"]]],[11,"clone","","",80,[[["self"]],["statfs"]]],[11,"clone","","",81,[[["self"]],["msghdr"]]],[11,"clone","","",82,[[["self"]],["cmsghdr"]]],[11,"clone","","",83,[[["self"]],["termios"]]],[11,"clone","","",84,[[["self"]],["flock"]]],[11,"clone","","",113,[[["self"]],["sem_t"]]],[11,"clone","","",85,[[["self"]],["mallinfo"]]],[11,"clone","","",86,[[["self"]],["nlmsghdr"]]],[11,"clone","","",87,[[["self"]],["nlmsgerr"]]],[11,"clone","","",88,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",89,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",90,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",91,[[["self"]],["nlattr"]]],[11,"clone","","",92,[[["self"]],["rtentry"]]],[11,"clone","","",37,[[["self"]],["dirent"]]],[11,"clone","","",38,[[["self"]],["dirent64"]]],[11,"clone","","",39,[[["self"]],["rlimit64"]]],[11,"clone","","",40,[[["self"]],["glob_t"]]],[11,"clone","","",114,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",115,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",116,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",117,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",118,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",119,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",41,[[["self"]],["passwd"]]],[11,"clone","","",42,[[["self"]],["spwd"]]],[11,"clone","","",43,[[["self"]],["dqblk"]]],[11,"clone","","",44,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",45,[[["self"]],["itimerspec"]]],[11,"clone","","",120,[[["self"]],["fsid_t"]]],[11,"clone","","",46,[[["self"]],["mq_attr"]]],[11,"clone","","",121,[[["self"]],["cpu_set_t"]]],[11,"clone","","",47,[[["self"]],["if_nameindex"]]],[11,"clone","","",48,[[["self"]],["msginfo"]]],[11,"clone","","",49,[[["self"]],["mmsghdr"]]],[11,"clone","","",50,[[["self"]],["sembuf"]]],[11,"clone","","",51,[[["self"]],["input_event"]]],[11,"clone","","",52,[[["self"]],["input_id"]]],[11,"clone","","",53,[[["self"]],["input_absinfo"]]],[11,"clone","","",54,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",55,[[["self"]],["input_mask"]]],[11,"clone","","",56,[[["self"]],["ff_replay"]]],[11,"clone","","",57,[[["self"]],["ff_trigger"]]],[11,"clone","","",58,[[["self"]],["ff_envelope"]]],[11,"clone","","",59,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",60,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",61,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",62,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",63,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",64,[[["self"]],["ff_effect"]]],[11,"clone","","",65,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",66,[[["self"]],["elf32_phdr"]]],[11,"clone","","",67,[[["self"]],["elf64_phdr"]]],[11,"clone","","",68,[[["self"]],["ucred"]]],[11,"clone","","",69,[[["self"]],["mntent"]]],[11,"clone","","",122,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",123,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",70,[[["self"]],["genlmsghdr"]]],[11,"clone","","",71,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",124,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",125,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["libflate"]={"doc":"A Rust implementation of DEFLATE algorithm and related formats (ZLIB, GZIP).","items":[[0,"deflate","libflate","The encoder and decoder of the DEFLATE format and algorithm.",N,N],[3,"Decoder","libflate::deflate","DEFLATE decoder.",N,N],[3,"EncodeOptions","","Options for a DEFLATE encoder.",N,N],[3,"Encoder","","DEFLATE encoder.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new decoder instance.",0,[[["r"]],["self"]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",0,[[["self"]],["r"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",0,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",0,[[["self"]],["r"]]],[11,"read","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["encodeoptions"]]],[11,"eq","","",1,[[["self"],["encodeoptions"]],["bool"]]],[11,"ne","","",1,[[["self"],["encodeoptions"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["self"]]],[11,"new","","Makes a default instance.",1,[[],["self"]]],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",1,[[["e"]],["self"]]],[11,"no_compression","","Disables LZ77 compression.",1,[[["self"]],["self"]]],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",1,[[["self"],["usize"]],["self"]]],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",1,[[["self"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new encoder instance.",2,[[["w"]],["self"]]],[11,"with_options","","Makes a new encoder instance with specified options.",2,[[["w"],["encodeoptions"]],["self"]]],[11,"finish","","Flushes internal buffer and returns the inner stream.",2,[[["self"]],["finish",["error"]]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",2,[[["self"]],["w"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",2,[[["self"]],["w"]]],[11,"into_inner","","Unwraps the `Encoder`, returning the inner stream.",2,[[["self"]],["w"]]],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"complete","","",2,[[["self"]],["result"]]],[17,"DEFAULT_BLOCK_SIZE","","The default size of a DEFLATE block.",N,N],[0,"finish","libflate","`Finish` and related types.",N,N],[3,"Finish","libflate::finish","`Finish` is a type that represents a value which may have an error occurred during the computation.",N,N],[3,"AutoFinish","","A wrapper struct that completes the processing of the underlying instance when drops.",N,N],[3,"AutoFinishUnchecked","","A wrapper struct that completes the processing of the underlying instance when drops.",N,N],[8,"Complete","","This trait allows to complete an I/O related processing.",N,N],[10,"complete","","Completes the current processing and returns the result.",3,[[["self"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["finish"]]],[11,"clone","","",4,[[["self"]],["finish"]]],[11,"partial_cmp","","",4,[[["self"],["finish"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["finish"]],["bool"]]],[11,"le","","",4,[[["self"],["finish"]],["bool"]]],[11,"gt","","",4,[[["self"],["finish"]],["bool"]]],[11,"ge","","",4,[[["self"],["finish"]],["bool"]]],[11,"cmp","","",4,[[["self"],["finish"]],["ordering"]]],[11,"eq","","",4,[[["self"],["finish"]],["bool"]]],[11,"ne","","",4,[[["self"],["finish"]],["bool"]]],[11,"hash","","",4,N],[11,"new","","Makes a new instance.",4,[[["t"],["option"]],["self"]]],[11,"unwrap","","Unwraps the instance.",4,N],[11,"into_result","","Converts from `Finish<T, E>` to `Result<T, E>`.",4,[[["self"]],["result"]]],[11,"as_result","","Converts from `Finish<T, E>` to `Result<&T, &E>`.",4,[[["self"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new `AutoFinish` instance.",5,[[["t"]],["self"]]],[11,"into_inner","","Unwraps this `AutoFinish` instance, returning the underlying instance.",5,[[["self"]],["t"]]],[11,"drop","","",5,[[["self"]]]],[11,"deref","","",5,N],[11,"deref_mut","","",5,N],[11,"write","","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new `AutoFinishUnchecked` instance.",6,[[["t"]],["self"]]],[11,"into_inner","","Unwraps this `AutoFinishUnchecked` instance, returning the underlying instance.",6,[[["self"]],["t"]]],[11,"drop","","",6,[[["self"]]]],[11,"deref","","",6,N],[11,"deref_mut","","",6,N],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[0,"gzip","libflate","The encoder and decoder of the GZIP format.",N,N],[3,"HeaderBuilder","libflate::gzip","GZIP header builder.",N,N],[3,"Header","","GZIP Header.",N,N],[3,"ExtraField","","Extra field of a GZIP header.",N,N],[12,"id","","ID of the extra field.",7,N],[12,"data","","Data of the extra field.",7,N],[3,"EncodeOptions","","Options for a GZIP encoder.",N,N],[3,"Encoder","","GZIP encoder.",N,N],[3,"Decoder","","GZIP decoder.",N,N],[3,"MultiDecoder","","A decoder that decodes all members in a GZIP stream.",N,N],[4,"CompressionLevel","","Compression levels defined by the GZIP format.",N,N],[13,"Fastest","","Compressor used fastest algorithm.",8,N],[13,"Slowest","","Compressor used maximum compression, slowest algorithm.",8,N],[13,"Unknown","","No information about compression method.",8,N],[4,"Os","","OS type.",N,N],[13,"Fat","","FAT filesystem (MS-DOS, OS/2, NT/Win32)",9,N],[13,"Amiga","","Amiga",9,N],[13,"Vms","","VMS (or OpenVMS)",9,N],[13,"Unix","","Unix",9,N],[13,"VmCms","","VM/CMS",9,N],[13,"AtariTos","","Atari TOS",9,N],[13,"Hpfs","","HPFS filesystem (OS/2, NT)",9,N],[13,"Macintosh","","Macintosh",9,N],[13,"ZSystem","","Z-System",9,N],[13,"CpM","","CP/M",9,N],[13,"Tops20","","TOPS-20",9,N],[13,"Ntfs","","NTFS filesystem (NT)",9,N],[13,"Qdos","","QDOS",9,N],[13,"AcornRiscos","","Acorn RISCOS",9,N],[13,"Unknown","","Unknown",9,N],[13,"Undefined","","Undefined value in RFC-1952",9,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["compressionlevel"]]],[11,"eq","","",8,[[["self"],["compressionlevel"]],["bool"]]],[11,"hash","","",8,N],[11,"from","","",8,[[["compressionlevel"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["headerbuilder"]]],[11,"new","","Makes a new builder instance.",10,[[],["self"]]],[11,"modification_time","","Sets the modification time (UNIX timestamp).",10,[[["self"],["u32"]],["self"]]],[11,"os","","Sets the OS type.",10,[[["self"],["os"]],["self"]]],[11,"text","","Indicates the encoding data is a ASCII text.",10,[[["self"]],["self"]]],[11,"verify","","Specifies toe verify header bytes using CRC-16.",10,[[["self"]],["self"]]],[11,"extra_field","","Sets the extra field.",10,[[["self"],["extrafield"]],["self"]]],[11,"filename","","Sets the file name.",10,[[["self"],["cstring"]],["self"]]],[11,"comment","","Sets the comment.",10,[[["self"],["cstring"]],["self"]]],[11,"finish","","Returns the result header.",10,[[["self"]],["header"]]],[11,"default","","",10,[[],["self"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["header"]]],[11,"modification_time","","Returns the modification time (UNIX timestamp).",11,[[["self"]],["u32"]]],[11,"compression_level","","Returns the compression level.",11,[[["self"]],["compressionlevel"]]],[11,"os","","Returns the OS type.",11,[[["self"]],["os"]]],[11,"is_text","","Returns `true` if the stream is probably ASCII text, `false` otherwise.",11,[[["self"]],["bool"]]],[11,"is_verified","","Returns `true` if the header bytes is verified by CRC-16, `false` otherwise.",11,[[["self"]],["bool"]]],[11,"extra_field","","Returns the extra field.",11,[[["self"]],["option",["extrafield"]]]],[11,"filename","","Returns the file name.",11,[[["self"]],["option",["cstring"]]]],[11,"comment","","Returns the comment.",11,[[["self"]],["option",["cstring"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["extrafield"]]],[11,"eq","","",7,[[["self"],["extrafield"]],["bool"]]],[11,"ne","","",7,[[["self"],["extrafield"]],["bool"]]],[11,"hash","","",7,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["os"]]],[11,"eq","","",9,[[["self"],["os"]],["bool"]]],[11,"ne","","",9,[[["self"],["os"]],["bool"]]],[11,"hash","","",9,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"default","","",12,[[],["self"]]],[11,"new","","Makes a default instance.",12,[[],["self"]]],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",12,[[["e"]],["self"]]],[11,"no_compression","","Disables LZ77 compression.",12,[[["self"]],["self"]]],[11,"header","","Sets the GZIP header which will be written to the output stream.",12,[[["self"],["header"]],["self"]]],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",12,[[["self"],["usize"]],["self"]]],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",12,[[["self"]],["self"]]],[11,"new","","Makes a new encoder instance.",13,[[["w"]],["result"]]],[11,"with_options","","Makes a new encoder instance with specified options.",13,[[["w"],["encodeoptions"]],["result"]]],[11,"header","","Returns the header of the GZIP stream.",13,[[["self"]],["header"]]],[11,"finish","","Writes the GZIP trailer and returns the inner stream.",13,[[["self"]],["finish",["error"]]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",13,[[["self"]],["w"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",13,[[["self"]],["w"]]],[11,"into_inner","","Unwraps the `Encoder`, returning the inner stream.",13,[[["self"]],["w"]]],[11,"write","","",13,N],[11,"flush","","",13,[[["self"]],["result"]]],[11,"complete","","",13,[[["self"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new decoder instance.",14,[[["r"]],["result"]]],[11,"header","","Returns the header of the GZIP stream.",14,[[["self"]],["header"]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",14,[[["self"]],["r"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",14,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",14,[[["self"]],["r"]]],[11,"read","","",14,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new decoder instance.",15,[[["r"]],["result"]]],[11,"header","","Returns the header of the current member in the GZIP stream.",15,[[["self"]],["header"]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",15,[[["self"]],["r"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",15,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `MultiDecoder`, returning the underlying reader.",15,[[["self"]],["r"]]],[11,"read","","",15,N],[0,"lz77","libflate","The interface and implementations of LZ77 compression algorithm.",N,N],[3,"DefaultLz77Encoder","libflate::lz77","A `Lz77Encode` implementation used by default.",N,N],[3,"NoCompressionLz77Encoder","","A no compression implementation of `LZ77Encode` trait.",N,N],[4,"Code","","A LZ77 encoded data.",N,N],[13,"Literal","","Literal byte.",16,N],[13,"Pointer","","Backward pointer to shared data.",16,N],[12,"length","libflate::lz77::Code","Length of the shared data. The values must be limited to `MAX_LENGTH`.",16,N],[12,"backward_distance","","Distance between current position and start position of the shared data. The values must be limited to `MAX_DISTANCE`.",16,N],[4,"CompressionLevel","libflate::lz77","Compression level.",N,N],[13,"None","","No compression.",17,N],[13,"Fast","","Best speed.",17,N],[13,"Balance","","Balanced between speed and size.",17,N],[13,"Best","","Best compression.",17,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new encoder instance.",18,[[],["self"]]],[11,"with_window_size","","Makes a new encoder instance with specified window size.",18,[[["u16"]],["self"]]],[11,"default","","",18,[[],["self"]]],[11,"encode","","",18,N],[11,"flush","","",18,[[["self"],["s"]]]],[11,"window_size","","",18,[[["self"]],["u16"]]],[17,"MAX_LENGTH","","Maximum length of sharable bytes in a pointer.",N,N],[17,"MAX_DISTANCE","","Maximum backward distance of a pointer.",N,N],[17,"MAX_WINDOW_SIZE","","Maximum size of a sliding window.",N,N],[8,"Sink","","The `Sink` trait represents a consumer of LZ77 encoded data.",N,N],[10,"consume","","Consumes a LZ77 encoded `Code`.",19,[[["self"],["code"]]]],[8,"Lz77Encode","","The `LZ77Encode` trait defines the interface of LZ77 encoding algorithm.",N,N],[10,"encode","","Encodes a buffer and writes result LZ77 codes to `sink`.",20,N],[10,"flush","","Flushes the encoder, ensuring that all intermediately buffered codes are consumed by `sink`.",20,[[["self"],["s"]]]],[11,"compression_level","","Returns the compression level of the encoder.",20,[[["self"]],["compressionlevel"]]],[11,"window_size","","Returns the window size of the encoder.",20,[[["self"]],["u16"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["code"]]],[11,"eq","","",16,[[["self"],["code"]],["bool"]]],[11,"ne","","",16,[[["self"],["code"]],["bool"]]],[11,"hash","","",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["compressionlevel"]]],[11,"eq","","",17,[[["self"],["compressionlevel"]],["bool"]]],[11,"hash","","",17,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"default","","",21,[[],["nocompressionlz77encoder"]]],[11,"new","","Makes a new encoder instance.",21,[[],["self"]]],[11,"encode","","",21,N],[11,"flush","","",21,[[["self"],["s"]]]],[11,"compression_level","","",21,[[["self"]],["compressionlevel"]]],[0,"non_blocking","libflate","Implementations that can handle non-blocking I/O.",N,N],[0,"deflate","libflate::non_blocking","The decoder of the DEFLATE format and algorithm.",N,N],[3,"Decoder","libflate::non_blocking::deflate","DEFLATE decoder which supports non-blocking I/O.",N,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new decoder instance.",22,[[["r"]],["self"]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",22,[[["self"]],["r"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",22,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",22,[[["self"]],["r"]]],[11,"read","","",22,N],[0,"gzip","libflate::non_blocking","The encoder and decoder of the GZIP format.",N,N],[3,"Decoder","libflate::non_blocking::gzip","GZIP decoder which supports non-blocking I/O.",N,N],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new decoder instance.",23,[[["r"]],["self"]]],[11,"header","","Returns the header of the GZIP stream.",23,[[["self"]],["result",["header"]]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",23,[[["self"]],["r"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",23,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",23,[[["self"]],["r"]]],[11,"read","","",23,N],[0,"zlib","libflate::non_blocking","The encoder and decoder of the ZLIB format.",N,N],[3,"Decoder","libflate::non_blocking::zlib","ZLIB decoder which supports non-blocking I/O.",N,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new decoder instance.",24,[[["r"]],["self"]]],[11,"header","","Returns the header of the ZLIB stream.",24,[[["self"]],["result",["header"]]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",24,[[["self"]],["r"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",24,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",24,[[["self"]],["r"]]],[11,"read","","",24,N],[0,"zlib","libflate","The encoder and decoder of the ZLIB format.",N,N],[3,"Header","libflate::zlib","ZLIB header.",N,N],[3,"Decoder","","ZLIB decoder.",N,N],[3,"EncodeOptions","","Options for a ZLIB encoder.",N,N],[3,"Encoder","","ZLIB encoder.",N,N],[4,"CompressionLevel","","Compression levels defined by the ZLIB format.",N,N],[13,"Fastest","","Compressor used fastest algorithm.",25,N],[13,"Fast","","Compressor used fast algorithm.",25,N],[13,"Default","","Compressor used default algorithm.",25,N],[13,"Slowest","","Compressor used maximum compression, slowest algorithm.",25,N],[4,"Lz77WindowSize","","LZ77 Window sizes defined by the ZLIB format.",N,N],[13,"B256","","256 bytes",26,N],[13,"B512","","512 btyes",26,N],[13,"KB1","","1 kilobyte",26,N],[13,"KB2","","2 kilobytes",26,N],[13,"KB4","","4 kitobytes",26,N],[13,"KB8","","8 kitobytes",26,N],[13,"KB16","","16 kitobytes",26,N],[13,"KB32","","32 kitobytes",26,N],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["compressionlevel"]]],[11,"partial_cmp","","",25,[[["self"],["compressionlevel"]],["option",["ordering"]]]],[11,"cmp","","",25,[[["self"],["compressionlevel"]],["ordering"]]],[11,"eq","","",25,[[["self"],["compressionlevel"]],["bool"]]],[11,"hash","","",25,N],[11,"from","","",25,[[["compressionlevel"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["lz77windowsize"]]],[11,"partial_cmp","","",26,[[["self"],["lz77windowsize"]],["option",["ordering"]]]],[11,"cmp","","",26,[[["self"],["lz77windowsize"]],["ordering"]]],[11,"eq","","",26,[[["self"],["lz77windowsize"]],["bool"]]],[11,"hash","","",26,N],[11,"from_u16","","Converts from `u16` to Lz77WindowSize`.",26,[[["u16"]],["self"]]],[11,"to_u16","","Converts from `Lz77WindowSize` to `u16`.",26,[[["self"]],["u16"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["header"]]],[11,"eq","","",27,[[["self"],["header"]],["bool"]]],[11,"ne","","",27,[[["self"],["header"]],["bool"]]],[11,"hash","","",27,N],[11,"window_size","","Returns the LZ77 window size stored in the header.",27,[[["self"]],["lz77windowsize"]]],[11,"compression_level","","Returns the compression level stored in the header.",27,[[["self"]],["compressionlevel"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new decoder instance.",28,[[["r"]],["result"]]],[11,"header","","Returns the header of the ZLIB stream.",28,[[["self"]],["header"]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",28,[[["self"]],["r"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",28,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",28,[[["self"]],["r"]]],[11,"read","","",28,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"default","","",29,[[],["self"]]],[11,"new","","Makes a default instance.",29,[[],["self"]]],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",29,[[["e"]],["self"]]],[11,"no_compression","","Disables LZ77 compression.",29,[[["self"]],["self"]]],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",29,[[["self"],["usize"]],["self"]]],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",29,[[["self"]],["self"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new encoder instance.",30,[[["w"]],["result"]]],[11,"with_options","","Makes a new encoder instance with specified options.",30,[[["w"],["encodeoptions"]],["result"]]],[11,"header","","Returns the header of the ZLIB stream.",30,[[["self"]],["header"]]],[11,"finish","","Writes the ZLIB trailer and returns the inner stream.",30,[[["self"]],["finish",["error"]]]],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",30,[[["self"]],["w"]]],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",30,[[["self"]],["w"]]],[11,"into_inner","","Unwraps the `Encoder`, returning the inner stream.",30,[[["self"]],["w"]]],[11,"write","","",30,N],[11,"flush","","",30,[[["self"]],["result"]]],[11,"complete","","",30,[[["self"]],["result"]]]],"paths":[[3,"Decoder"],[3,"EncodeOptions"],[3,"Encoder"],[8,"Complete"],[3,"Finish"],[3,"AutoFinish"],[3,"AutoFinishUnchecked"],[3,"ExtraField"],[4,"CompressionLevel"],[4,"Os"],[3,"HeaderBuilder"],[3,"Header"],[3,"EncodeOptions"],[3,"Encoder"],[3,"Decoder"],[3,"MultiDecoder"],[4,"Code"],[4,"CompressionLevel"],[3,"DefaultLz77Encoder"],[8,"Sink"],[8,"Lz77Encode"],[3,"NoCompressionLz77Encoder"],[3,"Decoder"],[3,"Decoder"],[3,"Decoder"],[4,"CompressionLevel"],[4,"Lz77WindowSize"],[3,"Header"],[3,"Decoder"],[3,"EncodeOptions"],[3,"Encoder"]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",N,N],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",N,N],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",N,N],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",N,N],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",N,N],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",N,N],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",N,N],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",N,N],[13,"Occupied","","An occupied Entry.",0,N],[13,"Vacant","","A vacant Entry.",0,N],[11,"new","","Creates a linked hash map.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,[[["usize"],["s"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,[[["self"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["k"]],["entry"]]],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,[[["self"]],["entries"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,[[["self"],["k"],["v"]],["option"]]],[11,"contains_key","","Checks if the map contains the given key.",1,[[["self"],["q"]],["bool"]]],[11,"get","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,[[["self"],["q"]],["option"]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"pop_front","","Removes the first entry.",1,[[["self"]],["option"]]],[11,"front","","Gets the first entry.",1,[[["self"]],["option"]]],[11,"pop_back","","Removes the last entry.",1,[[["self"]],["option"]]],[11,"back","","Gets the last entry.",1,[[["self"]],["option"]]],[11,"len","","Returns the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the map is currently empty.",1,[[["self"]],["bool"]]],[11,"hasher","","Returns a reference to the map's hasher.",1,[[["self"]],["s"]]],[11,"clear","","Clears the map of all key-value pairs.",1,[[["self"]]]],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,[[["self"]],["itermut"]]],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,[[["self"]],["keys"]]],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,[[["self"]],["values"]]],[11,"index","","",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","",1,[[["self"],["q"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"drop","","",1,[[["self"]]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next","","",5,[[["self"]],["option",["occupiedentry"]]]],[11,"size_hint","","",5,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"drop","","",3,[[["self"]]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"key","","Returns the entry key",0,[[["self"]],["k"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"key","","Gets a reference to the entry key",8,[[["self"]],["k"]]],[11,"get","","Gets a reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it",8,[[["self"]],["v"]]],[11,"key","","Gets a reference to the entry key",9,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,[[["self"],["v"]],["v"]]]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",N,N],[3,"LogMetadata","","Metadata about a log message.",N,N],[3,"LogLocation","","The location of a log message.",N,N],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",N,N],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",N,N],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",N,N],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"max_log_level","","Returns the current maximum log level.",N,[[],["loglevelfilter"]]],[5,"set_logger","","Sets the global logger.",N,[[["m"]],["result",["setloggererror"]]]],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",N,[[["m"]],["result",["setloggererror"]]]],[5,"shutdown_logger","","Shuts down the global logger.",N,[[],["result",["box","shutdownloggererror"]]]],[5,"shutdown_logger_raw","","Shuts down the global logger.",N,[[],["result",["shutdownloggererror"]]]],[8,"Log","","A trait encapsulating the operations required of a logger",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["logmetadata"]],["bool"]]],[10,"log","","Logs the `LogRecord`.",2,[[["self"],["logrecord"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["loglevel"]]],[11,"eq","","",0,[[["self"],["loglevel"]],["bool"]]],[11,"eq","","",0,[[["self"],["loglevelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["loglevel"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["loglevel"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["loglevel"]]],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,[[["self"]],["loglevelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["loglevelfilter"]]],[11,"eq","","",1,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevel"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["loglevelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["loglevelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["loglevelfilter"]]],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,[[["self"]],["option",["loglevel"]]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["logmetadata"]]],[11,"location","","The location of the log directive.",3,[[["self"]],["loglocation"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"level","","The verbosity level of the message.",4,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",4,[[["self"]],["str"]]],[11,"clone","","",5,[[["self"]],["loglocation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"module_path","","The module path of the message.",5,[[["self"]],["str"]]],[11,"file","","The source file containing the message.",5,[[["self"]],["str"]]],[11,"line","","The line containing the message.",5,[[["self"]],["u32"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"get","","Gets the current maximum log level filter.",6,[[["self"]],["loglevelfilter"]]],[11,"set","","Sets the maximum log level.",6,[[["self"],["loglevelfilter"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"]={"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",N,N],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",N,N],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",N,N],[3,"Memchr2","","An iterator for Memchr2",N,N],[3,"Memchr3","","An iterator for Memchr3",N,N],[5,"memchr","","A safe interface to `memchr`.",N,N],[5,"memrchr","","A safe interface to `memrchr`.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memoffset"]={"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",N,N],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",N,N]],"paths":[]};
searchIndex["mime"]={"doc":"Mime","items":[[3,"Mime","mime","A parsed mime or media type.",N,N],[3,"Name","","A section of a `Mime`.",N,N],[3,"FromStrError","","An error when parsing a `Mime` from a string.",N,N],[3,"Params","","An iterator over the parameters of a MIME.",N,N],[17,"STAR","","",N,N],[17,"TEXT","","text",N,N],[17,"IMAGE","","image",N,N],[17,"AUDIO","","audio",N,N],[17,"VIDEO","","video",N,N],[17,"APPLICATION","","application",N,N],[17,"MULTIPART","","multipart",N,N],[17,"MESSAGE","","message",N,N],[17,"MODEL","","model",N,N],[17,"FONT","","font",N,N],[17,"PLAIN","","plain",N,N],[17,"HTML","","html",N,N],[17,"XML","","xml",N,N],[17,"JAVASCRIPT","","javascript",N,N],[17,"CSS","","css",N,N],[17,"CSV","","csv",N,N],[17,"EVENT_STREAM","","event-stream",N,N],[17,"JSON","","json",N,N],[17,"WWW_FORM_URLENCODED","","x-www-form-urlencoded",N,N],[17,"MSGPACK","","msgpack",N,N],[17,"OCTET_STREAM","","octet-stream",N,N],[17,"FORM_DATA","","form-data",N,N],[17,"PNG","","png",N,N],[17,"GIF","","gif",N,N],[17,"BMP","","bmp",N,N],[17,"JPEG","","jpeg",N,N],[17,"BASIC","","basic",N,N],[17,"MPEG","","mpeg",N,N],[17,"MP4","","mp4",N,N],[17,"OGG","","ogg",N,N],[17,"CHARSET","","charset",N,N],[17,"BOUNDARY","","boundary",N,N],[17,"UTF_8","","utf-8",N,N],[17,"STAR_STAR","","`*/*`",N,N],[17,"TEXT_STAR","","`text/*`",N,N],[17,"TEXT_PLAIN","","`text/plain`",N,N],[17,"TEXT_PLAIN_UTF_8","","`text/plain; charset=utf-8`",N,N],[17,"TEXT_HTML","","`text/html`",N,N],[17,"TEXT_HTML_UTF_8","","`text/html; charset=utf-8`",N,N],[17,"TEXT_CSS","","`text/css`",N,N],[17,"TEXT_JAVASCRIPT","","`text/javascript`",N,N],[17,"TEXT_XML","","`text/xml`",N,N],[17,"TEXT_EVENT_STREAM","","`text/event-stream`",N,N],[17,"TEXT_CSV","","`text/csv`",N,N],[17,"TEXT_CSV_UTF_8","","`text/csv; charset=utf-8`",N,N],[17,"TEXT_TAB_SEPARATED_VALUES","","`text/tab-separated-values`",N,N],[17,"TEXT_TAB_SEPARATED_VALUES_UTF_8","","`text/tab-separated-values; charset=utf-8`",N,N],[17,"IMAGE_STAR","","`image/*`",N,N],[17,"IMAGE_JPEG","","`image/jpeg`",N,N],[17,"IMAGE_GIF","","`image/gif`",N,N],[17,"IMAGE_PNG","","`image/png`",N,N],[17,"IMAGE_BMP","","`image/bmp`",N,N],[17,"IMAGE_SVG","","`image/svg+xml`",N,N],[17,"APPLICATION_JSON","","`application/json`",N,N],[17,"APPLICATION_JAVASCRIPT","","`application/javascript`",N,N],[17,"APPLICATION_JAVASCRIPT_UTF_8","","`application/javascript; charset=utf-8`",N,N],[17,"APPLICATION_WWW_FORM_URLENCODED","","`application/x-www-form-urlencoded`",N,N],[17,"APPLICATION_OCTET_STREAM","","`application/octet-stream`",N,N],[17,"APPLICATION_MSGPACK","","`application/msgpack`",N,N],[17,"MULTIPART_FORM_DATA","","`multipart/form-data`",N,N],[11,"clone","","",0,[[["self"]],["mime"]]],[11,"clone","","",1,[[["self"]],["name"]]],[11,"eq","","",1,[[["self"],["name"]],["bool"]]],[11,"ne","","",1,[[["self"],["name"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["name"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["name"]],["bool"]]],[11,"le","","",1,[[["self"],["name"]],["bool"]]],[11,"gt","","",1,[[["self"],["name"]],["bool"]]],[11,"ge","","",1,[[["self"],["name"]],["bool"]]],[11,"cmp","","",1,[[["self"],["name"]],["ordering"]]],[11,"hash","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"type_","","Get the top level media type for this `Mime`.",0,[[["self"]],["name"]]],[11,"subtype","","Get the subtype of this `Mime`.",0,[[["self"]],["name"]]],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,[[["self"]],["option",["name"]]]],[11,"get_param","","Look up a parameter by name.",0,[[["self"],["n"]],["option",["name"]]]],[11,"params","","Returns an iterator over the parameters.",0,[[["self"]],["params"]]],[11,"eq","","",0,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["mime"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["mime"]],["ordering"]]],[11,"hash","","",0,[[["self"],["t"]]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result",["mime"]]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"as_str","","Get the value of this `Name` as a string.",1,[[["self"]],["str"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"as_ref","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N]],"paths":[[3,"Mime"],[3,"Name"],[3,"FromStrError"],[3,"Params"]]};
searchIndex["mime_guess"]={"doc":"Guessing of MIME types by file extension.","items":[[3,"Mime","mime_guess","A parsed mime or media type.",N,N],[5,"guess_mime_type","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",N,[[["p"]],["mime"]]],[5,"guess_mime_type_opt","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",N,[[["p"]],["option",["mime"]]]],[5,"get_mime_type","","Get the MIME type associated with a file extension.",N,[[["str"]],["mime"]]],[5,"get_mime_type_opt","","Get the MIME type associated with a file extension.",N,[[["str"]],["option",["mime"]]]],[5,"get_mime_type_str","","Get the MIME type string associated with a file extension. Case-insensitive.",N,[[["str"]],["option",["str"]]]],[5,"get_mime_extensions","","Get a list of known extensions for a given `Mime`.",N,[[["mime"]],["option"]]],[5,"get_mime_extensions_str","","Get a list of known extensions for a MIME type string.",N,[[["str"]],["option"]]],[5,"get_extensions","","Get the extensions for a given top-level and sub-level of a MIME type (`{toplevel}/{sublevel}`).",N,[[["str"],["str"]],["option"]]],[5,"octet_stream","","Get the MIME type for `application/octet-stream` (generic binary stream)",N,[[],["mime"]]],[11,"type_","","Get the top level media type for this `Mime`.",0,[[["self"]],["name"]]],[11,"subtype","","Get the subtype of this `Mime`.",0,[[["self"]],["name"]]],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,[[["self"]],["option",["name"]]]],[11,"get_param","","Look up a parameter by name.",0,[[["self"],["n"]],["option",["name"]]]],[11,"params","","Returns an iterator over the parameters.",0,[[["self"]],["params"]]],[11,"clone","","",0,[[["self"]],["mime"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",0,[[["self"],["mime"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["mime"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["mime"]]]],[11,"hash","","",0,N],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["mime"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]]],"paths":[[3,"Mime"]]};
searchIndex["mio"]={"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",N,N],[3,"Registration","","Handle to a user space `Poll` registration.",N,N],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",N,N],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",N,N],[3,"Ready","","A set of readiness event kinds",N,N],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Events","","A collection of readiness events.",N,N],[11,"eq","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ne","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"clone","","",1,[[["self"]],["pollopt"]]],[11,"partial_cmp","","",1,[[["self"],["pollopt"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"le","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"gt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ge","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"cmp","","",1,[[["self"],["pollopt"]],["ordering"]]],[11,"empty","","Return a `PollOpt` representing no set options.",1,[[],["pollopt"]]],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,[[],["pollopt"]]],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,[[],["pollopt"]]],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,[[],["pollopt"]]],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,[[["self"]],["bool"]]],[11,"contains","","Returns true if `self` is a superset of `other`.",1,[[["self"],["pollopt"]],["bool"]]],[11,"insert","","Adds all options represented by `other` into `self`.",1,[[["self"],["pollopt"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",1,[[["self"],["pollopt"]]]],[11,"bitor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitxor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitand","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"sub","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["ready"]],["bool"]]],[11,"ne","","",2,[[["self"],["ready"]],["bool"]]],[11,"clone","","",2,[[["self"]],["ready"]]],[11,"partial_cmp","","",2,[[["self"],["ready"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["ready"]],["bool"]]],[11,"le","","",2,[[["self"],["ready"]],["bool"]]],[11,"gt","","",2,[[["self"],["ready"]],["bool"]]],[11,"ge","","",2,[[["self"],["ready"]],["bool"]]],[11,"cmp","","",2,[[["self"],["ready"]],["ordering"]]],[11,"empty","","Returns the empty `Ready` set.",2,[[],["ready"]]],[11,"readable","","Returns a `Ready` representing readable readiness.",2,[[],["ready"]]],[11,"writable","","Returns a `Ready` representing writable readiness.",2,[[],["ready"]]],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,[[],["ready"]]],[11,"is_empty","","Returns true if `Ready` is the empty set",2,[[["self"]],["bool"]]],[11,"is_readable","","Returns true if the value includes readable readiness",2,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness",2,[[["self"]],["bool"]]],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,[[["self"],["t"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",2,[[["self"],["t"]]]],[11,"contains","","Returns true if `self` is a superset of `other`.",2,[[["self"],["t"]],["bool"]]],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,[[["usize"]],["ready"]]],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,[[["self"]],["usize"]]],[11,"bitor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitor_assign","","",2,[[["self"],["t"]]]],[11,"bitxor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitxor_assign","","",2,[[["self"],["t"]]]],[11,"bitand","","",2,[[["self"],["t"]],["ready"]]],[11,"bitand_assign","","",2,[[["self"],["t"]]]],[11,"sub","","",2,[[["self"],["t"]],["ready"]]],[11,"sub_assign","","",2,[[["self"],["t"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["setreadiness"]]],[11,"new","","Return a new `Poll` handle.",4,[[],["result",["poll"]]]],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"]],["result"]]],[11,"poll","","Wait for readiness events",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",4,[[["self"]],["rawfd"]]],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,[[["usize"]],["events"]]],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Event` values.",5,[[["self"]],["iter"]]],[11,"clear","","Clearing all `Event` values from container explicitly.",5,[[["self"]]]],[11,"into_iter","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,N],[11,"register","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",6,[[["self"],["poll"]],["result"]]],[11,"drop","","",6,[[["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"readiness","","Returns the registration's current readiness.",3,[[["self"]],["ready"]]],[11,"set_readiness","","Set the registration's readiness",3,[[["self"],["ready"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["unixready"]],["ready"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["token"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["token"]],["bool"]]],[11,"le","","",0,[[["self"],["token"]],["bool"]]],[11,"gt","","",0,[[["self"],["token"]],["bool"]]],[11,"ge","","",0,[[["self"],["token"]],["bool"]]],[11,"cmp","","",0,[[["self"],["token"]],["ordering"]]],[11,"hash","","",0,N],[11,"from","","",0,[[["usize"]],["token"]]],[0,"net","","Networking primitives",N,N],[3,"TcpListener","mio::net","A structure representing a socket server",N,N],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",N,N],[3,"UdpSocket","","A User Datagram Protocol socket.",N,N],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,[[["socketaddr"]],["result",["tcpstream"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,[[["tcpstream"],["socketaddr"]],["result",["tcpstream"]]]],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,[[["tcpstream"]],["result",["tcpstream"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,[[["self"]],["result",["tcpstream"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,[[["self"],["shutdown"]],["result"]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,[[["self"]],["result",["option"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,N],[11,"read_bufs","","Read in a list of buffers all at once.",7,N],[11,"write_bufs","","Write a list of buffers all at once.",7,N],[11,"read","","",7,N],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"register","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",7,[[["self"],["poll"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,[[["tcplistener"]],["result",["tcplistener"]]]],[11,"accept","","Accepts a new `TcpStream`.",8,[[["self"]],["result"]]],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,[[["self"]],["result"]]],[11,"local_addr","","Returns the local socket address of this listener.",8,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,[[["self"]],["result",["tcplistener"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,[[["self"]],["result",["option"]]]],[11,"register","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",8,[[["self"],["poll"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",7,[[["rawfd"]],["tcpstream"]]],[11,"into_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",8,[[["rawfd"]],["tcplistener"]]],[11,"bind","","Creates a UDP socket from the given address.",9,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,[[["udpsocket"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the socket address that this socket was created from.",9,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,[[["self"]],["result",["udpsocket"]]]],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,N],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,N],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,[[["self"],["socketaddr"]],["result"]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"],["u32"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,[[["self"]],["result",["option"]]]],[11,"register","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",9,[[["self"],["poll"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",9,[[["rawfd"]],["udpsocket"]]],[0,"event","mio","Readiness event types and utilities.",N,N],[3,"Events","mio::event","A collection of readiness events.",N,N],[3,"Iter","","[`Events`] iterator.",N,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[8,"Evented","","A value that may be registered with `Poll`",N,N],[10,"register","","Register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,[[["self"],["poll"]],["result"]]],[0,"unix","mio","Unix only extensions",N,N],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",N,N],[12,"0","","",11,N],[3,"UnixReady","","Unix specific extensions to `Ready`",N,N],[11,"clone","mio::event","",12,[[["self"]],["event"]]],[11,"eq","","",12,[[["self"],["event"]],["bool"]]],[11,"ne","","",12,[[["self"],["event"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,[[["ready"],["token"]],["event"]]],[11,"readiness","","Returns the event's readiness.",12,[[["self"]],["ready"]]],[11,"token","","Returns the event's token.",12,[[["self"]],["token"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["iter"]]],[11,"next","","",13,[[["self"]],["option",["event"]]]],[11,"fmt","mio::unix","",11,[[["self"],["formatter"]],["result"]]],[11,"register","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",11,[[["self"],["poll"]],["result"]]],[11,"eq","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ne","","",14,[[["self"],["unixready"]],["bool"]]],[11,"clone","","",14,[[["self"]],["unixready"]]],[11,"partial_cmp","","",14,[[["self"],["unixready"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"le","","",14,[[["self"],["unixready"]],["bool"]]],[11,"gt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ge","","",14,[[["self"],["unixready"]],["bool"]]],[11,"cmp","","",14,[[["self"],["unixready"]],["ordering"]]],[11,"error","","Returns a `Ready` representing error readiness.",14,[[],["unixready"]]],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,[[],["unixready"]]],[11,"is_error","","Returns true if the value includes error readiness",14,[[["self"]],["bool"]]],[11,"is_hup","","Returns true if the value includes HUP readiness",14,[[["self"]],["bool"]]],[11,"from","","",14,[[["ready"]],["unixready"]]],[11,"deref","","",14,[[["self"]],["ready"]]],[11,"deref_mut","","",14,[[["self"]],["ready"]]],[11,"bitor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitxor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitand","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"sub","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["native_tls"]={"doc":"An abstraction over platform-specific TLS implementations.","items":[[3,"Error","native_tls","An error returned from the TLS implementation.",N,N],[3,"Pkcs12","","A PKCS #12 archive.",N,N],[3,"Certificate","","An X509 certificate.",N,N],[3,"MidHandshakeTlsStream","","A TLS stream which has been interrupted midway through the handshake process.",N,N],[3,"TlsConnectorBuilder","","A builder for `TlsConnector`s.",N,N],[3,"TlsConnector","","A builder for client-side TLS connections.",N,N],[3,"TlsAcceptorBuilder","","A builder for `TlsAcceptor`s.",N,N],[3,"TlsAcceptor","","A builder for server-side TLS connections.",N,N],[3,"TlsStream","","A stream managing a TLS session.",N,N],[4,"HandshakeError","","An error returned from `ClientBuilder::handshake`.",N,N],[13,"Failure","","A fatal error.",0,N],[13,"Interrupted","","A stream interrupted midway through the handshake process due to a `WouldBlock` error.",0,N],[4,"Protocol","","SSL/TLS protocol versions.",N,N],[13,"Sslv3","","The SSL 3.0 protocol.",1,N],[13,"Tlsv10","","The TLS 1.0 protocol.",1,N],[13,"Tlsv11","","The TLS 1.1 protocol.",1,N],[13,"Tlsv12","","The TLS 1.2 protocol.",1,N],[0,"backend","","TLS backend-specific functionality.",N,N],[0,"openssl","native_tls::backend","OpenSSL-specific functionality.",N,N],[8,"TlsConnectorBuilderExt","native_tls::backend::openssl","OpenSSL-specific extensions to `TlsConnectorBuilder`.",N,N],[10,"from_openssl","","Initialize `TlsAcceptorBuilderExt` from an `SslAcceptorBuilder`.",2,[[["sslconnectorbuilder"]],["self"]]],[10,"builder","","Returns a shared reference to the inner `SslConnectorBuilder`.",2,[[["self"]],["sslconnectorbuilder"]]],[10,"builder_mut","","Returns a mutable reference to the inner `SslConnectorBuilder`.",2,[[["self"]],["sslconnectorbuilder"]]],[8,"TlsAcceptorBuilderExt","","OpenSSL-specific extensions to `TlsAcceptorBuilder`.",N,N],[10,"from_openssl","","Initialize `TlsAcceptorBuilderExt` from an `SslAcceptorBuilder`.",3,[[["sslacceptorbuilder"]],["self"]]],[10,"builder","","Returns a shared reference to the inner `SslAcceptorBuilder`.",3,[[["self"]],["sslacceptorbuilder"]]],[10,"builder_mut","","Returns a mutable reference to the inner `SslAcceptorBuilder`.",3,[[["self"]],["sslacceptorbuilder"]]],[8,"TlsStreamExt","","OpenSSL-specific extensions to `TlsStream`.",N,N],[10,"raw_stream","","Returns a shared reference to the OpenSSL `SslStream`.",4,[[["self"]],["sslstream"]]],[10,"raw_stream_mut","","Returns a mutable reference to the OpenSSL `SslStream`.",4,[[["self"]],["sslstream"]]],[8,"ErrorExt","","OpenSSL-specific extensions to `Error`",N,N],[10,"openssl_error","","Extract the underlying OpenSSL error for inspection.",5,[[["self"]],["error"]]],[11,"from_openssl","native_tls","",6,[[["sslconnectorbuilder"]],["tlsconnectorbuilder"]]],[11,"builder","","",6,[[["self"]],["sslconnectorbuilder"]]],[11,"builder_mut","","",6,[[["self"]],["sslconnectorbuilder"]]],[11,"from_openssl","","",7,[[["sslacceptorbuilder"]],["tlsacceptorbuilder"]]],[11,"builder","","",7,[[["self"]],["sslacceptorbuilder"]]],[11,"builder_mut","","",7,[[["self"]],["sslacceptorbuilder"]]],[11,"raw_stream","","",8,[[["self"]],["sslstream"]]],[11,"raw_stream_mut","","",8,[[["self"]],["sslstream"]]],[11,"openssl_error","","",9,[[["self"]],["error"]]],[6,"Result","","A typedef of the result-type returned by many methods.",N,N],[11,"description","","",9,[[["self"]],["str"]]],[11,"cause","","",9,[[["self"]],["option",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from","","",9,[[["t"]],["error"]]],[11,"from_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",10,N],[11,"from_der","","Parses a DER-formatted X509 certificate.",11,N],[11,"from_pem","","Parses a PEM-formatted X509 certificate. If the PEM file contains more than one certificate the last one is used and the others are ignored.",11,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Returns a shared reference to the inner stream.",12,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",12,[[["self"]],["s"]]],[11,"handshake","","Restarts the handshake process.",12,[[["self"]],["result",["tlsstream","handshakeerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["protocol"]]],[11,"identity","","Sets the identity to be used for client certificate authentication.",6,[[["self"],["pkcs12"]],["result",["tlsconnectorbuilder"]]]],[11,"supported_protocols","","Sets the protocols which the connector will support.",6,N],[11,"add_root_certificate","","Adds a certificate to the set of roots that the connector will trust.",6,[[["self"],["certificate"]],["result",["tlsconnectorbuilder"]]]],[11,"build","","Consumes the builder, returning a `TlsConnector`.",6,[[["self"]],["result",["tlsconnector"]]]],[11,"clone","","",13,[[["self"]],["tlsconnector"]]],[11,"builder","","Returns a new builder for a `TlsConnector`.",13,[[],["result",["tlsconnectorbuilder"]]]],[11,"connect","","Initiates a TLS handshake.",13,[[["self"],["str"],["s"]],["result",["tlsstream","handshakeerror"]]]],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect`, but does not validate the server's domain name against its certificate.",13,[[["self"],["s"]],["result",["tlsstream","handshakeerror"]]]],[11,"supported_protocols","","Sets the protocols which the acceptor will support.",7,N],[11,"build","","Consumes the builder, returning a `TlsAcceptor`.",7,[[["self"]],["result",["tlsacceptor"]]]],[11,"clone","","",14,[[["self"]],["tlsacceptor"]]],[11,"builder","","Returns a new builder for a `TlsAcceptor`.",14,[[["pkcs12"]],["result",["tlsacceptorbuilder"]]]],[11,"accept","","Initiates a TLS handshake.",14,[[["self"],["s"]],["result",["tlsstream","handshakeerror"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Returns a shared reference to the inner stream.",8,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",8,[[["self"]],["s"]]],[11,"buffered_read_size","","Returns the number of bytes that can be read without resulting in any network calls.",8,[[["self"]],["result",["usize"]]]],[11,"shutdown","","Shuts down the TLS session.",8,[[["self"]],["result"]]],[11,"read","","",8,N],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]]],"paths":[[4,"HandshakeError"],[4,"Protocol"],[8,"TlsConnectorBuilderExt"],[8,"TlsAcceptorBuilderExt"],[8,"TlsStreamExt"],[8,"ErrorExt"],[3,"TlsConnectorBuilder"],[3,"TlsAcceptorBuilder"],[3,"TlsStream"],[3,"Error"],[3,"Pkcs12"],[3,"Certificate"],[3,"MidHandshakeTlsStream"],[3,"TlsConnector"],[3,"TlsAcceptor"]]};
searchIndex["net2"]={"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",N,N],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",N,N],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpbuilder"]]]],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,[[["self"],["i32"]],["result",["tcplistener"]]]],[11,"connect","","Initiate a connection on this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpstream"]]]],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,[[["self"]],["result",["tcpstream"]]]],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,[[["self"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,[[["self"]],["result",["socketaddr"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",1,[[["self"],["t"]],["result",["udpsocket"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,[[["self"]],["result",["option"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],["result",["option"]]]],[11,"from_raw_fd","","",0,[[["c_int"]],["tcpbuilder"]]],[11,"as_raw_fd","","",0,[[["self"]],["c_int"]]],[11,"from_raw_fd","","",1,[[["c_int"]],["udpbuilder"]]],[11,"as_raw_fd","","",1,[[["self"]],["c_int"]]],[0,"unix","","Unix-specific extensions to the `std::net` types.",N,N],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,[[["self"]],["result",["bool"]]]],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,[[["self"]],["result",["bool"]]]],[11,"reuse_port","net2","",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",0,[[["self"]],["result",["bool"]]]],[11,"reuse_port","","",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",1,[[["self"]],["result",["bool"]]]],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",N,N],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"]],["result",["bool"]]]],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,[[["self"]],["result",["option"]]]],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,[[["self"]],["result",["option"]]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,[[["self"]],["result",["bool"]]]],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,[[["self"],["t"]],["result"]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,[[["self"]],["result",["option"]]]],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",N,N],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,[[["self"]],["result",["bool"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,[[["self"]],["result",["option"]]]],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",N,N],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"],["u32"]],["result"]]],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"],["ipv4addr"]],["result"]]],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["ipv4addr"]]]],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,[[["self"]],["result",["option"]]]],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,[[["self"],["a"]],["result"]]],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,N],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,N],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,[[["self"],["bool"]],["result"]]]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",N,N],[12,"kind","","",0,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",1,N],[13,"Invalid","","",1,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,[[["self"]],["bool"]]],[0,"sign","num_traits","",N,N],[5,"abs","num_traits::sign","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",4,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",4,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",4,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",11,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",12,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",13,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",14,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",15,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",16,[[["self"],["self"]],["self"]]],[0,"inv","num_traits::ops","",N,N],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"inv","","Returns the multiplicative inverse of `self`.",17,N],[0,"mul_add","num_traits::ops","",N,N],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",18,N],[10,"mul_add","","Performs the fused multiply-add operation.",18,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",19,[[["self"],["a"],["b"]]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",20,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",20,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",21,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",21,[[],["self"]]],[10,"nan","","Returns NaN.",21,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",21,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",21,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",21,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",21,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",21,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",21,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",21,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",21,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",21,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",21,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",21,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",21,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",21,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",21,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",21,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",21,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",21,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",21,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",21,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",21,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",21,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",21,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",21,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",21,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",22,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",22,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",22,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",22,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",22,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",22,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",22,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",22,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",22,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",22,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",22,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",22,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",22,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",22,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",22,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",22,[[],["self"]]],[0,"cast","num_traits","",N,N],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",23,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",23,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",23,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",23,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",23,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",23,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",23,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",23,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",23,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",23,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",23,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",23,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",23,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",23,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",24,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",25,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",26,[[["self"]],["t"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",27,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",27,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",27,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",27,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",27,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",27,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",27,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",27,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",27,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",27,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",27,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",27,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Pow","","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",28,N],[10,"pow","","Returns `self` to the power `rhs`.",28,N],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",29,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",29,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Bounded"],[8,"FloatCore"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Pow"],[8,"Num"]]};
searchIndex["openssl"]={"doc":"","items":[[5,"init","openssl","",N,N],[0,"aes","","Low level AES IGE functionality",N,N],[3,"KeyError","openssl::aes","Provides Error handling for parsing keys.",N,N],[3,"AesKey","","The key used to encrypt or decrypt cipher blocks.",N,N],[5,"aes_ige","","Performs AES IGE encryption or decryption",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new_encrypt","","Prepares a key for encryption.",1,N],[11,"new_decrypt","","Prepares a key for decryption.",1,N],[0,"asn1","openssl","Defines the format of certificiates",N,N],[3,"Asn1GeneralizedTime","openssl::asn1","Non-UTC representation of time",N,N],[3,"Asn1GeneralizedTimeRef","","Reference to a [`Asn1GeneralizedTime`]",N,N],[3,"Asn1Time","","Time storage and comparison",N,N],[3,"Asn1TimeRef","","Reference to an [`Asn1Time`]",N,N],[3,"Asn1String","","Primary ASN.1 type used by OpenSSL",N,N],[3,"Asn1StringRef","","Reference to [`Asn1String`]",N,N],[3,"Asn1Integer","","Numeric representation",N,N],[3,"Asn1IntegerRef","","Reference to [`Asn1Integer`]",N,N],[3,"Asn1BitString","","Sequence of bytes",N,N],[3,"Asn1BitStringRef","","Reference to [`Asn1BitString`]",N,N],[3,"Asn1Object","","Object Identifier",N,N],[3,"Asn1ObjectRef","","Reference to [`Asn1Object`]",N,N],[11,"from_ptr","","",2,N],[11,"as_ptr","","",2,N],[11,"drop","","",2,[[["self"]]]],[11,"deref","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"deref_mut","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"borrow","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"as_ref","","",2,[[["self"]],["asn1generalizedtimeref"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_ptr","","",4,N],[11,"as_ptr","","",4,N],[11,"drop","","",4,[[["self"]]]],[11,"deref","","",4,[[["self"]],["asn1timeref"]]],[11,"deref_mut","","",4,[[["self"]],["asn1timeref"]]],[11,"borrow","","",4,[[["self"]],["asn1timeref"]]],[11,"as_ref","","",4,[[["self"]],["asn1timeref"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"days_from_now","","Creates a new time on specified interval in days from now",4,[[["u32"]],["result",["asn1time","errorstack"]]]],[11,"from_ptr","","",6,N],[11,"as_ptr","","",6,N],[11,"drop","","",6,[[["self"]]]],[11,"deref","","",6,[[["self"]],["asn1stringref"]]],[11,"deref_mut","","",6,[[["self"]],["asn1stringref"]]],[11,"borrow","","",6,[[["self"]],["asn1stringref"]]],[11,"as_ref","","",6,[[["self"]],["asn1stringref"]]],[11,"as_utf8","","Converts the ASN.1 underlying format to UTF8",7,[[["self"]],["result",["opensslstring","errorstack"]]]],[11,"as_slice","","Return the string as an array of bytes",7,N],[11,"len","","Return the length of the Asn1String (number of bytes)",7,[[["self"]],["usize"]]],[11,"from_ptr","","",8,N],[11,"as_ptr","","",8,N],[11,"drop","","",8,[[["self"]]]],[11,"deref","","",8,[[["self"]],["asn1integerref"]]],[11,"deref_mut","","",8,[[["self"]],["asn1integerref"]]],[11,"borrow","","",8,[[["self"]],["asn1integerref"]]],[11,"as_ref","","",8,[[["self"]],["asn1integerref"]]],[11,"get","","Returns value of ASN.1 integer, or -1 if there is an error, and 0 if the integer is Null.",9,[[["self"]],["i64"]]],[11,"set","","Sets the ASN.1 value to the value of a signed 32-bit integer, for larger numbers see [`bn`].",9,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"from_ptr","","",10,N],[11,"as_ptr","","",10,N],[11,"drop","","",10,[[["self"]]]],[11,"deref","","",10,[[["self"]],["asn1bitstringref"]]],[11,"deref_mut","","",10,[[["self"]],["asn1bitstringref"]]],[11,"borrow","","",10,[[["self"]],["asn1bitstringref"]]],[11,"as_ref","","",10,[[["self"]],["asn1bitstringref"]]],[11,"as_slice","","Returns the Asn1BitString as a slice",11,N],[11,"len","","Length of Asn1BitString in number of bytes.",11,[[["self"]],["usize"]]],[11,"from_ptr","","",12,N],[11,"as_ptr","","",12,N],[11,"drop","","",12,[[["self"]]]],[11,"deref","","",12,[[["self"]],["asn1objectref"]]],[11,"deref_mut","","",12,[[["self"]],["asn1objectref"]]],[11,"borrow","","",12,[[["self"]],["asn1objectref"]]],[11,"as_ref","","",12,[[["self"]],["asn1objectref"]]],[11,"nid","","Returns the NID associated with this OID.",13,[[["self"]],["nid"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[0,"bn","openssl","BigNum implementation",N,N],[3,"MsbOption","openssl::bn","Options for the most significant bits of a randomly generated `BigNum`.",N,N],[3,"BigNumContext","","Temporary storage for BigNums on the secure heap",N,N],[3,"BigNumContextRef","","Reference to [`BigNumContext`]",N,N],[3,"BigNum","","Dynamically sized large number impelementation",N,N],[3,"BigNumRef","","Reference to a [`BigNum`]",N,N],[17,"MSB_MAYBE_ZERO","","The most significant bit of the number may be 0.",N,N],[17,"MSB_ONE","","The most significant bit of the number must be 1.",N,N],[17,"TWO_MSB_ONE","","The most significant two bits of the number must be 1.",N,N],[11,"from_ptr","","",14,N],[11,"as_ptr","","",14,N],[11,"drop","","",14,[[["self"]]]],[11,"deref","","",14,[[["self"]],["bignumcontextref"]]],[11,"deref_mut","","",14,[[["self"]],["bignumcontextref"]]],[11,"borrow","","",14,[[["self"]],["bignumcontextref"]]],[11,"as_ref","","",14,[[["self"]],["bignumcontextref"]]],[11,"new","","Returns a new `BigNumContext`.",14,[[],["result",["bignumcontext","errorstack"]]]],[11,"from_ptr","","",15,N],[11,"as_ptr","","",15,N],[11,"drop","","",15,[[["self"]]]],[11,"deref","","",15,[[["self"]],["bignumref"]]],[11,"deref_mut","","",15,[[["self"]],["bignumref"]]],[11,"borrow","","",15,[[["self"]],["bignumref"]]],[11,"as_ref","","",15,[[["self"]],["bignumref"]]],[11,"clear","","Erases the memory used by this `BigNum`, resetting its value to 0.",16,[[["self"]]]],[11,"add_word","","Adds a `u32` to `self`.",16,[[["self"],["u32"]],["result",["errorstack"]]]],[11,"sub_word","","Subtracts a `u32` from `self`.",16,[[["self"],["u32"]],["result",["errorstack"]]]],[11,"mul_word","","Multiplies a `u32` by `self`.",16,[[["self"],["u32"]],["result",["errorstack"]]]],[11,"div_word","","Divides `self` by a `u32`, returning the remainder.",16,[[["self"],["u32"]],["result",["u64","errorstack"]]]],[11,"mod_word","","Returns the result of `self` modulo `w`.",16,[[["self"],["u32"]],["result",["u64","errorstack"]]]],[11,"rand_range","","Places a cryptographically-secure pseudo-random nonnegative number less than `self` in `rnd`.",16,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"pseudo_rand_range","","The cryptographically weak counterpart to `rand_in_range`.",16,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"set_bit","","Sets bit `n`. Equivalent to `self |= (1 << n)`.",16,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"clear_bit","","Clears bit `n`, setting it to 0. Equivalent to `self &= ~(1 << n)`.",16,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"is_bit_set","","Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.",16,[[["self"],["i32"]],["bool"]]],[11,"mask_bits","","Truncates `self` to the lowest `n` bits.",16,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"lshift1","","Places `a << 1` in `self`.  Equivalent to `self * 2`.",16,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"rshift1","","Places `a >> 1` in `self`. Equivalent to `self / 2`.",16,[[["self"],["bignumref"]],["result",["errorstack"]]]],[11,"checked_add","","Places `a + b` in `self`.  [`core::ops::Add`] is also implemented for `BigNumRef`.",16,[[["self"],["bignumref"],["bignumref"]],["result",["errorstack"]]]],[11,"checked_sub","","Places `a - b` in `self`. [`core::ops::Sub`] is also implemented for `BigNumRef`.",16,[[["self"],["bignumref"],["bignumref"]],["result",["errorstack"]]]],[11,"lshift","","Places `a << n` in `self`.  Equivalent to `a * 2 ^ n`.",16,[[["self"],["bignumref"],["i32"]],["result",["errorstack"]]]],[11,"rshift","","Places `a >> n` in `self`. Equivalent to `a / 2 ^ n`.",16,[[["self"],["bignumref"],["i32"]],["result",["errorstack"]]]],[11,"to_owned","","Creates a new BigNum with the same value.",16,[[["self"]],["result",["bignum","errorstack"]]]],[11,"set_negative","","Sets the sign of `self`.  Pass true to set `self` to a negative.  False sets `self` positive.",16,[[["self"],["bool"]]]],[11,"ucmp","","Compare the absolute values of `self` and `oth`.",16,[[["self"],["bignumref"]],["ordering"]]],[11,"is_negative","","Returns `true` if `self` is negative.",16,[[["self"]],["bool"]]],[11,"num_bits","","Returns the number of significant bits in `self`.",16,[[["self"]],["i32"]]],[11,"num_bytes","","Returns the size of `self` in bytes. Implemented natively.",16,[[["self"]],["i32"]]],[11,"rand","","Generates a cryptographically strong pseudo-random `BigNum`, placing it in `self`.",16,[[["self"],["i32"],["msboption"],["bool"]],["result",["errorstack"]]]],[11,"pseudo_rand","","The cryptographically weak counterpart to `rand`.  Not suitable for key generation.",16,[[["self"],["i32"],["msboption"],["bool"]],["result",["errorstack"]]]],[11,"generate_prime","","Generates a prime number, placing it in `self`.",16,[[["self"],["i32"],["bool"],["option",["bignumref"]],["option",["bignumref"]]],["result",["errorstack"]]]],[11,"checked_mul","","Places the result of `a * b` in `self`. [`core::ops::Mul`] is also implemented for `BigNumRef`.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"checked_div","","Places the result of `a / b` in `self`. The remainder is discarded. [`core::ops::Div`] is also implemented for `BigNumRef`.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"checked_rem","","Places the result of `a % b` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"div_rem","","Places the result of `a / b` in `self` and `a % b` in `rem`.",16,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"sqr","","Places the result of `a²` in `self`.",16,[[["self"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"nnmod","","Places the result of `a mod m` in `self`.  As opposed to `div_rem` the result is non-negative.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_add","","Places the result of `(a + b) mod m` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_sub","","Places the result of `(a - b) mod m` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_mul","","Places the result of `(a * b) mod m` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_sqr","","Places the result of `a² mod m` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"exp","","Places the result of `a^p` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_exp","","Places the result of `a^p mod m` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mod_inverse","","Places the inverse of `a` modulo `n` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"gcd","","Places the greatest common denominator of `a` and `b` in `self`.",16,[[["self"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"is_prime","","Checks whether `self` is prime.",16,[[["self"],["i32"],["bignumcontextref"]],["result",["bool","errorstack"]]]],[11,"is_prime_fasttest","","Checks whether `self` is prime with optional trial division.",16,[[["self"],["i32"],["bignumcontextref"],["bool"]],["result",["bool","errorstack"]]]],[11,"to_vec","","Returns a big-endian byte vector representation of the absolute value of `self`.",16,[[["self"]],["vec",["u8"]]]],[11,"to_dec_str","","Returns a decimal string representation of `self`.",16,[[["self"]],["result",["opensslstring","errorstack"]]]],[11,"to_hex_str","","Returns a hexadecimal string representation of `self`.",16,[[["self"]],["result",["opensslstring","errorstack"]]]],[11,"to_asn1_integer","","Returns an `Asn1Integer` containing the value of `self`.",16,[[["self"]],["result",["asn1integer","errorstack"]]]],[11,"new","","Creates a new `BigNum` with the value 0.",15,[[],["result",["bignum","errorstack"]]]],[11,"from_u32","","Creates a new `BigNum` with the given value.",15,[[["u32"]],["result",["bignum","errorstack"]]]],[11,"from_dec_str","","Creates a `BigNum` from a decimal string.",15,[[["str"]],["result",["bignum","errorstack"]]]],[11,"from_hex_str","","Creates a `BigNum` from a hexadecimal string.",15,[[["str"]],["result",["bignum","errorstack"]]]],[11,"get_rfc2409_prime_768","","Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in the order of magnitude of `2 ^ 768`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled Oakley group id 1.",15,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc2409_prime_1024","","Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in the order of magnitude of `2 ^ 1024`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled Oakly group 2.",15,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_1536","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 1536`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 5.",15,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_2048","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 2048`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 14.",15,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_3072","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 3072`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 15.",15,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_4096","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 4096`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 16.",15,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_6144","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 6144`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 17.",15,[[],["result",["bignum","errorstack"]]]],[11,"get_rfc3526_prime_8192","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 8192`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 18.",15,[[],["result",["bignum","errorstack"]]]],[11,"from_slice","","Creates a new `BigNum` from an unsigned, big-endian encoded number of arbitrary length.",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["bignumref"]],["bool"]]],[11,"eq","","",16,[[["self"],["bignum"]],["bool"]]],[11,"eq","","",15,[[["self"],["bignum"]],["bool"]]],[11,"eq","","",15,[[["self"],["bignumref"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["bignumref"]],["option",["ordering"]]]],[11,"partial_cmp","","",16,[[["self"],["bignum"]],["option",["ordering"]]]],[11,"cmp","","",16,[[["self"],["bignumref"]],["ordering"]]],[11,"partial_cmp","","",15,[[["self"],["bignum"]],["option",["ordering"]]]],[11,"partial_cmp","","",15,[[["self"],["bignumref"]],["option",["ordering"]]]],[11,"cmp","","",15,[[["self"],["bignum"]],["ordering"]]],[11,"neg","","",15,[[["self"]],["bignum"]]],[0,"cms","openssl","SMIME implementation using CMS",N,N],[3,"CmsContentInfo","openssl::cms","High level CMS wrapper",N,N],[3,"CmsContentInfoRef","","Reference to [`CMSContentInfo`]",N,N],[11,"from_ptr","","",17,N],[11,"as_ptr","","",17,N],[11,"drop","","",17,[[["self"]]]],[11,"deref","","",17,[[["self"]],["cmscontentinforef"]]],[11,"deref_mut","","",17,[[["self"]],["cmscontentinforef"]]],[11,"borrow","","",17,[[["self"]],["cmscontentinforef"]]],[11,"as_ref","","",17,[[["self"]],["cmscontentinforef"]]],[11,"decrypt","","Given the sender's private key, `pkey` and the recipient's certificiate, `cert`, decrypt the data in `self`.",18,[[["self"],["pkeyref"],["x509"]],["result",["vec","errorstack"]]]],[11,"smime_read_cms","","Parses a smime formatted `vec` of bytes into a `CmsContentInfo`.",17,N],[0,"conf","openssl","Interface for processing OpenSSL configuration files.",N,N],[3,"ConfMethod","openssl::conf","",N,N],[3,"Conf","","",N,N],[3,"ConfRef","","",N,N],[11,"default","","Retrieve handle to the default OpenSSL configuration file processing function.",19,[[],["confmethod"]]],[11,"from_ptr","","Construct from raw pointer.",19,N],[11,"as_ptr","","Convert to raw pointer.",19,N],[11,"from_ptr","","",20,N],[11,"as_ptr","","",20,N],[11,"drop","","",20,[[["self"]]]],[11,"deref","","",20,[[["self"]],["confref"]]],[11,"deref_mut","","",20,[[["self"]],["confref"]]],[11,"borrow","","",20,[[["self"]],["confref"]]],[11,"as_ref","","",20,[[["self"]],["confref"]]],[11,"new","","Create a configuration parser.",20,[[["confmethod"]],["result",["conf","errorstack"]]]],[0,"dh","openssl","",N,N],[3,"Dh","openssl::dh","",N,N],[3,"DhRef","","",N,N],[11,"from_ptr","","",21,N],[11,"as_ptr","","",21,N],[11,"drop","","",21,[[["self"]]]],[11,"deref","","",21,[[["self"]],["dhref"]]],[11,"deref_mut","","",21,[[["self"]],["dhref"]]],[11,"borrow","","",21,[[["self"]],["dhref"]]],[11,"as_ref","","",21,[[["self"]],["dhref"]]],[11,"to_pem","","Serializes this value to PEM.",22,[[["self"]],["result",["vec","errorstack"]]]],[11,"to_der","","Serializes this value to DER.",22,[[["self"]],["result",["vec","errorstack"]]]],[11,"from_params","","",21,[[["bignum"],["bignum"],["bignum"]],["result",["dh","errorstack"]]]],[11,"from_pem","","Deserializes a value from PEM-formatted data.",21,N],[11,"from_der","","Deserializes a value from DER-formatted data.",21,N],[0,"dsa","openssl","Digital Signatures",N,N],[3,"Dsa","openssl::dsa","Object representing DSA keys.",N,N],[3,"DsaRef","","Reference to [`Dsa`].",N,N],[11,"from_ptr","","",23,N],[11,"as_ptr","","",23,N],[11,"drop","","",23,[[["self"]]]],[11,"deref","","",23,[[["self"]],["dsaref"]]],[11,"deref_mut","","",23,[[["self"]],["dsaref"]]],[11,"borrow","","",23,[[["self"]],["dsaref"]]],[11,"as_ref","","",23,[[["self"]],["dsaref"]]],[11,"private_key_to_pem","","Serializes the private key to PEM.",24,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",24,N],[11,"public_key_to_pem","","Serializes a public key to PEM.",24,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_der","","Serializes the private key to DER.",24,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der","","Serializes the public key to DER.",24,[[["self"]],["result",["vec","errorstack"]]]],[11,"size","","Returns the maximum size of the signature output by `self` in bytes.  Returns None if the keys are uninitialized.",24,[[["self"]],["option",["u32"]]]],[11,"p","","Returns the DSA prime parameter of `self`.",24,[[["self"]],["option",["bignumref"]]]],[11,"q","","Returns the DSA sub-prime parameter of `self`.",24,[[["self"]],["option",["bignumref"]]]],[11,"g","","Returns the DSA base parameter of `self`.",24,[[["self"]],["option",["bignumref"]]]],[11,"has_public_key","","Returns whether the DSA includes a public key, used to confirm the authenticity of the message.",24,[[["self"]],["bool"]]],[11,"has_private_key","","Returns whether the DSA includes a private key, used to prove the authenticity of a message.",24,[[["self"]],["bool"]]],[11,"generate","","Generate a DSA key pair.",23,[[["u32"]],["result",["dsa","errorstack"]]]],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",23,N],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",23,N],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",23,N],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",23,N],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",23,N],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",23,N],[11,"private_key_from_pem_cb","","",23,N],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[0,"ec","openssl","Elliptic Curve",N,N],[3,"PointConversionForm","openssl::ec","Compressed or Uncompressed conversion",N,N],[3,"Asn1Flag","","Named Curve or Explicit",N,N],[3,"EcGroup","","Describes the curve",N,N],[3,"EcGroupRef","","Reference to [`EcGroup`]",N,N],[3,"EcPoint","","Represents a point on the curve",N,N],[3,"EcPointRef","","Reference to [`EcPoint`]",N,N],[3,"EcKey","","Public and optional Private key on the given curve",N,N],[3,"EcKeyRef","","Reference to [`EcKey`]",N,N],[3,"EcKeyBuilder","","Builder pattern for key generation",N,N],[3,"EcKeyBuilderRef","","Reference to [`EcKeyBuilder`]",N,N],[17,"POINT_CONVERSION_COMPRESSED","","Compressed conversion from point value (Default)",N,N],[17,"POINT_CONVERSION_UNCOMPRESSED","","Uncompressed conversion from point value (Binary curve default)",N,N],[17,"POINT_CONVERSION_HYBRID","","Performs both compressed and uncompressed conversions",N,N],[17,"EXPLICIT_CURVE","","Curve defined using polynomial parameters",N,N],[17,"NAMED_CURVE","","Standard Curves",N,N],[11,"clone","","",25,[[["self"]],["pointconversionform"]]],[11,"clone","","",26,[[["self"]],["asn1flag"]]],[11,"from_ptr","","",27,N],[11,"as_ptr","","",27,N],[11,"drop","","",27,[[["self"]]]],[11,"deref","","",27,[[["self"]],["ecgroupref"]]],[11,"deref_mut","","",27,[[["self"]],["ecgroupref"]]],[11,"borrow","","",27,[[["self"]],["ecgroupref"]]],[11,"as_ref","","",27,[[["self"]],["ecgroupref"]]],[11,"from_curve_name","","Returns the group of a standard named curve.",27,[[["nid"]],["result",["ecgroup","errorstack"]]]],[11,"components_gfp","","Places the components of a curve over a prime field in the provided `BigNum`s. The components make up the formula `y^2 mod p = x^3 + ax + b mod p`.",28,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"components_gf2m","","Places the components of a curve over a binary field in the provided `BigNum`s. The components make up the formula `y^2 + xy = x^3 + ax^2 + b`.",28,[[["self"],["bignumref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"degree","","Returns the degree of the curve.",28,[[["self"]],["u32"]]],[11,"order","","Places the order of the curve in the provided `BigNum`.",28,[[["self"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"set_asn1_flag","","Sets the flag determining if the group corresponds to a named curve or must be explicitly parameterized.",28,[[["self"],["asn1flag"]]]],[11,"from_ptr","","",29,N],[11,"as_ptr","","",29,N],[11,"drop","","",29,[[["self"]]]],[11,"deref","","",29,[[["self"]],["ecpointref"]]],[11,"deref_mut","","",29,[[["self"]],["ecpointref"]]],[11,"borrow","","",29,[[["self"]],["ecpointref"]]],[11,"as_ref","","",29,[[["self"]],["ecpointref"]]],[11,"add","","Computes `a + b`, storing the result in `self`.",30,[[["self"],["ecgroupref"],["ecpointref"],["ecpointref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mul","","Computes `q * m`, storing the result in `self`.",30,[[["self"],["ecgroupref"],["ecpointref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mul_generator","","Computes `generator * n`, storing the result ing `self`.",30,[[["self"],["ecgroupref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"mul_full","","Computes `generator * n + q * m`, storing the result in `self`.",30,[[["self"],["ecgroupref"],["bignumref"],["ecpointref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"invert","","Inverts `self`.",30,[[["self"],["ecgroupref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"to_bytes","","Serializes the point to a binary representation.",30,[[["self"],["ecgroupref"],["pointconversionform"],["bignumcontextref"]],["result",["vec","errorstack"]]]],[11,"eq","","Determines if this point is equal to another.",30,[[["self"],["ecgroupref"],["ecpointref"],["bignumcontextref"]],["result",["bool","errorstack"]]]],[11,"affine_coordinates_gfp","","Place affine coordinates of a curve over a prime field in the provided `x` and `y` `BigNum`s",30,[[["self"],["ecgroupref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"affine_coordinates_gf2m","","Place affine coordinates of a curve over a binary field in the provided `x` and `y` `BigNum`s",30,[[["self"],["ecgroupref"],["bignumref"],["bignumref"],["bignumcontextref"]],["result",["errorstack"]]]],[11,"new","","Creates a new point on the specified curve.",29,[[["ecgroupref"]],["result",["ecpoint","errorstack"]]]],[11,"from_bytes","","Creates point from a binary representation",29,N],[11,"from_ptr","","",31,N],[11,"as_ptr","","",31,N],[11,"drop","","",31,[[["self"]]]],[11,"deref","","",31,[[["self"]],["eckeyref"]]],[11,"deref_mut","","",31,[[["self"]],["eckeyref"]]],[11,"borrow","","",31,[[["self"]],["eckeyref"]]],[11,"as_ref","","",31,[[["self"]],["eckeyref"]]],[11,"private_key_to_pem","","Serializes the private key to PEM.",32,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",32,N],[11,"private_key_to_der","","Serializes the private key to DER.",32,[[["self"]],["result",["vec","errorstack"]]]],[11,"group","","Return [`EcGroup`] of the `EcKey`",32,[[["self"]],["option",["ecgroupref"]]]],[11,"public_key","","Return [`EcPoint`] associated with the public key",32,[[["self"]],["option",["ecpointref"]]]],[11,"private_key","","Return [`EcPoint`] associated with the private key",32,[[["self"]],["option",["bignumref"]]]],[11,"check_key","","Checks the key for validity.",32,[[["self"]],["result",["errorstack"]]]],[11,"to_owned","","Create a copy of the `EcKey` to allow modification",32,[[["self"]],["result",["eckey","errorstack"]]]],[11,"from_curve_name","","Constructs an `EcKey` corresponding to a known curve.",31,[[["nid"]],["result",["eckey","errorstack"]]]],[11,"from_public_key","","Constructs an `EcKey` from the specified group with the associated `EcPoint`, public_key.",31,[[["ecgroupref"],["ecpointref"]],["result",["eckey","errorstack"]]]],[11,"generate","","Generates a new public/private key pair on the specified curve.",31,[[["ecgroupref"]],["result",["eckey","errorstack"]]]],[11,"new_by_curve_name","","",31,[[["nid"]],["result",["eckey","errorstack"]]]],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",31,N],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",31,N],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",31,N],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",31,N],[11,"from_ptr","","",33,N],[11,"as_ptr","","",33,N],[11,"drop","","",33,[[["self"]]]],[11,"deref","","",33,[[["self"]],["eckeybuilderref"]]],[11,"deref_mut","","",33,[[["self"]],["eckeybuilderref"]]],[11,"borrow","","",33,[[["self"]],["eckeybuilderref"]]],[11,"as_ref","","",33,[[["self"]],["eckeybuilderref"]]],[11,"new","","Creates an empty `EcKeyBuilder` to be chained with additonal methods",33,[[],["result",["eckeybuilder","errorstack"]]]],[11,"build","","Consume the `EcKeyBuilder` and return [`EcKey`]",33,[[["self"]],["eckey"]]],[11,"set_group","","Set the [`EcGroup`] explicitly",34,[[["self"],["ecgroupref"]],["result",["eckeybuilderref","errorstack"]]]],[11,"set_public_key","","Set public key to given `EcPoint`",34,[[["self"],["ecpointref"]],["result",["eckeybuilderref","errorstack"]]]],[11,"generate_key","","Generate public and private keys.",34,[[["self"]],["result",["eckeybuilderref","errorstack"]]]],[11,"set_public_key_affine_coordinates","","Sets the public key based on affine coordinates.",34,[[["self"],["bignumref"],["bignumref"]],["result",["eckeybuilderref","errorstack"]]]],[11,"set_private_key","","Sets the private key.",34,[[["self"],["bignumref"]],["result",["eckeybuilderref","errorstack"]]]],[0,"error","openssl","Errors returned by OpenSSL library.",N,N],[3,"ErrorStack","openssl::error","Collection of [`Error`]s from OpenSSL.",N,N],[3,"Error","","An error reported from OpenSSL.",N,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["errorstack"]]],[11,"get","","Returns the contents of the OpenSSL error stack.",35,[[],["errorstack"]]],[11,"errors","","Returns the errors in the stack.",35,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"description","","",35,[[["self"]],["str"]]],[11,"clone","","",36,[[["self"]],["error"]]],[11,"get","","Returns the first error on the OpenSSL error stack.",36,[[],["option",["error"]]]],[11,"code","","Returns the raw OpenSSL error code for this error.",36,[[["self"]],["c_ulong"]]],[11,"library","","Returns the name of the library reporting the error, if available.",36,[[["self"]],["option",["str"]]]],[11,"function","","Returns the name of the function reporting the error.",36,[[["self"]],["option",["str"]]]],[11,"reason","","Returns the reason for the error.",36,[[["self"]],["option",["str"]]]],[11,"file","","Returns the name of the source file which encountered the error.",36,[[["self"]],["str"]]],[11,"line","","Returns the line in the source file which encountered the error.",36,[[["self"]],["c_int"]]],[11,"data","","Returns additional data describing the error.",36,[[["self"]],["option",["str"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"description","","",36,[[["self"]],["str"]]],[0,"ex_data","openssl","",N,N],[3,"Index","openssl::ex_data","A slot in a type's \"extra data\" structure.",N,N],[11,"clone","","",37,[[["self"]],["index"]]],[11,"from_raw","","",37,[[["c_int"]],["index"]]],[11,"as_raw","","",37,[[["self"]],["c_int"]]],[0,"hash","openssl","",N,N],[3,"MessageDigest","openssl::hash","",N,N],[3,"Hasher","","Provides message digest (hash) computation.",N,N],[3,"DigestBytes","","The resulting bytes of a digest.",N,N],[5,"hash","","",N,N],[5,"hash2","","Computes the hash of the `data` with the hash `t`.",N,N],[11,"clone","","",38,[[["self"]],["messagedigest"]]],[11,"md5","","",38,[[],["messagedigest"]]],[11,"sha1","","",38,[[],["messagedigest"]]],[11,"sha224","","",38,[[],["messagedigest"]]],[11,"sha256","","",38,[[],["messagedigest"]]],[11,"sha384","","",38,[[],["messagedigest"]]],[11,"sha512","","",38,[[],["messagedigest"]]],[11,"ripemd160","","",38,[[],["messagedigest"]]],[11,"as_ptr","","",38,N],[11,"new","","Creates a new `Hasher` with the specified hash type.",39,[[["messagedigest"]],["result",["hasher","errorstack"]]]],[11,"update","","Feeds data into the hasher.",39,N],[11,"finish","","",39,[[["self"]],["result",["vec","errorstack"]]]],[11,"finish2","","Returns the hash of the data written and resets the hasher.",39,[[["self"]],["result",["digestbytes","errorstack"]]]],[11,"write","","",39,N],[11,"flush","","",39,[[["self"]],["result"]]],[11,"clone","","",39,[[["self"]],["hasher"]]],[11,"drop","","",39,[[["self"]]]],[11,"clone","","",40,[[["self"]],["digestbytes"]]],[11,"deref","","",40,N],[11,"deref_mut","","",40,N],[11,"as_ref","","",40,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[0,"memcmp","openssl","Utilities to safely compare cryptographic values.",N,N],[5,"eq","openssl::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",N,N],[0,"nid","openssl","A collection of numerical identifiers for OpenSSL objects.",N,N],[3,"Nid","openssl::nid","A numerical identifier for an OpenSSL object.",N,N],[17,"UNDEF","","",N,N],[17,"ITU_T","","",N,N],[17,"CCITT","","",N,N],[17,"ISO","","",N,N],[17,"JOINT_ISO_ITU_T","","",N,N],[17,"JOINT_ISO_CCITT","","",N,N],[17,"MEMBER_BODY","","",N,N],[17,"IDENTIFIED_ORGANIZATION","","",N,N],[17,"HMAC_MD5","","",N,N],[17,"HMAC_SHA1","","",N,N],[17,"CERTICOM_ARC","","",N,N],[17,"INTERNATIONAL_ORGANIZATIONS","","",N,N],[17,"WAP","","",N,N],[17,"WAP_WSG","","",N,N],[17,"SELECTED_ATTRIBUTE_TYPES","","",N,N],[17,"CLEARANCE","","",N,N],[17,"ISO_US","","",N,N],[17,"X9_57","","",N,N],[17,"X9CM","","",N,N],[17,"DSA","","",N,N],[17,"DSAWITHSHA1","","",N,N],[17,"ANSI_X9_62","","",N,N],[17,"X9_62_PRIME_FIELD","","",N,N],[17,"X9_62_CHARACTERISTIC_TWO_FIELD","","",N,N],[17,"X9_62_ID_CHARACTERISTIC_TWO_BASIS","","",N,N],[17,"X9_62_ONBASIS","","",N,N],[17,"X9_62_TPBASIS","","",N,N],[17,"X9_62_PPBASIS","","",N,N],[17,"X9_62_ID_ECPUBLICKEY","","",N,N],[17,"X9_62_C2PNB163V1","","",N,N],[17,"X9_62_C2PNB163V2","","",N,N],[17,"X9_62_C2PNB163V3","","",N,N],[17,"X9_62_C2PNB176V1","","",N,N],[17,"X9_62_C2TNB191V1","","",N,N],[17,"X9_62_C2TNB191V2","","",N,N],[17,"X9_62_C2TNB191V3","","",N,N],[17,"X9_62_C2ONB191V4","","",N,N],[17,"X9_62_C2ONB191V5","","",N,N],[17,"X9_62_C2PNB208W1","","",N,N],[17,"X9_62_C2TNB239V1","","",N,N],[17,"X9_62_C2TNB239V2","","",N,N],[17,"X9_62_C2TNB239V3","","",N,N],[17,"X9_62_C2ONB239V4","","",N,N],[17,"X9_62_C2ONB239V5","","",N,N],[17,"X9_62_C2PNB272W1","","",N,N],[17,"X9_62_C2PNB304W1","","",N,N],[17,"X9_62_C2TNB359V1","","",N,N],[17,"X9_62_C2PNB368W1","","",N,N],[17,"X9_62_C2TNB431R1","","",N,N],[17,"X9_62_PRIME192V1","","",N,N],[17,"X9_62_PRIME192V2","","",N,N],[17,"X9_62_PRIME192V3","","",N,N],[17,"X9_62_PRIME239V1","","",N,N],[17,"X9_62_PRIME239V2","","",N,N],[17,"X9_62_PRIME239V3","","",N,N],[17,"X9_62_PRIME256V1","","",N,N],[17,"ECDSA_WITH_SHA1","","",N,N],[17,"ECDSA_WITH_RECOMMENDED","","",N,N],[17,"ECDSA_WITH_SPECIFIED","","",N,N],[17,"ECDSA_WITH_SHA224","","",N,N],[17,"ECDSA_WITH_SHA256","","",N,N],[17,"ECDSA_WITH_SHA384","","",N,N],[17,"ECDSA_WITH_SHA512","","",N,N],[17,"SECP112R1","","",N,N],[17,"SECP112R2","","",N,N],[17,"SECP128R1","","",N,N],[17,"SECP128R2","","",N,N],[17,"SECP160K1","","",N,N],[17,"SECP160R1","","",N,N],[17,"SECP160R2","","",N,N],[17,"SECP192K1","","",N,N],[17,"SECP224K1","","",N,N],[17,"SECP224R1","","",N,N],[17,"SECP256K1","","",N,N],[17,"SECP384R1","","",N,N],[17,"SECP521R1","","",N,N],[17,"SECT113R1","","",N,N],[17,"SECT113R2","","",N,N],[17,"SECT131R1","","",N,N],[17,"SECT131R2","","",N,N],[17,"SECT163K1","","",N,N],[17,"SECT163R1","","",N,N],[17,"SECT163R2","","",N,N],[17,"SECT193R1","","",N,N],[17,"SECT193R2","","",N,N],[17,"SECT233K1","","",N,N],[17,"SECT233R1","","",N,N],[17,"SECT239K1","","",N,N],[17,"SECT283K1","","",N,N],[17,"SECT283R1","","",N,N],[17,"SECT409K1","","",N,N],[17,"SECT409R1","","",N,N],[17,"SECT571K1","","",N,N],[17,"SECT571R1","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS1","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS3","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS4","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS5","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS6","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS7","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS8","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS9","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS10","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS11","","",N,N],[17,"WAP_WSG_IDM_ECID_WTLS12","","",N,N],[17,"CAST5_CBC","","",N,N],[17,"CAST5_ECB","","",N,N],[17,"CAST5_CFB64","","",N,N],[17,"CAST5_OFB64","","",N,N],[17,"PBEWITHMD5ANDCAST5_CBC","","",N,N],[17,"ID_PASSWORDBASEDMAC","","",N,N],[17,"ID_DHBASEDMAC","","",N,N],[17,"RSADSI","","",N,N],[17,"PKCS","","",N,N],[17,"PKCS1","","",N,N],[17,"RSAENCRYPTION","","",N,N],[17,"MD2WITHRSAENCRYPTION","","",N,N],[17,"MD4WITHRSAENCRYPTION","","",N,N],[17,"MD5WITHRSAENCRYPTION","","",N,N],[17,"SHA1WITHRSAENCRYPTION","","",N,N],[17,"RSAESOAEP","","",N,N],[17,"MGF1","","",N,N],[17,"RSASSAPSS","","",N,N],[17,"SHA256WITHRSAENCRYPTION","","",N,N],[17,"SHA384WITHRSAENCRYPTION","","",N,N],[17,"SHA512WITHRSAENCRYPTION","","",N,N],[17,"SHA224WITHRSAENCRYPTION","","",N,N],[17,"PKCS3","","",N,N],[17,"DHKEYAGREEMENT","","",N,N],[17,"PKCS5","","",N,N],[17,"PBEWITHMD2ANDDES_CBC","","",N,N],[17,"PBEWITHMD5ANDDES_CBC","","",N,N],[17,"PBEWITHMD2ANDRC2_CBC","","",N,N],[17,"PBEWITHMD5ANDRC2_CBC","","",N,N],[17,"PBEWITHSHA1ANDDES_CBC","","",N,N],[17,"PBEWITHSHA1ANDRC2_CBC","","",N,N],[17,"ID_PBKDF2","","",N,N],[17,"PBES2","","",N,N],[17,"PBMAC1","","",N,N],[17,"PKCS7","","",N,N],[17,"PKCS7_DATA","","",N,N],[17,"PKCS7_SIGNED","","",N,N],[17,"PKCS7_ENVELOPED","","",N,N],[17,"PKCS7_SIGNEDANDENVELOPED","","",N,N],[17,"PKCS7_DIGEST","","",N,N],[17,"PKCS7_ENCRYPTED","","",N,N],[17,"PKCS9","","",N,N],[17,"PKCS9_EMAILADDRESS","","",N,N],[17,"PKCS9_UNSTRUCTUREDNAME","","",N,N],[17,"PKCS9_CONTENTTYPE","","",N,N],[17,"PKCS9_MESSAGEDIGEST","","",N,N],[17,"PKCS9_SIGNINGTIME","","",N,N],[17,"PKCS9_COUNTERSIGNATURE","","",N,N],[17,"PKCS9_CHALLENGEPASSWORD","","",N,N],[17,"PKCS9_UNSTRUCTUREDADDRESS","","",N,N],[17,"PKCS9_EXTCERTATTRIBUTES","","",N,N],[17,"EXT_REQ","","",N,N],[17,"SMIMECAPABILITIES","","",N,N],[17,"SMIME","","",N,N],[17,"ID_SMIME_MOD","","",N,N],[17,"ID_SMIME_CT","","",N,N],[17,"ID_SMIME_AA","","",N,N],[17,"ID_SMIME_ALG","","",N,N],[17,"ID_SMIME_CD","","",N,N],[17,"ID_SMIME_SPQ","","",N,N],[17,"ID_SMIME_CTI","","",N,N],[17,"ID_SMIME_MOD_CMS","","",N,N],[17,"ID_SMIME_MOD_ESS","","",N,N],[17,"ID_SMIME_MOD_OID","","",N,N],[17,"ID_SMIME_MOD_MSG_V3","","",N,N],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_88","","",N,N],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_97","","",N,N],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_88","","",N,N],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_97","","",N,N],[17,"ID_SMIME_CT_RECEIPT","","",N,N],[17,"ID_SMIME_CT_AUTHDATA","","",N,N],[17,"ID_SMIME_CT_PUBLISHCERT","","",N,N],[17,"ID_SMIME_CT_TSTINFO","","",N,N],[17,"ID_SMIME_CT_TDTINFO","","",N,N],[17,"ID_SMIME_CT_CONTENTINFO","","",N,N],[17,"ID_SMIME_CT_DVCSREQUESTDATA","","",N,N],[17,"ID_SMIME_CT_DVCSRESPONSEDATA","","",N,N],[17,"ID_SMIME_CT_COMPRESSEDDATA","","",N,N],[17,"ID_CT_ASCIITEXTWITHCRLF","","",N,N],[17,"ID_SMIME_AA_RECEIPTREQUEST","","",N,N],[17,"ID_SMIME_AA_SECURITYLABEL","","",N,N],[17,"ID_SMIME_AA_MLEXPANDHISTORY","","",N,N],[17,"ID_SMIME_AA_CONTENTHINT","","",N,N],[17,"ID_SMIME_AA_MSGSIGDIGEST","","",N,N],[17,"ID_SMIME_AA_ENCAPCONTENTTYPE","","",N,N],[17,"ID_SMIME_AA_CONTENTIDENTIFIER","","",N,N],[17,"ID_SMIME_AA_MACVALUE","","",N,N],[17,"ID_SMIME_AA_EQUIVALENTLABELS","","",N,N],[17,"ID_SMIME_AA_CONTENTREFERENCE","","",N,N],[17,"ID_SMIME_AA_ENCRYPKEYPREF","","",N,N],[17,"ID_SMIME_AA_SIGNINGCERTIFICATE","","",N,N],[17,"ID_SMIME_AA_SMIMEENCRYPTCERTS","","",N,N],[17,"ID_SMIME_AA_TIMESTAMPTOKEN","","",N,N],[17,"ID_SMIME_AA_ETS_SIGPOLICYID","","",N,N],[17,"ID_SMIME_AA_ETS_COMMITMENTTYPE","","",N,N],[17,"ID_SMIME_AA_ETS_SIGNERLOCATION","","",N,N],[17,"ID_SMIME_AA_ETS_SIGNERATTR","","",N,N],[17,"ID_SMIME_AA_ETS_OTHERSIGCERT","","",N,N],[17,"ID_SMIME_AA_ETS_CONTENTTIMESTAMP","","",N,N],[17,"ID_SMIME_AA_ETS_CERTIFICATEREFS","","",N,N],[17,"ID_SMIME_AA_ETS_REVOCATIONREFS","","",N,N],[17,"ID_SMIME_AA_ETS_CERTVALUES","","",N,N],[17,"ID_SMIME_AA_ETS_REVOCATIONVALUES","","",N,N],[17,"ID_SMIME_AA_ETS_ESCTIMESTAMP","","",N,N],[17,"ID_SMIME_AA_ETS_CERTCRLTIMESTAMP","","",N,N],[17,"ID_SMIME_AA_ETS_ARCHIVETIMESTAMP","","",N,N],[17,"ID_SMIME_AA_SIGNATURETYPE","","",N,N],[17,"ID_SMIME_AA_DVCS_DVC","","",N,N],[17,"ID_SMIME_ALG_ESDHWITH3DES","","",N,N],[17,"ID_SMIME_ALG_ESDHWITHRC2","","",N,N],[17,"ID_SMIME_ALG_3DESWRAP","","",N,N],[17,"ID_SMIME_ALG_RC2WRAP","","",N,N],[17,"ID_SMIME_ALG_ESDH","","",N,N],[17,"ID_SMIME_ALG_CMS3DESWRAP","","",N,N],[17,"ID_SMIME_ALG_CMSRC2WRAP","","",N,N],[17,"ID_ALG_PWRI_KEK","","",N,N],[17,"ID_SMIME_CD_LDAP","","",N,N],[17,"ID_SMIME_SPQ_ETS_SQT_URI","","",N,N],[17,"ID_SMIME_SPQ_ETS_SQT_UNOTICE","","",N,N],[17,"ID_SMIME_CTI_ETS_PROOFOFORIGIN","","",N,N],[17,"ID_SMIME_CTI_ETS_PROOFOFRECEIPT","","",N,N],[17,"ID_SMIME_CTI_ETS_PROOFOFDELIVERY","","",N,N],[17,"ID_SMIME_CTI_ETS_PROOFOFSENDER","","",N,N],[17,"ID_SMIME_CTI_ETS_PROOFOFAPPROVAL","","",N,N],[17,"ID_SMIME_CTI_ETS_PROOFOFCREATION","","",N,N],[17,"FRIENDLYNAME","","",N,N],[17,"LOCALKEYID","","",N,N],[17,"MS_CSP_NAME","","",N,N],[17,"LOCALKEYSET","","",N,N],[17,"X509CERTIFICATE","","",N,N],[17,"SDSICERTIFICATE","","",N,N],[17,"X509CRL","","",N,N],[17,"PBE_WITHSHA1AND128BITRC4","","",N,N],[17,"PBE_WITHSHA1AND40BITRC4","","",N,N],[17,"PBE_WITHSHA1AND3_KEY_TRIPLEDES_CBC","","",N,N],[17,"PBE_WITHSHA1AND2_KEY_TRIPLEDES_CBC","","",N,N],[17,"PBE_WITHSHA1AND128BITRC2_CBC","","",N,N],[17,"PBE_WITHSHA1AND40BITRC2_CBC","","",N,N],[17,"KEYBAG","","",N,N],[17,"PKCS8SHROUDEDKEYBAG","","",N,N],[17,"CERTBAG","","",N,N],[17,"CRLBAG","","",N,N],[17,"SECRETBAG","","",N,N],[17,"SAFECONTENTSBAG","","",N,N],[17,"MD2","","",N,N],[17,"MD4","","",N,N],[17,"MD5","","",N,N],[17,"MD5_SHA1","","",N,N],[17,"HMACWITHMD5","","",N,N],[17,"HMACWITHSHA1","","",N,N],[17,"HMACWITHSHA224","","",N,N],[17,"HMACWITHSHA256","","",N,N],[17,"HMACWITHSHA384","","",N,N],[17,"HMACWITHSHA512","","",N,N],[17,"RC2_CBC","","",N,N],[17,"RC2_ECB","","",N,N],[17,"RC2_CFB64","","",N,N],[17,"RC2_OFB64","","",N,N],[17,"RC2_40_CBC","","",N,N],[17,"RC2_64_CBC","","",N,N],[17,"RC4","","",N,N],[17,"RC4_40","","",N,N],[17,"DES_EDE3_CBC","","",N,N],[17,"RC5_CBC","","",N,N],[17,"RC5_ECB","","",N,N],[17,"RC5_CFB64","","",N,N],[17,"RC5_OFB64","","",N,N],[17,"MS_EXT_REQ","","",N,N],[17,"MS_CODE_IND","","",N,N],[17,"MS_CODE_COM","","",N,N],[17,"MS_CTL_SIGN","","",N,N],[17,"MS_SGC","","",N,N],[17,"MS_EFS","","",N,N],[17,"MS_SMARTCARD_LOGIN","","",N,N],[17,"MS_UPN","","",N,N],[17,"IDEA_CBC","","",N,N],[17,"IDEA_ECB","","",N,N],[17,"IDEA_CFB64","","",N,N],[17,"IDEA_OFB64","","",N,N],[17,"BF_CBC","","",N,N],[17,"BF_ECB","","",N,N],[17,"BF_CFB64","","",N,N],[17,"BF_OFB64","","",N,N],[17,"ID_PKIX","","",N,N],[17,"ID_PKIX_MOD","","",N,N],[17,"ID_PE","","",N,N],[17,"ID_QT","","",N,N],[17,"ID_KP","","",N,N],[17,"ID_IT","","",N,N],[17,"ID_PKIP","","",N,N],[17,"ID_ALG","","",N,N],[17,"ID_CMC","","",N,N],[17,"ID_ON","","",N,N],[17,"ID_PDA","","",N,N],[17,"ID_ACA","","",N,N],[17,"ID_QCS","","",N,N],[17,"ID_CCT","","",N,N],[17,"ID_PPL","","",N,N],[17,"ID_AD","","",N,N],[17,"ID_PKIX1_EXPLICIT_88","","",N,N],[17,"ID_PKIX1_IMPLICIT_88","","",N,N],[17,"ID_PKIX1_EXPLICIT_93","","",N,N],[17,"ID_PKIX1_IMPLICIT_93","","",N,N],[17,"ID_MOD_CRMF","","",N,N],[17,"ID_MOD_CMC","","",N,N],[17,"ID_MOD_KEA_PROFILE_88","","",N,N],[17,"ID_MOD_KEA_PROFILE_93","","",N,N],[17,"ID_MOD_CMP","","",N,N],[17,"ID_MOD_QUALIFIED_CERT_88","","",N,N],[17,"ID_MOD_QUALIFIED_CERT_93","","",N,N],[17,"ID_MOD_ATTRIBUTE_CERT","","",N,N],[17,"ID_MOD_TIMESTAMP_PROTOCOL","","",N,N],[17,"ID_MOD_OCSP","","",N,N],[17,"ID_MOD_DVCS","","",N,N],[17,"ID_MOD_CMP2000","","",N,N],[17,"INFO_ACCESS","","",N,N],[17,"BIOMETRICINFO","","",N,N],[17,"QCSTATEMENTS","","",N,N],[17,"AC_AUDITENTITY","","",N,N],[17,"AC_TARGETING","","",N,N],[17,"AACONTROLS","","",N,N],[17,"SBGP_IPADDRBLOCK","","",N,N],[17,"SBGP_AUTONOMOUSSYSNUM","","",N,N],[17,"SBGP_ROUTERIDENTIFIER","","",N,N],[17,"AC_PROXYING","","",N,N],[17,"SINFO_ACCESS","","",N,N],[17,"PROXYCERTINFO","","",N,N],[17,"ID_QT_CPS","","",N,N],[17,"ID_QT_UNOTICE","","",N,N],[17,"TEXTNOTICE","","",N,N],[17,"SERVER_AUTH","","",N,N],[17,"CLIENT_AUTH","","",N,N],[17,"CODE_SIGN","","",N,N],[17,"EMAIL_PROTECT","","",N,N],[17,"IPSECENDSYSTEM","","",N,N],[17,"IPSECTUNNEL","","",N,N],[17,"IPSECUSER","","",N,N],[17,"TIME_STAMP","","",N,N],[17,"OCSP_SIGN","","",N,N],[17,"DVCS","","",N,N],[17,"ID_IT_CAPROTENCCERT","","",N,N],[17,"ID_IT_SIGNKEYPAIRTYPES","","",N,N],[17,"ID_IT_ENCKEYPAIRTYPES","","",N,N],[17,"ID_IT_PREFERREDSYMMALG","","",N,N],[17,"ID_IT_CAKEYUPDATEINFO","","",N,N],[17,"ID_IT_CURRENTCRL","","",N,N],[17,"ID_IT_UNSUPPORTEDOIDS","","",N,N],[17,"ID_IT_SUBSCRIPTIONREQUEST","","",N,N],[17,"ID_IT_SUBSCRIPTIONRESPONSE","","",N,N],[17,"ID_IT_KEYPAIRPARAMREQ","","",N,N],[17,"ID_IT_KEYPAIRPARAMREP","","",N,N],[17,"ID_IT_REVPASSPHRASE","","",N,N],[17,"ID_IT_IMPLICITCONFIRM","","",N,N],[17,"ID_IT_CONFIRMWAITTIME","","",N,N],[17,"ID_IT_ORIGPKIMESSAGE","","",N,N],[17,"ID_IT_SUPPLANGTAGS","","",N,N],[17,"ID_REGCTRL","","",N,N],[17,"ID_REGINFO","","",N,N],[17,"ID_REGCTRL_REGTOKEN","","",N,N],[17,"ID_REGCTRL_AUTHENTICATOR","","",N,N],[17,"ID_REGCTRL_PKIPUBLICATIONINFO","","",N,N],[17,"ID_REGCTRL_PKIARCHIVEOPTIONS","","",N,N],[17,"ID_REGCTRL_OLDCERTID","","",N,N],[17,"ID_REGCTRL_PROTOCOLENCRKEY","","",N,N],[17,"ID_REGINFO_UTF8PAIRS","","",N,N],[17,"ID_REGINFO_CERTREQ","","",N,N],[17,"ID_ALG_DES40","","",N,N],[17,"ID_ALG_NOSIGNATURE","","",N,N],[17,"ID_ALG_DH_SIG_HMAC_SHA1","","",N,N],[17,"ID_ALG_DH_POP","","",N,N],[17,"ID_CMC_STATUSINFO","","",N,N],[17,"ID_CMC_IDENTIFICATION","","",N,N],[17,"ID_CMC_IDENTITYPROOF","","",N,N],[17,"ID_CMC_DATARETURN","","",N,N],[17,"ID_CMC_TRANSACTIONID","","",N,N],[17,"ID_CMC_SENDERNONCE","","",N,N],[17,"ID_CMC_RECIPIENTNONCE","","",N,N],[17,"ID_CMC_ADDEXTENSIONS","","",N,N],[17,"ID_CMC_ENCRYPTEDPOP","","",N,N],[17,"ID_CMC_DECRYPTEDPOP","","",N,N],[17,"ID_CMC_LRAPOPWITNESS","","",N,N],[17,"ID_CMC_GETCERT","","",N,N],[17,"ID_CMC_GETCRL","","",N,N],[17,"ID_CMC_REVOKEREQUEST","","",N,N],[17,"ID_CMC_REGINFO","","",N,N],[17,"ID_CMC_RESPONSEINFO","","",N,N],[17,"ID_CMC_QUERYPENDING","","",N,N],[17,"ID_CMC_POPLINKRANDOM","","",N,N],[17,"ID_CMC_POPLINKWITNESS","","",N,N],[17,"ID_CMC_CONFIRMCERTACCEPTANCE","","",N,N],[17,"ID_ON_PERSONALDATA","","",N,N],[17,"ID_ON_PERMANENTIDENTIFIER","","",N,N],[17,"ID_PDA_DATEOFBIRTH","","",N,N],[17,"ID_PDA_PLACEOFBIRTH","","",N,N],[17,"ID_PDA_GENDER","","",N,N],[17,"ID_PDA_COUNTRYOFCITIZENSHIP","","",N,N],[17,"ID_PDA_COUNTRYOFRESIDENCE","","",N,N],[17,"ID_ACA_AUTHENTICATIONINFO","","",N,N],[17,"ID_ACA_ACCESSIDENTITY","","",N,N],[17,"ID_ACA_CHARGINGIDENTITY","","",N,N],[17,"ID_ACA_GROUP","","",N,N],[17,"ID_ACA_ROLE","","",N,N],[17,"ID_ACA_ENCATTRS","","",N,N],[17,"ID_QCS_PKIXQCSYNTAX_V1","","",N,N],[17,"ID_CCT_CRS","","",N,N],[17,"ID_CCT_PKIDATA","","",N,N],[17,"ID_CCT_PKIRESPONSE","","",N,N],[17,"ID_PPL_ANYLANGUAGE","","",N,N],[17,"ID_PPL_INHERITALL","","",N,N],[17,"INDEPENDENT","","",N,N],[17,"AD_OCSP","","",N,N],[17,"AD_CA_ISSUERS","","",N,N],[17,"AD_TIMESTAMPING","","",N,N],[17,"AD_DVCS","","",N,N],[17,"CAREPOSITORY","","",N,N],[17,"ID_PKIX_OCSP_BASIC","","",N,N],[17,"ID_PKIX_OCSP_NONCE","","",N,N],[17,"ID_PKIX_OCSP_CRLID","","",N,N],[17,"ID_PKIX_OCSP_ACCEPTABLERESPONSES","","",N,N],[17,"ID_PKIX_OCSP_NOCHECK","","",N,N],[17,"ID_PKIX_OCSP_ARCHIVECUTOFF","","",N,N],[17,"ID_PKIX_OCSP_SERVICELOCATOR","","",N,N],[17,"ID_PKIX_OCSP_EXTENDEDSTATUS","","",N,N],[17,"ID_PKIX_OCSP_VALID","","",N,N],[17,"ID_PKIX_OCSP_PATH","","",N,N],[17,"ID_PKIX_OCSP_TRUSTROOT","","",N,N],[17,"ALGORITHM","","",N,N],[17,"MD5WITHRSA","","",N,N],[17,"DES_ECB","","",N,N],[17,"DES_CBC","","",N,N],[17,"DES_OFB64","","",N,N],[17,"DES_CFB64","","",N,N],[17,"RSASIGNATURE","","",N,N],[17,"DSA_2","","",N,N],[17,"DSAWITHSHA","","",N,N],[17,"SHAWITHRSAENCRYPTION","","",N,N],[17,"DES_EDE_ECB","","",N,N],[17,"DES_EDE3_ECB","","",N,N],[17,"DES_EDE_CBC","","",N,N],[17,"DES_EDE_CFB64","","",N,N],[17,"DES_EDE3_CFB64","","",N,N],[17,"DES_EDE_OFB64","","",N,N],[17,"DES_EDE3_OFB64","","",N,N],[17,"DESX_CBC","","",N,N],[17,"SHA","","",N,N],[17,"SHA1","","",N,N],[17,"DSAWITHSHA1_2","","",N,N],[17,"SHA1WITHRSA","","",N,N],[17,"RIPEMD160","","",N,N],[17,"RIPEMD160WITHRSA","","",N,N],[17,"SXNET","","",N,N],[17,"X500","","",N,N],[17,"X509","","",N,N],[17,"COMMONNAME","","",N,N],[17,"SURNAME","","",N,N],[17,"SERIALNUMBER","","",N,N],[17,"COUNTRYNAME","","",N,N],[17,"LOCALITYNAME","","",N,N],[17,"STATEORPROVINCENAME","","",N,N],[17,"STREETADDRESS","","",N,N],[17,"ORGANIZATIONNAME","","",N,N],[17,"ORGANIZATIONALUNITNAME","","",N,N],[17,"TITLE","","",N,N],[17,"DESCRIPTION","","",N,N],[17,"SEARCHGUIDE","","",N,N],[17,"BUSINESSCATEGORY","","",N,N],[17,"POSTALADDRESS","","",N,N],[17,"POSTALCODE","","",N,N],[17,"POSTOFFICEBOX","","",N,N],[17,"PHYSICALDELIVERYOFFICENAME","","",N,N],[17,"TELEPHONENUMBER","","",N,N],[17,"TELEXNUMBER","","",N,N],[17,"TELETEXTERMINALIDENTIFIER","","",N,N],[17,"FACSIMILETELEPHONENUMBER","","",N,N],[17,"X121ADDRESS","","",N,N],[17,"INTERNATIONALISDNNUMBER","","",N,N],[17,"REGISTEREDADDRESS","","",N,N],[17,"DESTINATIONINDICATOR","","",N,N],[17,"PREFERREDDELIVERYMETHOD","","",N,N],[17,"PRESENTATIONADDRESS","","",N,N],[17,"SUPPORTEDAPPLICATIONCONTEXT","","",N,N],[17,"MEMBER","","",N,N],[17,"OWNER","","",N,N],[17,"ROLEOCCUPANT","","",N,N],[17,"SEEALSO","","",N,N],[17,"USERPASSWORD","","",N,N],[17,"USERCERTIFICATE","","",N,N],[17,"CACERTIFICATE","","",N,N],[17,"AUTHORITYREVOCATIONLIST","","",N,N],[17,"CERTIFICATEREVOCATIONLIST","","",N,N],[17,"CROSSCERTIFICATEPAIR","","",N,N],[17,"NAME","","",N,N],[17,"GIVENNAME","","",N,N],[17,"INITIALS","","",N,N],[17,"GENERATIONQUALIFIER","","",N,N],[17,"X500UNIQUEIDENTIFIER","","",N,N],[17,"DNQUALIFIER","","",N,N],[17,"ENHANCEDSEARCHGUIDE","","",N,N],[17,"PROTOCOLINFORMATION","","",N,N],[17,"DISTINGUISHEDNAME","","",N,N],[17,"UNIQUEMEMBER","","",N,N],[17,"HOUSEIDENTIFIER","","",N,N],[17,"SUPPORTEDALGORITHMS","","",N,N],[17,"DELTAREVOCATIONLIST","","",N,N],[17,"DMDNAME","","",N,N],[17,"PSEUDONYM","","",N,N],[17,"ROLE","","",N,N],[17,"X500ALGORITHMS","","",N,N],[17,"RSA","","",N,N],[17,"MDC2WITHRSA","","",N,N],[17,"MDC2","","",N,N],[17,"ID_CE","","",N,N],[17,"SUBJECT_DIRECTORY_ATTRIBUTES","","",N,N],[17,"SUBJECT_KEY_IDENTIFIER","","",N,N],[17,"KEY_USAGE","","",N,N],[17,"PRIVATE_KEY_USAGE_PERIOD","","",N,N],[17,"SUBJECT_ALT_NAME","","",N,N],[17,"ISSUER_ALT_NAME","","",N,N],[17,"BASIC_CONSTRAINTS","","",N,N],[17,"CRL_NUMBER","","",N,N],[17,"CRL_REASON","","",N,N],[17,"INVALIDITY_DATE","","",N,N],[17,"DELTA_CRL","","",N,N],[17,"ISSUING_DISTRIBUTION_POINT","","",N,N],[17,"CERTIFICATE_ISSUER","","",N,N],[17,"NAME_CONSTRAINTS","","",N,N],[17,"CRL_DISTRIBUTION_POINTS","","",N,N],[17,"CERTIFICATE_POLICIES","","",N,N],[17,"ANY_POLICY","","",N,N],[17,"POLICY_MAPPINGS","","",N,N],[17,"AUTHORITY_KEY_IDENTIFIER","","",N,N],[17,"POLICY_CONSTRAINTS","","",N,N],[17,"EXT_KEY_USAGE","","",N,N],[17,"FRESHEST_CRL","","",N,N],[17,"INHIBIT_ANY_POLICY","","",N,N],[17,"TARGET_INFORMATION","","",N,N],[17,"NO_REV_AVAIL","","",N,N],[17,"ANYEXTENDEDKEYUSAGE","","",N,N],[17,"NETSCAPE","","",N,N],[17,"NETSCAPE_CERT_EXTENSION","","",N,N],[17,"NETSCAPE_DATA_TYPE","","",N,N],[17,"NETSCAPE_CERT_TYPE","","",N,N],[17,"NETSCAPE_BASE_URL","","",N,N],[17,"NETSCAPE_REVOCATION_URL","","",N,N],[17,"NETSCAPE_CA_REVOCATION_URL","","",N,N],[17,"NETSCAPE_RENEWAL_URL","","",N,N],[17,"NETSCAPE_CA_POLICY_URL","","",N,N],[17,"NETSCAPE_SSL_SERVER_NAME","","",N,N],[17,"NETSCAPE_COMMENT","","",N,N],[17,"NETSCAPE_CERT_SEQUENCE","","",N,N],[17,"NS_SGC","","",N,N],[17,"ORG","","",N,N],[17,"DOD","","",N,N],[17,"IANA","","",N,N],[17,"DIRECTORY","","",N,N],[17,"MANAGEMENT","","",N,N],[17,"EXPERIMENTAL","","",N,N],[17,"PRIVATE","","",N,N],[17,"SECURITY","","",N,N],[17,"SNMPV2","","",N,N],[17,"MAIL","","",N,N],[17,"ENTERPRISES","","",N,N],[17,"DCOBJECT","","",N,N],[17,"MIME_MHS","","",N,N],[17,"MIME_MHS_HEADINGS","","",N,N],[17,"MIME_MHS_BODIES","","",N,N],[17,"ID_HEX_PARTIAL_MESSAGE","","",N,N],[17,"ID_HEX_MULTIPART_MESSAGE","","",N,N],[17,"ZLIB_COMPRESSION","","",N,N],[17,"AES_128_ECB","","",N,N],[17,"AES_128_CBC","","",N,N],[17,"AES_128_OFB128","","",N,N],[17,"AES_128_CFB128","","",N,N],[17,"ID_AES128_WRAP","","",N,N],[17,"AES_128_GCM","","",N,N],[17,"AES_128_CCM","","",N,N],[17,"ID_AES128_WRAP_PAD","","",N,N],[17,"AES_192_ECB","","",N,N],[17,"AES_192_CBC","","",N,N],[17,"AES_192_OFB128","","",N,N],[17,"AES_192_CFB128","","",N,N],[17,"ID_AES192_WRAP","","",N,N],[17,"AES_192_GCM","","",N,N],[17,"AES_192_CCM","","",N,N],[17,"ID_AES192_WRAP_PAD","","",N,N],[17,"AES_256_ECB","","",N,N],[17,"AES_256_CBC","","",N,N],[17,"AES_256_OFB128","","",N,N],[17,"AES_256_CFB128","","",N,N],[17,"ID_AES256_WRAP","","",N,N],[17,"AES_256_GCM","","",N,N],[17,"AES_256_CCM","","",N,N],[17,"ID_AES256_WRAP_PAD","","",N,N],[17,"AES_128_CFB1","","",N,N],[17,"AES_192_CFB1","","",N,N],[17,"AES_256_CFB1","","",N,N],[17,"AES_128_CFB8","","",N,N],[17,"AES_192_CFB8","","",N,N],[17,"AES_256_CFB8","","",N,N],[17,"AES_128_CTR","","",N,N],[17,"AES_192_CTR","","",N,N],[17,"AES_256_CTR","","",N,N],[17,"AES_128_XTS","","",N,N],[17,"AES_256_XTS","","",N,N],[17,"DES_CFB1","","",N,N],[17,"DES_CFB8","","",N,N],[17,"DES_EDE3_CFB1","","",N,N],[17,"DES_EDE3_CFB8","","",N,N],[17,"SHA256","","",N,N],[17,"SHA384","","",N,N],[17,"SHA512","","",N,N],[17,"SHA224","","",N,N],[17,"DSA_WITH_SHA224","","",N,N],[17,"DSA_WITH_SHA256","","",N,N],[17,"HOLD_INSTRUCTION_CODE","","",N,N],[17,"HOLD_INSTRUCTION_NONE","","",N,N],[17,"HOLD_INSTRUCTION_CALL_ISSUER","","",N,N],[17,"HOLD_INSTRUCTION_REJECT","","",N,N],[17,"DATA","","",N,N],[17,"PSS","","",N,N],[17,"UCL","","",N,N],[17,"PILOT","","",N,N],[17,"PILOTATTRIBUTETYPE","","",N,N],[17,"PILOTATTRIBUTESYNTAX","","",N,N],[17,"PILOTOBJECTCLASS","","",N,N],[17,"PILOTGROUPS","","",N,N],[17,"IA5STRINGSYNTAX","","",N,N],[17,"CASEIGNOREIA5STRINGSYNTAX","","",N,N],[17,"PILOTOBJECT","","",N,N],[17,"PILOTPERSON","","",N,N],[17,"ACCOUNT","","",N,N],[17,"DOCUMENT","","",N,N],[17,"ROOM","","",N,N],[17,"DOCUMENTSERIES","","",N,N],[17,"DOMAIN","","",N,N],[17,"RFC822LOCALPART","","",N,N],[17,"DNSDOMAIN","","",N,N],[17,"DOMAINRELATEDOBJECT","","",N,N],[17,"FRIENDLYCOUNTRY","","",N,N],[17,"SIMPLESECURITYOBJECT","","",N,N],[17,"PILOTORGANIZATION","","",N,N],[17,"PILOTDSA","","",N,N],[17,"QUALITYLABELLEDDATA","","",N,N],[17,"USERID","","",N,N],[17,"TEXTENCODEDORADDRESS","","",N,N],[17,"RFC822MAILBOX","","",N,N],[17,"INFO","","",N,N],[17,"FAVOURITEDRINK","","",N,N],[17,"ROOMNUMBER","","",N,N],[17,"PHOTO","","",N,N],[17,"USERCLASS","","",N,N],[17,"HOST","","",N,N],[17,"MANAGER","","",N,N],[17,"DOCUMENTIDENTIFIER","","",N,N],[17,"DOCUMENTTITLE","","",N,N],[17,"DOCUMENTVERSION","","",N,N],[17,"DOCUMENTAUTHOR","","",N,N],[17,"DOCUMENTLOCATION","","",N,N],[17,"HOMETELEPHONENUMBER","","",N,N],[17,"SECRETARY","","",N,N],[17,"OTHERMAILBOX","","",N,N],[17,"LASTMODIFIEDTIME","","",N,N],[17,"LASTMODIFIEDBY","","",N,N],[17,"DOMAINCOMPONENT","","",N,N],[17,"ARECORD","","",N,N],[17,"PILOTATTRIBUTETYPE27","","",N,N],[17,"MXRECORD","","",N,N],[17,"NSRECORD","","",N,N],[17,"SOARECORD","","",N,N],[17,"CNAMERECORD","","",N,N],[17,"ASSOCIATEDDOMAIN","","",N,N],[17,"ASSOCIATEDNAME","","",N,N],[17,"HOMEPOSTALADDRESS","","",N,N],[17,"PERSONALTITLE","","",N,N],[17,"MOBILETELEPHONENUMBER","","",N,N],[17,"PAGERTELEPHONENUMBER","","",N,N],[17,"FRIENDLYCOUNTRYNAME","","",N,N],[17,"ORGANIZATIONALSTATUS","","",N,N],[17,"JANETMAILBOX","","",N,N],[17,"MAILPREFERENCEOPTION","","",N,N],[17,"BUILDINGNAME","","",N,N],[17,"DSAQUALITY","","",N,N],[17,"SINGLELEVELQUALITY","","",N,N],[17,"SUBTREEMINIMUMQUALITY","","",N,N],[17,"SUBTREEMAXIMUMQUALITY","","",N,N],[17,"PERSONALSIGNATURE","","",N,N],[17,"DITREDIRECT","","",N,N],[17,"AUDIO","","",N,N],[17,"DOCUMENTPUBLISHER","","",N,N],[17,"ID_SET","","",N,N],[17,"SET_CTYPE","","",N,N],[17,"SET_MSGEXT","","",N,N],[17,"SET_ATTR","","",N,N],[17,"SET_POLICY","","",N,N],[17,"SET_CERTEXT","","",N,N],[17,"SET_BRAND","","",N,N],[17,"SETCT_PANDATA","","",N,N],[17,"SETCT_PANTOKEN","","",N,N],[17,"SETCT_PANONLY","","",N,N],[17,"SETCT_OIDATA","","",N,N],[17,"SETCT_PI","","",N,N],[17,"SETCT_PIDATA","","",N,N],[17,"SETCT_PIDATAUNSIGNED","","",N,N],[17,"SETCT_HODINPUT","","",N,N],[17,"SETCT_AUTHRESBAGGAGE","","",N,N],[17,"SETCT_AUTHREVREQBAGGAGE","","",N,N],[17,"SETCT_AUTHREVRESBAGGAGE","","",N,N],[17,"SETCT_CAPTOKENSEQ","","",N,N],[17,"SETCT_PINITRESDATA","","",N,N],[17,"SETCT_PI_TBS","","",N,N],[17,"SETCT_PRESDATA","","",N,N],[17,"SETCT_AUTHREQTBS","","",N,N],[17,"SETCT_AUTHRESTBS","","",N,N],[17,"SETCT_AUTHRESTBSX","","",N,N],[17,"SETCT_AUTHTOKENTBS","","",N,N],[17,"SETCT_CAPTOKENDATA","","",N,N],[17,"SETCT_CAPTOKENTBS","","",N,N],[17,"SETCT_ACQCARDCODEMSG","","",N,N],[17,"SETCT_AUTHREVREQTBS","","",N,N],[17,"SETCT_AUTHREVRESDATA","","",N,N],[17,"SETCT_AUTHREVRESTBS","","",N,N],[17,"SETCT_CAPREQTBS","","",N,N],[17,"SETCT_CAPREQTBSX","","",N,N],[17,"SETCT_CAPRESDATA","","",N,N],[17,"SETCT_CAPREVREQTBS","","",N,N],[17,"SETCT_CAPREVREQTBSX","","",N,N],[17,"SETCT_CAPREVRESDATA","","",N,N],[17,"SETCT_CREDREQTBS","","",N,N],[17,"SETCT_CREDREQTBSX","","",N,N],[17,"SETCT_CREDRESDATA","","",N,N],[17,"SETCT_CREDREVREQTBS","","",N,N],[17,"SETCT_CREDREVREQTBSX","","",N,N],[17,"SETCT_CREDREVRESDATA","","",N,N],[17,"SETCT_PCERTREQDATA","","",N,N],[17,"SETCT_PCERTRESTBS","","",N,N],[17,"SETCT_BATCHADMINREQDATA","","",N,N],[17,"SETCT_BATCHADMINRESDATA","","",N,N],[17,"SETCT_CARDCINITRESTBS","","",N,N],[17,"SETCT_MEAQCINITRESTBS","","",N,N],[17,"SETCT_REGFORMRESTBS","","",N,N],[17,"SETCT_CERTREQDATA","","",N,N],[17,"SETCT_CERTREQTBS","","",N,N],[17,"SETCT_CERTRESDATA","","",N,N],[17,"SETCT_CERTINQREQTBS","","",N,N],[17,"SETCT_ERRORTBS","","",N,N],[17,"SETCT_PIDUALSIGNEDTBE","","",N,N],[17,"SETCT_PIUNSIGNEDTBE","","",N,N],[17,"SETCT_AUTHREQTBE","","",N,N],[17,"SETCT_AUTHRESTBE","","",N,N],[17,"SETCT_AUTHRESTBEX","","",N,N],[17,"SETCT_AUTHTOKENTBE","","",N,N],[17,"SETCT_CAPTOKENTBE","","",N,N],[17,"SETCT_CAPTOKENTBEX","","",N,N],[17,"SETCT_ACQCARDCODEMSGTBE","","",N,N],[17,"SETCT_AUTHREVREQTBE","","",N,N],[17,"SETCT_AUTHREVRESTBE","","",N,N],[17,"SETCT_AUTHREVRESTBEB","","",N,N],[17,"SETCT_CAPREQTBE","","",N,N],[17,"SETCT_CAPREQTBEX","","",N,N],[17,"SETCT_CAPRESTBE","","",N,N],[17,"SETCT_CAPREVREQTBE","","",N,N],[17,"SETCT_CAPREVREQTBEX","","",N,N],[17,"SETCT_CAPREVRESTBE","","",N,N],[17,"SETCT_CREDREQTBE","","",N,N],[17,"SETCT_CREDREQTBEX","","",N,N],[17,"SETCT_CREDRESTBE","","",N,N],[17,"SETCT_CREDREVREQTBE","","",N,N],[17,"SETCT_CREDREVREQTBEX","","",N,N],[17,"SETCT_CREDREVRESTBE","","",N,N],[17,"SETCT_BATCHADMINREQTBE","","",N,N],[17,"SETCT_BATCHADMINRESTBE","","",N,N],[17,"SETCT_REGFORMREQTBE","","",N,N],[17,"SETCT_CERTREQTBE","","",N,N],[17,"SETCT_CERTREQTBEX","","",N,N],[17,"SETCT_CERTRESTBE","","",N,N],[17,"SETCT_CRLNOTIFICATIONTBS","","",N,N],[17,"SETCT_CRLNOTIFICATIONRESTBS","","",N,N],[17,"SETCT_BCIDISTRIBUTIONTBS","","",N,N],[17,"SETEXT_GENCRYPT","","",N,N],[17,"SETEXT_MIAUTH","","",N,N],[17,"SETEXT_PINSECURE","","",N,N],[17,"SETEXT_PINANY","","",N,N],[17,"SETEXT_TRACK2","","",N,N],[17,"SETEXT_CV","","",N,N],[17,"SET_POLICY_ROOT","","",N,N],[17,"SETCEXT_HASHEDROOT","","",N,N],[17,"SETCEXT_CERTTYPE","","",N,N],[17,"SETCEXT_MERCHDATA","","",N,N],[17,"SETCEXT_CCERTREQUIRED","","",N,N],[17,"SETCEXT_TUNNELING","","",N,N],[17,"SETCEXT_SETEXT","","",N,N],[17,"SETCEXT_SETQUALF","","",N,N],[17,"SETCEXT_PGWYCAPABILITIES","","",N,N],[17,"SETCEXT_TOKENIDENTIFIER","","",N,N],[17,"SETCEXT_TRACK2DATA","","",N,N],[17,"SETCEXT_TOKENTYPE","","",N,N],[17,"SETCEXT_ISSUERCAPABILITIES","","",N,N],[17,"SETATTR_CERT","","",N,N],[17,"SETATTR_PGWYCAP","","",N,N],[17,"SETATTR_TOKENTYPE","","",N,N],[17,"SETATTR_ISSCAP","","",N,N],[17,"SET_ROOTKEYTHUMB","","",N,N],[17,"SET_ADDPOLICY","","",N,N],[17,"SETATTR_TOKEN_EMV","","",N,N],[17,"SETATTR_TOKEN_B0PRIME","","",N,N],[17,"SETATTR_ISSCAP_CVM","","",N,N],[17,"SETATTR_ISSCAP_T2","","",N,N],[17,"SETATTR_ISSCAP_SIG","","",N,N],[17,"SETATTR_GENCRYPTGRM","","",N,N],[17,"SETATTR_T2ENC","","",N,N],[17,"SETATTR_T2CLEARTXT","","",N,N],[17,"SETATTR_TOKICCSIG","","",N,N],[17,"SETATTR_SECDEVSIG","","",N,N],[17,"SET_BRAND_IATA_ATA","","",N,N],[17,"SET_BRAND_DINERS","","",N,N],[17,"SET_BRAND_AMERICANEXPRESS","","",N,N],[17,"SET_BRAND_JCB","","",N,N],[17,"SET_BRAND_VISA","","",N,N],[17,"SET_BRAND_MASTERCARD","","",N,N],[17,"SET_BRAND_NOVUS","","",N,N],[17,"DES_CDMF","","",N,N],[17,"RSAOAEPENCRYPTIONSET","","",N,N],[17,"IPSEC3","","",N,N],[17,"IPSEC4","","",N,N],[17,"WHIRLPOOL","","",N,N],[17,"CRYPTOPRO","","",N,N],[17,"CRYPTOCOM","","",N,N],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001","","",N,N],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94","","",N,N],[17,"ID_GOSTR3411_94","","",N,N],[17,"ID_HMACGOSTR3411_94","","",N,N],[17,"ID_GOSTR3410_2001","","",N,N],[17,"ID_GOSTR3410_94","","",N,N],[17,"ID_GOST28147_89","","",N,N],[17,"GOST89_CNT","","",N,N],[17,"ID_GOST28147_89_MAC","","",N,N],[17,"ID_GOSTR3411_94_PRF","","",N,N],[17,"ID_GOSTR3410_2001DH","","",N,N],[17,"ID_GOSTR3410_94DH","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_KEYMESHING","","",N,N],[17,"ID_GOST28147_89_NONE_KEYMESHING","","",N,N],[17,"ID_GOSTR3411_94_TESTPARAMSET","","",N,N],[17,"ID_GOSTR3411_94_CRYPTOPROPARAMSET","","",N,N],[17,"ID_GOST28147_89_TESTPARAMSET","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_A_PARAMSET","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_B_PARAMSET","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_C_PARAMSET","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_D_PARAMSET","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_1_PARAMSET","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_0_PARAMSET","","",N,N],[17,"ID_GOST28147_89_CRYPTOPRO_RIC_1_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_TESTPARAMSET","","",N,N],[17,"ID_GOSTR3410_94_CRYPTOPRO_A_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_CRYPTOPRO_B_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_CRYPTOPRO_C_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_CRYPTOPRO_D_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHA_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHB_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHC_PARAMSET","","",N,N],[17,"ID_GOSTR3410_2001_TESTPARAMSET","","",N,N],[17,"ID_GOSTR3410_2001_CRYPTOPRO_A_PARAMSET","","",N,N],[17,"ID_GOSTR3410_2001_CRYPTOPRO_B_PARAMSET","","",N,N],[17,"ID_GOSTR3410_2001_CRYPTOPRO_C_PARAMSET","","",N,N],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHA_PARAMSET","","",N,N],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHB_PARAMSET","","",N,N],[17,"ID_GOSTR3410_94_A","","",N,N],[17,"ID_GOSTR3410_94_ABIS","","",N,N],[17,"ID_GOSTR3410_94_B","","",N,N],[17,"ID_GOSTR3410_94_BBIS","","",N,N],[17,"ID_GOST28147_89_CC","","",N,N],[17,"ID_GOSTR3410_94_CC","","",N,N],[17,"ID_GOSTR3410_2001_CC","","",N,N],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94_CC","","",N,N],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001_CC","","",N,N],[17,"ID_GOSTR3410_2001_PARAMSET_CC","","",N,N],[17,"CAMELLIA_128_CBC","","",N,N],[17,"CAMELLIA_192_CBC","","",N,N],[17,"CAMELLIA_256_CBC","","",N,N],[17,"ID_CAMELLIA128_WRAP","","",N,N],[17,"ID_CAMELLIA192_WRAP","","",N,N],[17,"ID_CAMELLIA256_WRAP","","",N,N],[17,"CAMELLIA_128_ECB","","",N,N],[17,"CAMELLIA_128_OFB128","","",N,N],[17,"CAMELLIA_128_CFB128","","",N,N],[17,"CAMELLIA_192_ECB","","",N,N],[17,"CAMELLIA_192_OFB128","","",N,N],[17,"CAMELLIA_192_CFB128","","",N,N],[17,"CAMELLIA_256_ECB","","",N,N],[17,"CAMELLIA_256_OFB128","","",N,N],[17,"CAMELLIA_256_CFB128","","",N,N],[17,"CAMELLIA_128_CFB1","","",N,N],[17,"CAMELLIA_192_CFB1","","",N,N],[17,"CAMELLIA_256_CFB1","","",N,N],[17,"CAMELLIA_128_CFB8","","",N,N],[17,"CAMELLIA_192_CFB8","","",N,N],[17,"CAMELLIA_256_CFB8","","",N,N],[17,"KISA","","",N,N],[17,"SEED_ECB","","",N,N],[17,"SEED_CBC","","",N,N],[17,"SEED_CFB128","","",N,N],[17,"SEED_OFB128","","",N,N],[17,"HMAC","","",N,N],[17,"CMAC","","",N,N],[17,"RC4_HMAC_MD5","","",N,N],[17,"AES_128_CBC_HMAC_SHA1","","",N,N],[17,"AES_192_CBC_HMAC_SHA1","","",N,N],[17,"AES_256_CBC_HMAC_SHA1","","",N,N],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["nid"]]],[11,"eq","","",41,[[["self"],["nid"]],["bool"]]],[11,"ne","","",41,[[["self"],["nid"]],["bool"]]],[11,"hash","","",41,N],[11,"from_raw","","Create a `Nid` from an integer representation.",41,[[["c_int"]],["nid"]]],[11,"as_raw","","Return the integer representation of a `Nid`.",41,[[["self"]],["c_int"]]],[0,"ocsp","openssl","",N,N],[3,"Flag","openssl::ocsp","",N,N],[3,"OcspResponseStatus","","",N,N],[3,"OcspCertStatus","","",N,N],[3,"OcspRevokedStatus","","",N,N],[3,"Status","","",N,N],[12,"status","","The overall status of the response.",42,N],[12,"reason","","If `status` is `CERT_STATUS_REVOKED`, the reason for the revocation.",42,N],[12,"revocation_time","","If `status` is `CERT_STATUS_REVOKED`, the time at which the certificate was revoked.",42,N],[12,"this_update","","The time that this revocation check was performed.",42,N],[12,"next_update","","The time at which this revocation check expires.",42,N],[3,"OcspBasicResponse","","",N,N],[3,"OcspBasicResponseRef","","",N,N],[3,"OcspCertId","","",N,N],[3,"OcspCertIdRef","","",N,N],[3,"OcspResponse","","",N,N],[3,"OcspResponseRef","","",N,N],[3,"OcspRequest","","",N,N],[3,"OcspRequestRef","","",N,N],[3,"OcspOneReq","","",N,N],[3,"OcspOneReqRef","","",N,N],[17,"FLAG_NO_CERTS","","",N,N],[17,"FLAG_NO_INTERN","","",N,N],[17,"FLAG_NO_CHAIN","","",N,N],[17,"FLAG_NO_VERIFY","","",N,N],[17,"FLAG_NO_EXPLICIT","","",N,N],[17,"FLAG_NO_CA_SIGN","","",N,N],[17,"FLAG_NO_DELEGATED","","",N,N],[17,"FLAG_NO_CHECKS","","",N,N],[17,"FLAG_TRUST_OTHER","","",N,N],[17,"FLAG_RESPID_KEY","","",N,N],[17,"FLAG_NO_TIME","","",N,N],[17,"RESPONSE_STATUS_SUCCESSFUL","","",N,N],[17,"RESPONSE_STATUS_MALFORMED_REQUEST","","",N,N],[17,"RESPONSE_STATUS_INTERNAL_ERROR","","",N,N],[17,"RESPONSE_STATUS_TRY_LATER","","",N,N],[17,"RESPONSE_STATUS_SIG_REQUIRED","","",N,N],[17,"RESPONSE_STATUS_UNAUTHORIZED","","",N,N],[17,"CERT_STATUS_GOOD","","",N,N],[17,"CERT_STATUS_REVOKED","","",N,N],[17,"CERT_STATUS_UNKNOWN","","",N,N],[17,"REVOKED_STATUS_NO_STATUS","","",N,N],[17,"REVOKED_STATUS_UNSPECIFIED","","",N,N],[17,"REVOKED_STATUS_KEY_COMPROMISE","","",N,N],[17,"REVOKED_STATUS_CA_COMPROMISE","","",N,N],[17,"REVOKED_STATUS_AFFILIATION_CHANGED","","",N,N],[17,"REVOKED_STATUS_SUPERSEDED","","",N,N],[17,"REVOKED_STATUS_CESSATION_OF_OPERATION","","",N,N],[17,"REVOKED_STATUS_CERTIFICATE_HOLD","","",N,N],[17,"REVOKED_STATUS_REMOVE_FROM_CRL","","",N,N],[11,"eq","","",43,[[["self"],["flag"]],["bool"]]],[11,"ne","","",43,[[["self"],["flag"]],["bool"]]],[11,"clone","","",43,[[["self"]],["flag"]]],[11,"partial_cmp","","",43,[[["self"],["flag"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["flag"]],["bool"]]],[11,"le","","",43,[[["self"],["flag"]],["bool"]]],[11,"gt","","",43,[[["self"],["flag"]],["bool"]]],[11,"ge","","",43,[[["self"],["flag"]],["bool"]]],[11,"cmp","","",43,[[["self"],["flag"]],["ordering"]]],[11,"hash","","",43,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",43,[[],["flag"]]],[11,"all","","Returns the set containing all flags.",43,[[],["flag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",43,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,[[["c_ulong"]],["option",["flag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,[[["c_ulong"]],["flag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",43,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,[[["self"],["flag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,[[["self"],["flag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",43,[[["self"],["flag"]]]],[11,"remove","","Removes the specified flags in-place.",43,[[["self"],["flag"]]]],[11,"toggle","","Toggles the specified flags in-place.",43,[[["self"],["flag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,[[["self"],["flag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",43,[[["self"],["flag"]],["flag"]]],[11,"bitor_assign","","Adds the set of flags.",43,[[["self"],["flag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,[[["self"],["flag"]],["flag"]]],[11,"bitxor_assign","","Toggles the set of flags.",43,[[["self"],["flag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",43,[[["self"],["flag"]],["flag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",43,[[["self"],["flag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",43,[[["self"],["flag"]],["flag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",43,[[["self"],["flag"]]]],[11,"not","","Returns the complement of this set of flags.",43,[[["self"]],["flag"]]],[11,"extend","","",43,[[["self"],["t"]]]],[11,"from_iter","","",43,[[["t"]],["flag"]]],[11,"clone","","",44,[[["self"]],["ocspresponsestatus"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["ocspresponsestatus"]],["bool"]]],[11,"ne","","",44,[[["self"],["ocspresponsestatus"]],["bool"]]],[11,"from_raw","","",44,[[["c_int"]],["ocspresponsestatus"]]],[11,"as_raw","","",44,[[["self"]],["c_int"]]],[11,"clone","","",45,[[["self"]],["ocspcertstatus"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["ocspcertstatus"]],["bool"]]],[11,"ne","","",45,[[["self"],["ocspcertstatus"]],["bool"]]],[11,"from_raw","","",45,[[["c_int"]],["ocspcertstatus"]]],[11,"as_raw","","",45,[[["self"]],["c_int"]]],[11,"clone","","",46,[[["self"]],["ocsprevokedstatus"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["ocsprevokedstatus"]],["bool"]]],[11,"ne","","",46,[[["self"],["ocsprevokedstatus"]],["bool"]]],[11,"from_raw","","",46,[[["c_int"]],["ocsprevokedstatus"]]],[11,"as_raw","","",46,[[["self"]],["c_int"]]],[11,"check_validity","","Checks validity of the `this_update` and `next_update` fields.",42,[[["self"],["u32"],["option",["u32"]]],["result",["errorstack"]]]],[11,"from_ptr","","",47,N],[11,"as_ptr","","",47,N],[11,"drop","","",47,[[["self"]]]],[11,"deref","","",47,[[["self"]],["ocspbasicresponseref"]]],[11,"deref_mut","","",47,[[["self"]],["ocspbasicresponseref"]]],[11,"borrow","","",47,[[["self"]],["ocspbasicresponseref"]]],[11,"as_ref","","",47,[[["self"]],["ocspbasicresponseref"]]],[11,"verify","","Verifies the validity of the response.",48,[[["self"],["stackref"],["x509storeref"],["flag"]],["result",["errorstack"]]]],[11,"find_status","","Looks up the status for the specified certificate ID.",48,[[["self"],["ocspcertidref"]],["option",["status"]]]],[11,"from_ptr","","",49,N],[11,"as_ptr","","",49,N],[11,"drop","","",49,[[["self"]]]],[11,"deref","","",49,[[["self"]],["ocspcertidref"]]],[11,"deref_mut","","",49,[[["self"]],["ocspcertidref"]]],[11,"borrow","","",49,[[["self"]],["ocspcertidref"]]],[11,"as_ref","","",49,[[["self"]],["ocspcertidref"]]],[11,"from_cert","","Constructs a certificate ID for certificate `subject`.",49,[[["messagedigest"],["x509ref"],["x509ref"]],["result",["ocspcertid","errorstack"]]]],[11,"from_ptr","","",50,N],[11,"as_ptr","","",50,N],[11,"drop","","",50,[[["self"]]]],[11,"deref","","",50,[[["self"]],["ocspresponseref"]]],[11,"deref_mut","","",50,[[["self"]],["ocspresponseref"]]],[11,"borrow","","",50,[[["self"]],["ocspresponseref"]]],[11,"as_ref","","",50,[[["self"]],["ocspresponseref"]]],[11,"create","","Creates an OCSP response from the status and optional body.",50,[[["ocspresponsestatus"],["option",["ocspbasicresponseref"]]],["result",["ocspresponse","errorstack"]]]],[11,"from_der","","Deserializes a value from DER-formatted data.",50,N],[11,"to_der","","Serializes this value to DER.",51,[[["self"]],["result",["vec","errorstack"]]]],[11,"status","","Returns the status of the response.",51,[[["self"]],["ocspresponsestatus"]]],[11,"basic","","Returns the basic response.",51,[[["self"]],["result",["ocspbasicresponse","errorstack"]]]],[11,"from_ptr","","",52,N],[11,"as_ptr","","",52,N],[11,"drop","","",52,[[["self"]]]],[11,"deref","","",52,[[["self"]],["ocsprequestref"]]],[11,"deref_mut","","",52,[[["self"]],["ocsprequestref"]]],[11,"borrow","","",52,[[["self"]],["ocsprequestref"]]],[11,"as_ref","","",52,[[["self"]],["ocsprequestref"]]],[11,"new","","",52,[[],["result",["ocsprequest","errorstack"]]]],[11,"from_der","","Deserializes a value from DER-formatted data.",52,N],[11,"to_der","","Serializes this value to DER.",53,[[["self"]],["result",["vec","errorstack"]]]],[11,"add_id","","",53,[[["self"],["ocspcertid"]],["result",["ocsponereqref","errorstack"]]]],[11,"from_ptr","","",54,N],[11,"as_ptr","","",54,N],[11,"drop","","",54,[[["self"]]]],[11,"deref","","",54,[[["self"]],["ocsponereqref"]]],[11,"deref_mut","","",54,[[["self"]],["ocsponereqref"]]],[11,"borrow","","",54,[[["self"]],["ocsponereqref"]]],[11,"as_ref","","",54,[[["self"]],["ocsponereqref"]]],[0,"pkcs12","openssl","PKCS #12 archives.",N,N],[3,"Pkcs12","openssl::pkcs12","",N,N],[3,"Pkcs12Ref","","",N,N],[3,"ParsedPkcs12","","",N,N],[12,"pkey","","",55,N],[12,"cert","","",55,N],[12,"chain","","",55,N],[3,"Pkcs12Builder","","",N,N],[11,"from_ptr","","",56,N],[11,"as_ptr","","",56,N],[11,"drop","","",56,[[["self"]]]],[11,"deref","","",56,[[["self"]],["pkcs12ref"]]],[11,"deref_mut","","",56,[[["self"]],["pkcs12ref"]]],[11,"borrow","","",56,[[["self"]],["pkcs12ref"]]],[11,"as_ref","","",56,[[["self"]],["pkcs12ref"]]],[11,"to_der","","Serializes this value to DER.",57,[[["self"]],["result",["vec","errorstack"]]]],[11,"parse","","Extracts the contents of the `Pkcs12`.",57,[[["self"],["str"]],["result",["parsedpkcs12","errorstack"]]]],[11,"from_der","","Deserializes a value from DER-formatted data.",56,N],[11,"builder","","Creates a new builder for a protected pkcs12 certificate.",56,[[],["pkcs12builder"]]],[11,"key_algorithm","","The encryption algorithm that should be used for the key",58,[[["self"],["nid"]],["self"]]],[11,"cert_algorithm","","The encryption algorithm that should be used for the cert",58,[[["self"],["nid"]],["self"]]],[11,"key_iter","","Key iteration count, default is 2048 as of this writing",58,[[["self"],["u32"]],["self"]]],[11,"mac_iter","","MAC iteration count, default is the same as key_iter.",58,[[["self"],["u32"]],["self"]]],[11,"ca","","An additional set of certificates to include in the archive beyond the one provided to `build`.",58,[[["self"],["stack",["x509"]]],["self"]]],[11,"build","","Builds the PKCS #12 object",58,[[["self"],["str"],["str"],["pkeyref"],["x509"]],["result",["pkcs12","errorstack"]]]],[0,"pkcs5","openssl","",N,N],[3,"KeyIvPair","openssl::pkcs5","",N,N],[12,"key","","",59,N],[12,"iv","","",59,N],[5,"bytes_to_key","","Derives a key and an IV from various parameters.",N,N],[5,"pbkdf2_hmac","","Derives a key from a password and salt using the PBKDF2-HMAC algorithm with a digest function.",N,N],[11,"clone","","",59,[[["self"]],["keyivpair"]]],[11,"eq","","",59,[[["self"],["keyivpair"]],["bool"]]],[11,"ne","","",59,[[["self"],["keyivpair"]],["bool"]]],[11,"hash","","",59,N],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[0,"pkey","openssl","",N,N],[3,"PKey","openssl::pkey","",N,N],[3,"PKeyRef","","",N,N],[3,"PKeyCtx","","",N,N],[3,"PKeyCtxRef","","",N,N],[11,"from_ptr","","",60,N],[11,"as_ptr","","",60,N],[11,"drop","","",60,[[["self"]]]],[11,"deref","","",60,[[["self"]],["pkeyref"]]],[11,"deref_mut","","",60,[[["self"]],["pkeyref"]]],[11,"borrow","","",60,[[["self"]],["pkeyref"]]],[11,"as_ref","","",60,[[["self"]],["pkeyref"]]],[11,"rsa","","Returns a copy of the internal RSA key.",61,[[["self"]],["result",["rsa","errorstack"]]]],[11,"dsa","","Returns a copy of the internal DSA key.",61,[[["self"]],["result",["dsa","errorstack"]]]],[11,"dh","","Returns a copy of the internal DH key.",61,[[["self"]],["result",["dh","errorstack"]]]],[11,"ec_key","","Returns a copy of the internal elliptic curve key.",61,[[["self"]],["result",["eckey","errorstack"]]]],[11,"public_key_to_pem","","Serializes a public key to PEM.",61,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem","","Serializes the private key to PEM.",61,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",61,N],[11,"private_key_to_der","","Serializes the private key to DER.",61,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der","","Serializes the public key to DER.",61,[[["self"]],["result",["vec","errorstack"]]]],[11,"bits","","Returns the size of the key.",61,[[["self"]],["u32"]]],[11,"public_eq","","Compares the public component of this key with another.",61,[[["self"],["pkeyref"]],["bool"]]],[11,"from_rsa","","Creates a new `PKey` containing an RSA key.",60,[[["rsa"]],["result",["pkey","errorstack"]]]],[11,"from_dsa","","Creates a new `PKey` containing a DSA key.",60,[[["dsa"]],["result",["pkey","errorstack"]]]],[11,"from_dh","","Creates a new `PKey` containing a Diffie-Hellman key.",60,[[["dh"]],["result",["pkey","errorstack"]]]],[11,"from_ec_key","","Creates a new `PKey` containing an elliptic curve key.",60,[[["eckey"]],["result",["pkey","errorstack"]]]],[11,"hmac","","Creates a new `PKey` containing an HMAC key.",60,N],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",60,N],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",60,N],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",60,N],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",60,N],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",60,N],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",60,N],[11,"private_key_from_pkcs8_callback","","Deserializes a DER-formatted PKCS#8 private key, using a callback to retrieve the password if the key is encrpyted.",60,N],[11,"private_key_from_pkcs8_passphrase","","Deserializes a DER-formatted PKCS#8 private key, using the supplied password if the key is encrypted.",60,N],[11,"private_key_from_pem_cb","","",60,N],[11,"from_ptr","","",62,N],[11,"as_ptr","","",62,N],[11,"drop","","",62,[[["self"]]]],[11,"deref","","",62,[[["self"]],["pkeyctxref"]]],[11,"deref_mut","","",62,[[["self"]],["pkeyctxref"]]],[11,"borrow","","",62,[[["self"]],["pkeyctxref"]]],[11,"as_ref","","",62,[[["self"]],["pkeyctxref"]]],[11,"from_pkey","","",62,[[["pkeyref"]],["result",["pkeyctx","errorstack"]]]],[11,"set_rsa_padding","","",63,[[["self"],["padding"]],["result",["errorstack"]]]],[11,"rsa_padding","","",63,[[["self"]],["result",["padding","errorstack"]]]],[11,"derive_init","","",63,[[["self"]],["result",["errorstack"]]]],[11,"derive_set_peer","","",63,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"derive","","",63,[[["self"]],["result",["vec","errorstack"]]]],[0,"rand","openssl","Utilities for secure random number generation.",N,N],[5,"rand_bytes","openssl::rand","Fill buffer with cryptographically strong pseudo-random bytes.",N,N],[0,"rsa","openssl","",N,N],[3,"Padding","openssl::rsa","Type of encryption padding to use.",N,N],[3,"Rsa","","",N,N],[3,"RsaRef","","",N,N],[17,"NO_PADDING","","",N,N],[17,"PKCS1_PADDING","","",N,N],[17,"PKCS1_OAEP_PADDING","","",N,N],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"clone","","",64,[[["self"]],["padding"]]],[11,"eq","","",64,[[["self"],["padding"]],["bool"]]],[11,"ne","","",64,[[["self"],["padding"]],["bool"]]],[11,"from_raw","","",64,[[["c_int"]],["padding"]]],[11,"as_raw","","",64,[[["self"]],["c_int"]]],[11,"from_ptr","","",65,N],[11,"as_ptr","","",65,N],[11,"drop","","",65,[[["self"]]]],[11,"deref","","",65,[[["self"]],["rsaref"]]],[11,"deref_mut","","",65,[[["self"]],["rsaref"]]],[11,"borrow","","",65,[[["self"]],["rsaref"]]],[11,"as_ref","","",65,[[["self"]],["rsaref"]]],[11,"private_key_to_pem","","Serializes the private key to PEM.",66,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",66,N],[11,"public_key_to_pem","","Serializes a public key to PEM.",66,[[["self"]],["result",["vec","errorstack"]]]],[11,"private_key_to_der","","Serializes the private key to DER.",66,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der","","Serializes the public key to DER.",66,[[["self"]],["result",["vec","errorstack"]]]],[11,"public_key_to_der_pkcs1","","Serializes the public key to DER-encoded PKCS#1.",66,[[["self"]],["result",["vec","errorstack"]]]],[11,"size","","",66,[[["self"]],["usize"]]],[11,"private_decrypt","","Decrypts data using the private key, returning the number of decrypted bytes.",66,N],[11,"private_encrypt","","Encrypts data using the private key, returning the number of encrypted bytes.",66,N],[11,"public_decrypt","","Decrypts data using the public key, returning the number of decrypted bytes.",66,N],[11,"public_encrypt","","Encrypts data using the public key, returning the number of encrypted bytes.",66,N],[11,"n","","",66,[[["self"]],["option",["bignumref"]]]],[11,"d","","",66,[[["self"]],["option",["bignumref"]]]],[11,"e","","",66,[[["self"]],["option",["bignumref"]]]],[11,"p","","",66,[[["self"]],["option",["bignumref"]]]],[11,"q","","",66,[[["self"]],["option",["bignumref"]]]],[11,"dp","","",66,[[["self"]],["option",["bignumref"]]]],[11,"dq","","",66,[[["self"]],["option",["bignumref"]]]],[11,"qi","","",66,[[["self"]],["option",["bignumref"]]]],[11,"from_public_components","","only useful for associating the key material directly with the key, it's safer to use the supplied load and save methods for DER formatted keys.",65,[[["bignum"],["bignum"]],["result",["rsa","errorstack"]]]],[11,"from_private_components","","",65,[[["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"]],["result",["rsa","errorstack"]]]],[11,"generate","","Generates a public/private key pair with the specified size.",65,[[["u32"]],["result",["rsa","errorstack"]]]],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",65,N],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",65,N],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",65,N],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",65,N],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",65,N],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",65,N],[11,"public_key_from_der_pkcs1","","Deserializes a public key from DER-encoded PKCS#1 data.",65,N],[11,"private_key_from_pem_cb","","",65,N],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[0,"sign","openssl","Message signatures.",N,N],[3,"Signer","openssl::sign","A type which computes cryptographic signatures of data.",N,N],[3,"Verifier","","",N,N],[11,"drop","","",67,[[["self"]]]],[11,"new","","Creates a new `Signer`.",67,[[["messagedigest"],["pkeyref"]],["result",["signer","errorstack"]]]],[11,"pkey_ctx","","Returns a shared reference to the `PKeyCtx` associated with the `Signer`.",67,[[["self"]],["pkeyctxref"]]],[11,"pkey_ctx_mut","","Returns a mutable reference to the `PKeyCtx` associated with the `Signer`.",67,[[["self"]],["pkeyctxref"]]],[11,"update","","Feeds more data into the `Signer`.",67,N],[11,"len","","Computes an upper bound on the signature length.",67,[[["self"]],["result",["usize","errorstack"]]]],[11,"sign","","Writes the signature into the provided buffer, returning the number of bytes written.",67,N],[11,"sign_to_vec","","Returns the signature.",67,[[["self"]],["result",["vec","errorstack"]]]],[11,"finish","","",67,[[["self"]],["result",["vec","errorstack"]]]],[11,"write","","",67,N],[11,"flush","","",67,[[["self"]],["result"]]],[11,"drop","","",68,[[["self"]]]],[11,"new","","Creates a new `Verifier`.",68,[[["messagedigest"],["pkeyref"]],["result",["verifier","errorstack"]]]],[11,"pkey_ctx","","Returns a shared reference to the `PKeyCtx` associated with the `Verifier`.",68,[[["self"]],["pkeyctxref"]]],[11,"pkey_ctx_mut","","Returns a mutable reference to the `PKeyCtx` associated with the `Verifier`.",68,[[["self"]],["pkeyctxref"]]],[11,"update","","Feeds more data into the `Verifier`.",68,N],[11,"verify","","Determines if the data fed into the `Verifier` matches the provided signature.",68,N],[11,"finish","","",68,N],[11,"write","","",68,N],[11,"flush","","",68,[[["self"]],["result"]]],[0,"sha","openssl","The SHA family of hashes.",N,N],[3,"Sha1","openssl::sha","An object which calculates a SHA1 hash of some data.",N,N],[3,"Sha224","","An object which calculates a SHA224 hash of some data.",N,N],[3,"Sha256","","An object which calculates a SHA256 hash of some data.",N,N],[3,"Sha384","","An object which calculates a SHA384 hash of some data.",N,N],[3,"Sha512","","An object which calculates a SHA512 hash of some data.",N,N],[5,"sha1","","Computes the SHA1 hash of some data.",N,N],[5,"sha224","","Computes the SHA224 hash of some data.",N,N],[5,"sha256","","Computes the SHA256 hash of some data.",N,N],[5,"sha384","","Computes the SHA384 hash of some data.",N,N],[5,"sha512","","Computes the SHA512 hash of some data.",N,N],[11,"new","","Creates a new hasher.",69,[[],["sha1"]]],[11,"update","","Feeds some data into the hasher.",69,N],[11,"finish","","Returns the hash of the data.",69,N],[11,"new","","Creates a new hasher.",70,[[],["sha224"]]],[11,"update","","Feeds some data into the hasher.",70,N],[11,"finish","","Returns the hash of the data.",70,N],[11,"new","","Creates a new hasher.",71,[[],["sha256"]]],[11,"update","","Feeds some data into the hasher.",71,N],[11,"finish","","Returns the hash of the data.",71,N],[11,"new","","Creates a new hasher.",72,[[],["sha384"]]],[11,"update","","Feeds some data into the hasher.",72,N],[11,"finish","","Returns the hash of the data.",72,N],[11,"new","","Creates a new hasher.",73,[[],["sha512"]]],[11,"update","","Feeds some data into the hasher.",73,N],[11,"finish","","Returns the hash of the data.",73,N],[0,"ssl","openssl","SSL/TLS support.",N,N],[3,"ConnectConfiguration","openssl::ssl","A type which allows for configuration of a client-side TLS session before connection.",N,N],[3,"SslAcceptor","","A type which wraps server-side streams in a TLS session.",N,N],[3,"SslAcceptorBuilder","","A builder for `SslAcceptor`s.",N,N],[3,"SslConnector","","A type which wraps client-side streams in a TLS session.",N,N],[3,"SslConnectorBuilder","","A builder for `SslConnector`s.",N,N],[3,"RetryError","","An error indicating that the operation can be immediately retried.",N,N],[3,"SslOption","","Options controlling the behavior of an `SslContext`.",N,N],[3,"SslMode","","Options controlling the behavior of an `SslContext`.",N,N],[3,"SslMethod","","A type specifying the kind of protocol an `SslContext` will speak.",N,N],[3,"SslVerifyMode","","Options controling the behavior of certificate verification.",N,N],[3,"StatusType","","An identifier of a certificate status type.",N,N],[3,"SslContextBuilder","","A builder for `SslContext`s.",N,N],[3,"SslContext","","A context object for TLS streams.",N,N],[3,"SslContextRef","","Reference to [`SslContext`]",N,N],[3,"CipherBits","","Information about the state of a cipher.",N,N],[12,"secret","","The number of secret bits used for the cipher.",74,N],[12,"algorithm","","The number of bits processed by the chosen algorithm.",74,N],[3,"SslCipher","","Information about a cipher.",N,N],[3,"SslCipherRef","","Reference to an [`SslCipher`].",N,N],[3,"SslSession","","An encoded SSL session.",N,N],[3,"SslSessionRef","","Reference to [`SslSession]`.",N,N],[3,"Ssl","","The state of an SSL/TLS session.",N,N],[3,"SslRef","","Reference to an [`Ssl`].",N,N],[3,"MidHandshakeSslStream","","An SSL stream midway through the handshake process.",N,N],[3,"SslStream","","A TLS session over a stream.",N,N],[4,"Error","","An SSL error.",N,N],[13,"ZeroReturn","","The SSL session has been closed by the other end",75,N],[13,"WantRead","","An attempt to read data from the underlying socket returned `WouldBlock`. Wait for read readiness and reattempt the operation.",75,N],[13,"WantWrite","","An attempt to write data from the underlying socket returned `WouldBlock`. Wait for write readiness and reattempt the operation.",75,N],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",75,N],[13,"Stream","","An error reported by the underlying stream.",75,N],[13,"Ssl","","An error in the OpenSSL library.",75,N],[4,"HandshakeError","","An error or intermediate state after a TLS handshake attempt.",N,N],[13,"SetupFailure","","Setup failed.",76,N],[13,"Failure","","The handshake failed.",76,N],[13,"Interrupted","","The handshake was interrupted midway through.",76,N],[4,"SniError","","An error returned from an SNI callback.",N,N],[13,"Fatal","","",77,N],[13,"Warning","","",77,N],[13,"NoAck","","",77,N],[4,"ShutdownResult","","The result of a shutdown request.",N,N],[13,"Sent","","A close notify message has been sent to the peer.",78,N],[13,"Received","","A close notify response message has been received from the peer.",78,N],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"description","","",75,[[["self"]],["str"]]],[11,"cause","","",75,[[["self"]],["option",["error"]]]],[11,"from","","",75,[[["errorstack"]],["error"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"description","","",79,[[["self"]],["str"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"description","","",76,[[["self"]],["str"]]],[11,"cause","","",76,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"from","","",76,[[["errorstack"]],["handshakeerror"]]],[11,"new","","Creates a new builder for TLS connections.",80,[[["sslmethod"]],["result",["sslconnectorbuilder","errorstack"]]]],[11,"builder","","",80,[[["self"]],["sslcontextbuilder"]]],[11,"builder_mut","","",80,[[["self"]],["sslcontextbuilder"]]],[11,"build","","Consumes the builder, returning an `SslConnector`.",80,[[["self"]],["sslconnector"]]],[11,"deref","","",80,[[["self"]],["sslcontextbuilder"]]],[11,"deref_mut","","",80,[[["self"]],["sslcontextbuilder"]]],[11,"clone","","",81,[[["self"]],["sslconnector"]]],[11,"connect","","Initiates a client-side TLS session on a stream.",81,[[["self"],["str"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Initiates a client-side TLS session on a stream without performing hostname verification.",81,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"configure","","Returns a structure allowing for configuration of a single TLS session before connection.",81,[[["self"]],["result",["connectconfiguration","errorstack"]]]],[11,"ssl","","",82,[[["self"]],["ssl"]]],[11,"ssl_mut","","",82,[[["self"]],["ssl"]]],[11,"connect","","Initiates a client-side TLS session on a stream.",82,[[["self"],["str"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Initiates a client-side TLS session on a stream without performing hostname verification.",82,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"deref","","",82,[[["self"]],["sslref"]]],[11,"deref_mut","","",82,[[["self"]],["sslref"]]],[11,"mozilla_intermediate","","Creates a new builder configured to connect to non-legacy clients. This should generally be considered a reasonable default choice.",83,[[["sslmethod"],["pkeyref"],["x509ref"],["i"]],["result",["sslacceptorbuilder","errorstack"]]]],[11,"mozilla_modern","","Creates a new builder configured to connect to modern clients.",83,[[["sslmethod"],["pkeyref"],["x509ref"],["i"]],["result",["sslacceptorbuilder","errorstack"]]]],[11,"mozilla_intermediate_raw","","Like `mozilla_intermediate`, but does not load the certificate chain and private key.",83,[[["sslmethod"]],["result",["sslacceptorbuilder","errorstack"]]]],[11,"mozilla_modern_raw","","Like `mozilla_modern`, but does not load the certificate chain and private key.",83,[[["sslmethod"]],["result",["sslacceptorbuilder","errorstack"]]]],[11,"builder","","",83,[[["self"]],["sslcontextbuilder"]]],[11,"builder_mut","","",83,[[["self"]],["sslcontextbuilder"]]],[11,"build","","Consumes the builder, returning a `SslAcceptor`.",83,[[["self"]],["sslacceptor"]]],[11,"deref","","",83,[[["self"]],["sslcontextbuilder"]]],[11,"deref_mut","","",83,[[["self"]],["sslcontextbuilder"]]],[11,"clone","","",84,[[["self"]],["sslacceptor"]]],[11,"accept","","Initiates a server-side TLS session on a stream.",84,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",N,N],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",N,N],[17,"SSL_OP_TLS_D5_BUG","","",N,N],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",N,N],[17,"SSL_OP_CISCO_ANYCONNECT","","",N,N],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","Disables a countermeasure against an SSLv3/TLSv1.0 vulnerability affecting CBC ciphers.",N,N],[17,"SSL_OP_ALL","","A \"reasonable default\" set of options which enables compatibility flags.",N,N],[17,"SSL_OP_NO_QUERY_MTU","","Do not query the MTU.",N,N],[17,"SSL_OP_COOKIE_EXCHANGE","","Enables Cookie Exchange as described in [RFC 4347 Section 4.2.1].",N,N],[17,"SSL_OP_NO_TICKET","","Disables the use of session tickets for session resumption.",N,N],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","Always start a new session when performing a renegotiation on the server side.",N,N],[17,"SSL_OP_NO_COMPRESSION","","Disables the use of TLS compression.",N,N],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","Allow legacy insecure renegotiation with servers or clients that do not support secure renegotiation.",N,N],[17,"SSL_OP_SINGLE_ECDH_USE","","Creates a new key for each session when using ECDHE.",N,N],[17,"SSL_OP_SINGLE_DH_USE","","Creates a new key for each session when using DHE.",N,N],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","Use the server's preferences rather than the client's when selecting a cipher.",N,N],[17,"SSL_OP_TLS_ROLLBACK_BUG","","Disables version rollback attach detection.",N,N],[17,"SSL_OP_NO_SSLV2","","Disables the use of SSLv2.",N,N],[17,"SSL_OP_NO_SSLV3","","Disables the use of SSLv3.",N,N],[17,"SSL_OP_NO_TLSV1","","Disables the use of TLSv1.0.",N,N],[17,"SSL_OP_NO_TLSV1_1","","Disables the use of TLSv1.1.",N,N],[17,"SSL_OP_NO_TLSV1_2","","Disables the use of TLSv1.2.",N,N],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","Enables \"short writes\".",N,N],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","Disables a check that the data buffer has not moved between calls when operating in a nonblocking context.",N,N],[17,"SSL_MODE_AUTO_RETRY","","Enables automatic retries after TLS session events such as renegotiations or heartbeats.",N,N],[17,"SSL_MODE_NO_AUTO_CHAIN","","Disables automatic chain building when verifying a peer's certificate.",N,N],[17,"SSL_MODE_RELEASE_BUFFERS","","Release memory buffers when the session does not need them.",N,N],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","Sends the fake `TLS_FALLBACK_SCSV` cipher suite in the ClientHello message of a handshake.",N,N],[17,"SSL_VERIFY_PEER","","Verifies that the peer's certificate is trusted.",N,N],[17,"SSL_VERIFY_NONE","","Disables verification of the peer's certificate.",N,N],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","On the server side, abort the handshake if the client did not send a certificate.",N,N],[17,"STATUS_TYPE_OCSP","","An OSCP status.",N,N],[11,"eq","","",85,[[["self"],["ssloption"]],["bool"]]],[11,"ne","","",85,[[["self"],["ssloption"]],["bool"]]],[11,"clone","","",85,[[["self"]],["ssloption"]]],[11,"partial_cmp","","",85,[[["self"],["ssloption"]],["option",["ordering"]]]],[11,"lt","","",85,[[["self"],["ssloption"]],["bool"]]],[11,"le","","",85,[[["self"],["ssloption"]],["bool"]]],[11,"gt","","",85,[[["self"],["ssloption"]],["bool"]]],[11,"ge","","",85,[[["self"],["ssloption"]],["bool"]]],[11,"cmp","","",85,[[["self"],["ssloption"]],["ordering"]]],[11,"hash","","",85,N],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",85,[[],["ssloption"]]],[11,"all","","Returns the set containing all flags.",85,[[],["ssloption"]]],[11,"bits","","Returns the raw value of the flags currently stored.",85,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",85,[[["c_ulong"]],["option",["ssloption"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",85,[[["c_ulong"]],["ssloption"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",85,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,[[["self"],["ssloption"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,[[["self"],["ssloption"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",85,[[["self"],["ssloption"]]]],[11,"remove","","Removes the specified flags in-place.",85,[[["self"],["ssloption"]]]],[11,"toggle","","Toggles the specified flags in-place.",85,[[["self"],["ssloption"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",85,[[["self"],["ssloption"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",85,[[["self"],["ssloption"]],["ssloption"]]],[11,"bitor_assign","","Adds the set of flags.",85,[[["self"],["ssloption"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,[[["self"],["ssloption"]],["ssloption"]]],[11,"bitxor_assign","","Toggles the set of flags.",85,[[["self"],["ssloption"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",85,[[["self"],["ssloption"]],["ssloption"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",85,[[["self"],["ssloption"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",85,[[["self"],["ssloption"]],["ssloption"]]],[11,"sub_assign","","Disables all flags enabled in the set.",85,[[["self"],["ssloption"]]]],[11,"not","","Returns the complement of this set of flags.",85,[[["self"]],["ssloption"]]],[11,"extend","","",85,[[["self"],["t"]]]],[11,"from_iter","","",85,[[["t"]],["ssloption"]]],[11,"eq","","",86,[[["self"],["sslmode"]],["bool"]]],[11,"ne","","",86,[[["self"],["sslmode"]],["bool"]]],[11,"clone","","",86,[[["self"]],["sslmode"]]],[11,"partial_cmp","","",86,[[["self"],["sslmode"]],["option",["ordering"]]]],[11,"lt","","",86,[[["self"],["sslmode"]],["bool"]]],[11,"le","","",86,[[["self"],["sslmode"]],["bool"]]],[11,"gt","","",86,[[["self"],["sslmode"]],["bool"]]],[11,"ge","","",86,[[["self"],["sslmode"]],["bool"]]],[11,"cmp","","",86,[[["self"],["sslmode"]],["ordering"]]],[11,"hash","","",86,N],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",86,[[],["sslmode"]]],[11,"all","","Returns the set containing all flags.",86,[[],["sslmode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",86,[[["self"]],["c_long"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",86,[[["c_long"]],["option",["sslmode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",86,[[["c_long"]],["sslmode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",86,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,[[["self"],["sslmode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,[[["self"],["sslmode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",86,[[["self"],["sslmode"]]]],[11,"remove","","Removes the specified flags in-place.",86,[[["self"],["sslmode"]]]],[11,"toggle","","Toggles the specified flags in-place.",86,[[["self"],["sslmode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",86,[[["self"],["sslmode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",86,[[["self"],["sslmode"]],["sslmode"]]],[11,"bitor_assign","","Adds the set of flags.",86,[[["self"],["sslmode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,[[["self"],["sslmode"]],["sslmode"]]],[11,"bitxor_assign","","Toggles the set of flags.",86,[[["self"],["sslmode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",86,[[["self"],["sslmode"]],["sslmode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",86,[[["self"],["sslmode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",86,[[["self"],["sslmode"]],["sslmode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",86,[[["self"],["sslmode"]]]],[11,"not","","Returns the complement of this set of flags.",86,[[["self"]],["sslmode"]]],[11,"extend","","",86,[[["self"],["t"]]]],[11,"from_iter","","",86,[[["t"]],["sslmode"]]],[11,"clone","","",87,[[["self"]],["sslmethod"]]],[11,"tls","","Support all versions of the TLS protocol.",87,[[],["sslmethod"]]],[11,"dtls","","Support all versions of the DTLS protocol.",87,[[],["sslmethod"]]],[11,"from_ptr","","Constructs an `SslMethod` from a pointer to the underlying OpenSSL value.",87,N],[11,"as_ptr","","Returns a pointer to the underlying OpenSSL value.",87,N],[11,"eq","","",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"ne","","",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"clone","","",88,[[["self"]],["sslverifymode"]]],[11,"partial_cmp","","",88,[[["self"],["sslverifymode"]],["option",["ordering"]]]],[11,"lt","","",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"le","","",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"gt","","",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"ge","","",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"cmp","","",88,[[["self"],["sslverifymode"]],["ordering"]]],[11,"hash","","",88,N],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",88,[[],["sslverifymode"]]],[11,"all","","Returns the set containing all flags.",88,[[],["sslverifymode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",88,[[["self"]],["i32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",88,[[["i32"]],["option",["sslverifymode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",88,[[["i32"]],["sslverifymode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",88,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,[[["self"],["sslverifymode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",88,[[["self"],["sslverifymode"]]]],[11,"remove","","Removes the specified flags in-place.",88,[[["self"],["sslverifymode"]]]],[11,"toggle","","Toggles the specified flags in-place.",88,[[["self"],["sslverifymode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",88,[[["self"],["sslverifymode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",88,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitor_assign","","Adds the set of flags.",88,[[["self"],["sslverifymode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitxor_assign","","Toggles the set of flags.",88,[[["self"],["sslverifymode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",88,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",88,[[["self"],["sslverifymode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",88,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",88,[[["self"],["sslverifymode"]]]],[11,"not","","Returns the complement of this set of flags.",88,[[["self"]],["sslverifymode"]]],[11,"extend","","",88,[[["self"],["t"]]]],[11,"from_iter","","",88,[[["t"]],["sslverifymode"]]],[11,"clone","","",89,[[["self"]],["statustype"]]],[11,"from_raw","","Constructs a `StatusType` from a raw OpenSSL value.",89,[[["c_int"]],["statustype"]]],[11,"as_raw","","Returns the raw OpenSSL value represented by this type.",89,[[["self"]],["c_int"]]],[11,"drop","","",90,[[["self"]]]],[11,"new","","Creates a new `SslContextBuilder`.",90,[[["sslmethod"]],["result",["sslcontextbuilder","errorstack"]]]],[11,"from_ptr","","Creates an `SslContextBuilder` from a pointer to a raw OpenSSL value.",90,N],[11,"as_ptr","","Returns a pointer to the raw OpenSSL value.",90,N],[11,"set_verify","","Configures the certificate verification method for new connections.",90,[[["self"],["sslverifymode"]]]],[11,"set_verify_callback","","Configures the certificate verification method for new connections and registers a verification callback.",90,[[["self"],["sslverifymode"],["f"]]]],[11,"set_servername_callback","","Configures the server name indication (SNI) callback for new connections.",90,[[["self"],["f"]]]],[11,"set_verify_depth","","Sets the certificate verification depth.",90,[[["self"],["u32"]]]],[11,"set_read_ahead","","Controls read ahead behavior.",90,[[["self"],["bool"]]]],[11,"set_mode","","Sets the mode used by the context, returning the previous mode.",90,[[["self"],["sslmode"]],["sslmode"]]],[11,"set_tmp_dh","","Sets the parameters to be used during ephemeral Diffie-Hellman key exchange.",90,[[["self"],["dhref"]],["result",["errorstack"]]]],[11,"set_tmp_dh_callback","","Sets the callback which will generate parameters to be used during ephemeral Diffie-Hellman key exchange.",90,[[["self"],["f"]]]],[11,"set_tmp_ecdh","","Sets the parameters to be used during ephemeral elliptic curve Diffie-Hellman key exchange.",90,[[["self"],["eckeyref"]],["result",["errorstack"]]]],[11,"set_default_verify_paths","","Use the default locations of trusted certificates for verification.",90,[[["self"]],["result",["errorstack"]]]],[11,"set_ca_file","","Loads trusted root certificates from a file.",90,[[["self"],["p"]],["result",["errorstack"]]]],[11,"set_client_ca_list","","Sets the list of CA names sent to the client.",90,[[["self"],["stack",["x509name"]]]]],[11,"set_session_id_context","","Set the context identifier for sessions.",90,N],[11,"set_certificate_file","","Loads a leaf certificate from a file.",90,[[["self"],["p"],["x509filetype"]],["result",["errorstack"]]]],[11,"set_certificate_chain_file","","Loads a certificate chain from a file.",90,[[["self"],["p"]],["result",["errorstack"]]]],[11,"set_certificate","","Sets the leaf certificate.",90,[[["self"],["x509ref"]],["result",["errorstack"]]]],[11,"add_extra_chain_cert","","Appends a certificate to the certificate chain.",90,[[["self"],["x509"]],["result",["errorstack"]]]],[11,"set_private_key_file","","Loads the private key from a file.",90,[[["self"],["p"],["x509filetype"]],["result",["errorstack"]]]],[11,"set_private_key","","Sets the private key.",90,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"set_cipher_list","","Sets the list of supported ciphers.",90,[[["self"],["str"]],["result",["errorstack"]]]],[11,"set_options","","Sets the options used by the context, returning the old set.",90,[[["self"],["ssloption"]],["ssloption"]]],[11,"options","","Returns the options used by the context.",90,[[["self"]],["ssloption"]]],[11,"clear_options","","Clears the options used by the context, returning the old set.",90,[[["self"],["ssloption"]],["ssloption"]]],[11,"set_npn_protocols","","Set the protocols to be used during Next Protocol Negotiation (the protocols supported by the application).",90,N],[11,"check_private_key","","Checks for consistency between the private key and certificate.",90,[[["self"]],["result",["errorstack"]]]],[11,"cert_store","","Returns a shared reference to the context's certificate store.",90,[[["self"]],["x509storebuilderref"]]],[11,"cert_store_mut","","Returns a mutable reference to the context's certificate store.",90,[[["self"]],["x509storebuilderref"]]],[11,"set_status_callback","","Sets the callback dealing with OCSP stapling.",90,[[["self"],["f"]],["result",["errorstack"]]]],[11,"set_psk_callback","","Sets the callback for providing an identity and pre-shared key for a TLS-PSK client.",90,[[["self"],["f"]]]],[11,"set_ex_data","","Sets the extra data at the specified index.",90,[[["self"],["index",["sslcontext"]],["t"]]]],[11,"build","","Consumes the builder, returning a new `SslContext`.",90,[[["self"]],["sslcontext"]]],[11,"from_ptr","","",91,N],[11,"as_ptr","","",91,N],[11,"drop","","",91,[[["self"]]]],[11,"deref","","",91,[[["self"]],["sslcontextref"]]],[11,"deref_mut","","",91,[[["self"]],["sslcontextref"]]],[11,"borrow","","",91,[[["self"]],["sslcontextref"]]],[11,"as_ref","","",91,[[["self"]],["sslcontextref"]]],[11,"clone","","",91,[[["self"]],["self"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new builder object for an `SslContext`.",91,[[["sslmethod"]],["result",["sslcontextbuilder","errorstack"]]]],[11,"new_ex_index","","Returns a new extra data index.",91,[[],["result",["index","errorstack"]]]],[11,"cert_store","","Returns a shared reference to the certificate store used for verification.",92,[[["self"]],["x509storeref"]]],[11,"extra_chain_certs","","Returns a shared reference to the stack of certificates making up the chain from the leaf.",92,[[["self"]],["stackref"]]],[11,"ex_data","","Returns a reference to the extra data at the specified index.",92,[[["self"],["index",["sslcontext"]]],["option"]]],[11,"from_ptr","","",93,N],[11,"as_ptr","","",93,N],[11,"deref","","",93,[[["self"]],["sslcipherref"]]],[11,"deref_mut","","",93,[[["self"]],["sslcipherref"]]],[11,"name","","Returns the name of the cipher.",94,[[["self"]],["str"]]],[11,"version","","Returns the SSL/TLS protocol version that first defined the cipher.",94,[[["self"]],["str"]]],[11,"bits","","Returns the number of bits used for the cipher.",94,[[["self"]],["cipherbits"]]],[11,"description","","Returns a textual description of the cipher.",94,[[["self"]],["string"]]],[11,"from_ptr","","",95,N],[11,"as_ptr","","",95,N],[11,"drop","","",95,[[["self"]]]],[11,"deref","","",95,[[["self"]],["sslsessionref"]]],[11,"deref_mut","","",95,[[["self"]],["sslsessionref"]]],[11,"borrow","","",95,[[["self"]],["sslsessionref"]]],[11,"as_ref","","",95,[[["self"]],["sslsessionref"]]],[11,"clone","","",95,[[["self"]],["sslsession"]]],[11,"to_owned","","",96,[[["self"]],["sslsession"]]],[11,"id","","Returns the SSL session ID.",96,N],[11,"master_key_len","","Returns the length of the master key.",96,[[["self"]],["usize"]]],[11,"master_key","","Copies the master key into the provided buffer.",96,N],[11,"from_ptr","","",97,N],[11,"as_ptr","","",97,N],[11,"drop","","",97,[[["self"]]]],[11,"deref","","",97,[[["self"]],["sslref"]]],[11,"deref_mut","","",97,[[["self"]],["sslref"]]],[11,"borrow","","",97,[[["self"]],["sslref"]]],[11,"as_ref","","",97,[[["self"]],["sslref"]]],[11,"new_ex_index","","Returns a new extra data index.",97,[[],["result",["index","errorstack"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"set_verify","","Like [`SslContextBuilder::set_verify`].",98,[[["self"],["sslverifymode"]]]],[11,"set_verify_callback","","Like [`SslContextBuilder::set_verify_callback`].",98,[[["self"],["sslverifymode"],["f"]]]],[11,"set_tmp_dh","","Like [`SslContextBuilder::set_tmp_dh`].",98,[[["self"],["dhref"]],["result",["errorstack"]]]],[11,"set_tmp_dh_callback","","Like [`SslContextBuilder::set_tmp_dh_callback`].",98,[[["self"],["f"]]]],[11,"set_tmp_ecdh","","Like [`SslContextBuilder::set_tmp_ecdh`].",98,[[["self"],["eckeyref"]],["result",["errorstack"]]]],[11,"current_cipher","","Returns the current cipher if the session is active.",98,[[["self"]],["option",["sslcipherref"]]]],[11,"state_string","","Returns a short string describing the state of the session.",98,[[["self"]],["str"]]],[11,"state_string_long","","Returns a longer string describing the state of the session.",98,[[["self"]],["str"]]],[11,"set_hostname","","Sets the host name to be sent to the server for Server Name Indication (SNI).",98,[[["self"],["str"]],["result",["errorstack"]]]],[11,"peer_certificate","","Returns the peer's certificate, if present.",98,[[["self"]],["option",["x509"]]]],[11,"peer_cert_chain","","Returns the certificate chain of the peer, if present.",98,[[["self"]],["option",["stackref"]]]],[11,"certificate","","Like [`SslContext::certificate`].",98,[[["self"]],["option",["x509ref"]]]],[11,"private_key","","Like [`SslContext::private_key`].",98,[[["self"]],["option",["pkeyref"]]]],[11,"version","","Returns a string describing the protocol version of the session.",98,[[["self"]],["str"]]],[11,"selected_npn_protocol","","Returns the protocol selected by performing Next Protocol Negotiation, if any.",98,[[["self"]],["option"]]],[11,"pending","","Returns the number of bytes remaining in the currently processed TLS record.",98,[[["self"]],["usize"]]],[11,"compression","","Returns the compression method currently in use.",98,[[["self"]],["option",["str"]]]],[11,"servername","","Returns the servername sent by the client via Server Name Indication (SNI).",98,[[["self"]],["option",["str"]]]],[11,"set_ssl_context","","Changes the context corresponding to the current connection.",98,[[["self"],["sslcontextref"]],["result",["errorstack"]]]],[11,"ssl_context","","Returns the context corresponding to the current connection.",98,[[["self"]],["sslcontextref"]]],[11,"verify_result","","Returns the certificate verification result.",98,[[["self"]],["option",["x509verifyerror"]]]],[11,"session","","Returns a shared reference to the SSL session.",98,[[["self"]],["option",["sslsessionref"]]]],[11,"set_session","","Sets the session to be used.",98,[[["self"],["sslsessionref"]],["result",["errorstack"]]]],[11,"session_reused","","Determines if the session provided to `set_session` was successfully reused.",98,[[["self"]],["bool"]]],[11,"set_status_type","","Sets the status response a client wishes the server to reply with.",98,[[["self"],["statustype"]],["result",["errorstack"]]]],[11,"ocsp_status","","Returns the server's OCSP response, if present.",98,[[["self"]],["option"]]],[11,"set_ocsp_status","","Sets the OCSP response to be returned to the client.",98,N],[11,"is_server","","Determines if this `Ssl` is configured for server-side or client-side use.",98,[[["self"]],["bool"]]],[11,"set_ex_data","","Sets the extra data at the specified index.",98,[[["self"],["index",["ssl"]],["t"]]]],[11,"ex_data","","Returns a reference to the extra data at the specified index.",98,[[["self"],["index",["ssl"]]],["option"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Ssl`.",97,[[["sslcontext"]],["result",["ssl","errorstack"]]]],[11,"connect","","Initiates a client-side TLS handshake.",97,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"accept","","Initiates a server-side TLS handshake.",97,[[["self"],["s"]],["result",["sslstream","handshakeerror"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Returns a shared reference to the inner stream.",99,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the inner stream.",99,[[["self"]],["s"]]],[11,"ssl","","Returns a shared reference to the `Ssl` of the stream.",99,[[["self"]],["sslref"]]],[11,"error","","Returns the underlying error which interrupted this handshake.",99,[[["self"]],["error"]]],[11,"into_error","","Consumes `self`, returning its error.",99,[[["self"]],["error"]]],[11,"handshake","","Restarts the handshake process.",99,[[["self"]],["result",["sslstream","handshakeerror"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"ssl_read","","Like `read`, but returns an `ssl::Error` rather than an `io::Error`.",100,N],[11,"ssl_write","","Like `write`, but returns an `ssl::Error` rather than an `io::Error`.",100,N],[11,"shutdown","","Shuts down the session.",100,[[["self"]],["result",["shutdownresult","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying stream.",100,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the underlying stream.",100,[[["self"]],["s"]]],[11,"ssl","","Returns a shared reference to the `Ssl` object associated with this stream.",100,[[["self"]],["sslref"]]],[11,"read","","",100,N],[11,"write","","",100,N],[11,"flush","","",100,[[["self"]],["result"]]],[11,"clone","","",78,[[["self"]],["shutdownresult"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"eq","","",78,[[["self"],["shutdownresult"]],["bool"]]],[0,"stack","openssl","",N,N],[3,"Stack","openssl::stack","An owned stack of `T`.",N,N],[3,"IntoIter","","",N,N],[3,"StackRef","","",N,N],[3,"Iter","","An iterator over the stack's contents.",N,N],[3,"IterMut","","A mutable iterator over the stack's contents.",N,N],[8,"Stackable","","Trait implemented by types which can be placed in a stack.",N,N],[16,"StackType","","The C stack type for this element.",101,N],[11,"new","","",102,[[],["result",["stack","errorstack"]]]],[11,"drop","","",102,[[["self"]]]],[11,"into_iter","","",102,[[["self"]],["intoiter"]]],[11,"as_ref","","",102,[[["self"]],["stackref"]]],[11,"borrow","","",102,[[["self"]],["stackref"]]],[11,"from_ptr","","",102,N],[11,"as_ptr","","",102,N],[11,"deref","","",102,[[["self"]],["stackref"]]],[11,"deref_mut","","",102,[[["self"]],["stackref"]]],[11,"drop","","",103,[[["self"]]]],[11,"next","","",103,[[["self"]],["option"]]],[11,"size_hint","","",103,N],[11,"len","","Returns the number of items in the stack",104,[[["self"]],["usize"]]],[11,"iter","","",104,[[["self"]],["iter"]]],[11,"iter_mut","","",104,[[["self"]],["itermut"]]],[11,"get","","Returns a reference to the element at the given index in the stack or `None` if the index is out of bounds",104,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the element at the given index in the stack or `None` if the index is out of bounds",104,[[["self"],["usize"]],["option"]]],[11,"push","","Pushes a value onto the top of the stack.",104,[[["self"],["t"]],["result",["errorstack"]]]],[11,"pop","","Removes the last element from the stack and returns it.",104,[[["self"]],["option"]]],[11,"index","","",104,N],[11,"index_mut","","",104,N],[11,"next","","",105,[[["self"]],["option"]]],[11,"size_hint","","",105,N],[11,"next","","",106,[[["self"]],["option"]]],[11,"size_hint","","",106,N],[0,"string","openssl","",N,N],[3,"OpensslString","openssl::string","",N,N],[3,"OpensslStringRef","","",N,N],[11,"from_ptr","","",107,N],[11,"as_ptr","","",107,N],[11,"drop","","",107,[[["self"]]]],[11,"deref","","",107,[[["self"]],["opensslstringref"]]],[11,"deref_mut","","",107,[[["self"]],["opensslstringref"]]],[11,"borrow","","",107,[[["self"]],["opensslstringref"]]],[11,"as_ref","","",107,[[["self"]],["opensslstringref"]]],[11,"from_raw_parts","","",107,N],[11,"from_null_terminated","","",107,N],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"deref","","",108,[[["self"]],["str"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[0,"symm","openssl","High level interface to certain symmetric ciphers.",N,N],[3,"Cipher","openssl::symm","Represents a particular cipher algorithm.",N,N],[3,"Crypter","","Represents a symmetric cipher context.",N,N],[4,"Mode","","",N,N],[13,"Encrypt","","",109,N],[13,"Decrypt","","",109,N],[5,"encrypt","","Encrypts data in one go, and returns the encrypted data.",N,N],[5,"decrypt","","Decrypts data in one go, and returns the decrypted data.",N,N],[5,"encrypt_aead","","Like `encrypt`, but for AEAD ciphers such as AES GCM.",N,N],[5,"decrypt_aead","","Like `decrypt`, but for AEAD ciphers such as AES GCM.",N,N],[11,"clone","","",109,[[["self"]],["mode"]]],[11,"clone","","",110,[[["self"]],["cipher"]]],[11,"aes_128_ecb","","",110,[[],["cipher"]]],[11,"aes_128_cbc","","",110,[[],["cipher"]]],[11,"aes_128_xts","","",110,[[],["cipher"]]],[11,"aes_128_ctr","","",110,[[],["cipher"]]],[11,"aes_128_cfb1","","",110,[[],["cipher"]]],[11,"aes_128_cfb128","","",110,[[],["cipher"]]],[11,"aes_128_cfb8","","",110,[[],["cipher"]]],[11,"aes_128_gcm","","",110,[[],["cipher"]]],[11,"aes_256_ecb","","",110,[[],["cipher"]]],[11,"aes_256_cbc","","",110,[[],["cipher"]]],[11,"aes_256_xts","","",110,[[],["cipher"]]],[11,"aes_256_ctr","","",110,[[],["cipher"]]],[11,"aes_256_cfb1","","",110,[[],["cipher"]]],[11,"aes_256_cfb128","","",110,[[],["cipher"]]],[11,"aes_256_cfb8","","",110,[[],["cipher"]]],[11,"aes_256_gcm","","",110,[[],["cipher"]]],[11,"bf_cbc","","",110,[[],["cipher"]]],[11,"bf_ecb","","",110,[[],["cipher"]]],[11,"bf_cfb64","","",110,[[],["cipher"]]],[11,"bf_ofb","","",110,[[],["cipher"]]],[11,"des_cbc","","",110,[[],["cipher"]]],[11,"des_ecb","","",110,[[],["cipher"]]],[11,"rc4","","",110,[[],["cipher"]]],[11,"from_ptr","","",110,N],[11,"as_ptr","","",110,N],[11,"key_len","","Returns the length of keys used with this cipher.",110,[[["self"]],["usize"]]],[11,"iv_len","","Returns the length of the IV used with this cipher, or `None` if the cipher does not use an IV.",110,[[["self"]],["option",["usize"]]]],[11,"block_size","","Returns the block size of the cipher.",110,[[["self"]],["usize"]]],[11,"new","","Creates a new `Crypter`.  The initialisation vector, `iv`, is not necesarry for certain types of `Cipher`.",111,N],[11,"pad","","Enables or disables padding.",111,[[["self"],["bool"]]]],[11,"set_tag","","Sets the tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",111,N],[11,"aad_update","","Feeds Additional Authenticated Data (AAD) through the cipher.",111,N],[11,"update","","Feeds data from `input` through the cipher, writing encrypted/decrypted bytes into `output`.",111,N],[11,"finalize","","Finishes the encryption/decryption process, writing any remaining data to `output`.",111,N],[11,"get_tag","","Retrieves the authentication tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",111,N],[11,"drop","","",111,[[["self"]]]],[0,"types","openssl","",N,N],[8,"OpenSslType","openssl::types","A type implemented by wrappers over foreign types.",N,N],[16,"CType","","The raw C type.",112,N],[16,"Ref","","The type representing a reference to this type.",112,N],[10,"from_ptr","","Constructs an instance of this type from its raw type.",112,N],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",112,N],[8,"OpenSslTypeRef","","A trait implemented by types which reference borrowed foreign types.",N,N],[16,"CType","","The raw C type.",113,N],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",113,N],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",113,N],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",113,N],[0,"version","openssl","",N,N],[5,"number","openssl::version","OPENSSL_VERSION_NUMBER is a numeric release version identifier:",N,[[],["i64"]]],[5,"version","","The text variant of the version number and the release date. For example, \"OpenSSL 0.9.5a 1 Apr 2000\".",N,[[],["str"]]],[5,"c_flags","","The compiler flags set for the compilation process in the form \"compiler: ...\" if available or \"compiler: information not available\" otherwise.",N,[[],["str"]]],[5,"built_on","","The date of the build process in the form \"built on: ...\" if available or \"built on: date not available\" otherwise.",N,[[],["str"]]],[5,"platform","","The \"Configure\" target of the library build in the form \"platform: ...\" if available or \"platform: information not available\" otherwise.",N,[[],["str"]]],[5,"dir","","The \"OPENSSLDIR\" setting of the library build in the form \"OPENSSLDIR: \"...\"\" if available or \"OPENSSLDIR: N/A\" otherwise.",N,[[],["str"]]],[0,"x509","openssl","",N,N],[3,"X509FileType","openssl::x509","",N,N],[3,"X509StoreContext","","",N,N],[3,"X509StoreContextRef","","",N,N],[3,"X509Generator","","",N,N],[3,"X509Builder","","A builder type which can create `X509` objects.",N,N],[3,"X509","","",N,N],[3,"X509Ref","","",N,N],[3,"X509v3Context","","A context object required to construct certain X509 extension values.",N,N],[3,"X509Extension","","",N,N],[3,"X509ExtensionRef","","",N,N],[3,"X509NameBuilder","","",N,N],[3,"X509Name","","",N,N],[3,"X509NameRef","","",N,N],[3,"X509NameEntries","","",N,N],[3,"X509NameEntry","","",N,N],[3,"X509NameEntryRef","","",N,N],[3,"X509ReqBuilder","","",N,N],[3,"X509Req","","",N,N],[3,"X509ReqRef","","",N,N],[3,"X509VerifyError","","",N,N],[3,"GeneralName","","",N,N],[3,"GeneralNameRef","","",N,N],[3,"X509Algorithm","","",N,N],[3,"X509AlgorithmRef","","",N,N],[0,"extension","","",N,N],[3,"BasicConstraints","openssl::x509::extension","",N,N],[3,"KeyUsage","","",N,N],[3,"ExtendedKeyUsage","","",N,N],[3,"SubjectKeyIdentifier","","",N,N],[3,"AuthorityKeyIdentifier","","",N,N],[3,"SubjectAlternativeName","","",N,N],[4,"ExtensionType","","Type-only version of the `Extension` enum.",N,N],[13,"KeyUsage","","",114,N],[13,"ExtKeyUsage","","",114,N],[13,"SubjectAltName","","",114,N],[13,"IssuerAltName","","",114,N],[13,"OtherNid","","",114,N],[13,"OtherStr","","",114,N],[4,"Extension","","A X.509 v3 certificate extension.",N,N],[13,"KeyUsage","","The purposes of the key contained in the certificate",115,N],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",115,N],[13,"SubjectAltName","","Subject Alternative Names",115,N],[13,"IssuerAltName","","Issuer Alternative Names",115,N],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",115,N],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",115,N],[4,"KeyUsageOption","","",N,N],[13,"DigitalSignature","","",116,N],[13,"NonRepudiation","","",116,N],[13,"KeyEncipherment","","",116,N],[13,"DataEncipherment","","",116,N],[13,"KeyAgreement","","",116,N],[13,"KeyCertSign","","",116,N],[13,"CRLSign","","",116,N],[13,"EncipherOnly","","",116,N],[13,"DecipherOnly","","",116,N],[4,"ExtKeyUsageOption","","",N,N],[13,"ServerAuth","","",117,N],[13,"ClientAuth","","",117,N],[13,"CodeSigning","","",117,N],[13,"EmailProtection","","",117,N],[13,"TimeStamping","","",117,N],[13,"MsCodeInd","","",117,N],[13,"MsCodeCom","","",117,N],[13,"MsCtlSign","","",117,N],[13,"MsSgc","","",117,N],[13,"MsEfs","","",117,N],[13,"NsSgc","","",117,N],[13,"Other","","An arbitrary key usage by OID.",117,N],[4,"AltNameOption","","",N,N],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",118,N],[13,"Email","","",118,N],[13,"DNS","","",118,N],[13,"Directory","","",118,N],[13,"URI","","",118,N],[13,"IPAddress","","",118,N],[13,"RegisteredID","","",118,N],[11,"clone","","",114,[[["self"]],["extensiontype"]]],[11,"hash","","",114,N],[11,"eq","","",114,[[["self"],["extensiontype"]],["bool"]]],[11,"ne","","",114,[[["self"],["extensiontype"]],["bool"]]],[11,"clone","","",115,[[["self"]],["extension"]]],[11,"get_type","","",115,[[["self"]],["extensiontype"]]],[11,"get_nid","","",114,[[["self"]],["option",["nid"]]]],[11,"get_name","","",114,[[["self"]],["option",["str"]]]],[11,"to_string","","",115,[[["self"]],["string"]]],[11,"clone","","",116,[[["self"]],["keyusageoption"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",117,[[["self"]],["extkeyusageoption"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",118,[[["self"]],["altnameoption"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"new","","",119,[[],["basicconstraints"]]],[11,"critical","","",119,[[["self"]],["basicconstraints"]]],[11,"ca","","",119,[[["self"]],["basicconstraints"]]],[11,"pathlen","","",119,[[["self"],["u32"]],["basicconstraints"]]],[11,"build","","",119,[[["self"]],["result",["x509extension","errorstack"]]]],[11,"new","","",120,[[],["keyusage"]]],[11,"critical","","",120,[[["self"]],["keyusage"]]],[11,"digital_signature","","",120,[[["self"]],["keyusage"]]],[11,"non_repudiation","","",120,[[["self"]],["keyusage"]]],[11,"key_encipherment","","",120,[[["self"]],["keyusage"]]],[11,"data_encipherment","","",120,[[["self"]],["keyusage"]]],[11,"key_agreement","","",120,[[["self"]],["keyusage"]]],[11,"key_cert_sign","","",120,[[["self"]],["keyusage"]]],[11,"crl_sign","","",120,[[["self"]],["keyusage"]]],[11,"encipher_only","","",120,[[["self"]],["keyusage"]]],[11,"decipher_only","","",120,[[["self"]],["keyusage"]]],[11,"build","","",120,[[["self"]],["result",["x509extension","errorstack"]]]],[11,"new","","",121,[[],["extendedkeyusage"]]],[11,"critical","","",121,[[["self"]],["extendedkeyusage"]]],[11,"server_auth","","",121,[[["self"]],["extendedkeyusage"]]],[11,"client_auth","","",121,[[["self"]],["extendedkeyusage"]]],[11,"code_signing","","",121,[[["self"]],["extendedkeyusage"]]],[11,"time_stamping","","",121,[[["self"]],["extendedkeyusage"]]],[11,"ms_code_ind","","",121,[[["self"]],["extendedkeyusage"]]],[11,"ms_code_com","","",121,[[["self"]],["extendedkeyusage"]]],[11,"ms_ctl_sign","","",121,[[["self"]],["extendedkeyusage"]]],[11,"ms_sgc","","",121,[[["self"]],["extendedkeyusage"]]],[11,"ms_efs","","",121,[[["self"]],["extendedkeyusage"]]],[11,"ns_sgc","","",121,[[["self"]],["extendedkeyusage"]]],[11,"other","","",121,[[["self"],["str"]],["extendedkeyusage"]]],[11,"build","","",121,[[["self"]],["result",["x509extension","errorstack"]]]],[11,"new","","",122,[[],["subjectkeyidentifier"]]],[11,"critical","","",122,[[["self"]],["subjectkeyidentifier"]]],[11,"build","","",122,[[["self"],["x509v3context"]],["result",["x509extension","errorstack"]]]],[11,"new","","",123,[[],["authoritykeyidentifier"]]],[11,"critical","","",123,[[["self"]],["authoritykeyidentifier"]]],[11,"keyid","","",123,[[["self"],["bool"]],["authoritykeyidentifier"]]],[11,"issuer","","",123,[[["self"],["bool"]],["authoritykeyidentifier"]]],[11,"build","","",123,[[["self"],["x509v3context"]],["result",["x509extension","errorstack"]]]],[11,"new","","",124,[[],["subjectalternativename"]]],[11,"critical","","",124,[[["self"]],["subjectalternativename"]]],[11,"email","","",124,[[["self"],["str"]],["subjectalternativename"]]],[11,"uri","","",124,[[["self"],["str"]],["subjectalternativename"]]],[11,"dns","","",124,[[["self"],["str"]],["subjectalternativename"]]],[11,"rid","","",124,[[["self"],["str"]],["subjectalternativename"]]],[11,"ip","","",124,[[["self"],["str"]],["subjectalternativename"]]],[11,"dir_name","","",124,[[["self"],["str"]],["subjectalternativename"]]],[11,"other_name","","",124,[[["self"],["str"]],["subjectalternativename"]]],[11,"build","","",124,[[["self"],["x509v3context"]],["result",["x509extension","errorstack"]]]],[0,"store","openssl::x509","",N,N],[3,"X509StoreBuilder","openssl::x509::store","",N,N],[3,"X509StoreBuilderRef","","",N,N],[3,"X509Store","","",N,N],[3,"X509StoreRef","","",N,N],[11,"from_ptr","","",125,N],[11,"as_ptr","","",125,N],[11,"drop","","",125,[[["self"]]]],[11,"deref","","",125,[[["self"]],["x509storebuilderref"]]],[11,"deref_mut","","",125,[[["self"]],["x509storebuilderref"]]],[11,"borrow","","",125,[[["self"]],["x509storebuilderref"]]],[11,"as_ref","","",125,[[["self"]],["x509storebuilderref"]]],[11,"new","","Returns a builder for a certificate store.",125,[[],["result",["x509storebuilder","errorstack"]]]],[11,"build","","Constructs the `X509Store`.",125,[[["self"]],["x509store"]]],[11,"add_cert","","Adds a certificate to the certificate store.",126,[[["self"],["x509"]],["result",["errorstack"]]]],[11,"set_default_paths","","Load certificates from their default locations.",126,[[["self"]],["result",["errorstack"]]]],[11,"from_ptr","","",127,N],[11,"as_ptr","","",127,N],[11,"drop","","",127,[[["self"]]]],[11,"deref","","",127,[[["self"]],["x509storeref"]]],[11,"deref_mut","","",127,[[["self"]],["x509storeref"]]],[11,"borrow","","",127,[[["self"]],["x509storeref"]]],[11,"as_ref","","",127,[[["self"]],["x509storeref"]]],[17,"X509_FILETYPE_PEM","openssl::x509","",N,N],[17,"X509_FILETYPE_ASN1","","",N,N],[17,"X509_FILETYPE_DEFAULT","","",N,N],[11,"as_raw","","",128,[[["self"]],["c_int"]]],[11,"from_ptr","","",129,N],[11,"as_ptr","","",129,N],[11,"drop","","",129,[[["self"]]]],[11,"deref","","",129,[[["self"]],["x509storecontextref"]]],[11,"deref_mut","","",129,[[["self"]],["x509storecontextref"]]],[11,"borrow","","",129,[[["self"]],["x509storecontextref"]]],[11,"as_ref","","",129,[[["self"]],["x509storecontextref"]]],[11,"error","","",130,[[["self"]],["option",["x509verifyerror"]]]],[11,"current_cert","","",130,[[["self"]],["option",["x509ref"]]]],[11,"error_depth","","",130,[[["self"]],["u32"]]],[11,"chain","","",130,[[["self"]],["option",["stackref"]]]],[11,"ssl","","Returns a reference to the `Ssl` associated with this context.",130,[[["self"]],["result",["option","errorstack"]]]],[11,"new","","Creates a new generator with the following defaults:",131,[[],["x509generator"]]],[11,"set_valid_period","","Sets certificate validity period in days since today",131,[[["self"],["u32"]],["x509generator"]]],[11,"add_name","","Add attribute to the name of the certificate",131,[[["self"],["string"],["string"]],["x509generator"]]],[11,"add_names","","Add multiple attributes to the name of the certificate",131,[[["self"],["i"]],["x509generator"]]],[11,"add_extension","","Add an extension to a certificate",131,[[["self"],["extension"]],["x509generator"]]],[11,"add_extensions","","Add multiple extensions to a certificate",131,[[["self"],["i"]],["x509generator"]]],[11,"set_sign_hash","","",131,[[["self"],["messagedigest"]],["x509generator"]]],[11,"sign","","Sets the certificate public-key, then self-sign and return it",131,[[["self"],["pkeyref"]],["result",["x509","errorstack"]]]],[11,"request","","Obtain a certificate signing request (CSR)",131,[[["self"],["pkeyref"]],["result",["x509req","errorstack"]]]],[11,"new","","Creates a new builder.",132,[[],["result",["x509builder","errorstack"]]]],[11,"set_not_after","","Sets the notAfter constraint on the certificate.",132,[[["self"],["asn1timeref"]],["result",["errorstack"]]]],[11,"set_not_before","","Sets the notBefore constraint on the certificate.",132,[[["self"],["asn1timeref"]],["result",["errorstack"]]]],[11,"set_version","","Sets the version of the certificate.",132,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"set_serial_number","","Sets the serial number of the certificate.",132,[[["self"],["asn1integerref"]],["result",["errorstack"]]]],[11,"set_issuer_name","","Sets the issuer name of the certificate.",132,[[["self"],["x509nameref"]],["result",["errorstack"]]]],[11,"set_subject_name","","Sets the subject name of the certificate.",132,[[["self"],["x509nameref"]],["result",["errorstack"]]]],[11,"set_pubkey","","Sets the public key associated with the certificate.",132,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"x509v3_context","","Returns a context object which is needed to create certain X509 extension values.",132,[[["self"],["option",["x509ref"]],["option",["confref"]]],["x509v3context"]]],[11,"append_extension","","Adds an X509 extension value to the certificate.",132,[[["self"],["x509extension"]],["result",["errorstack"]]]],[11,"sign","","Signs the certificate with a private key.",132,[[["self"],["pkeyref"],["messagedigest"]],["result",["errorstack"]]]],[11,"build","","Consumes the builder, returning the certificate.",132,[[["self"]],["x509"]]],[11,"from_ptr","","",133,N],[11,"as_ptr","","",133,N],[11,"drop","","",133,[[["self"]]]],[11,"deref","","",133,[[["self"]],["x509ref"]]],[11,"deref_mut","","",133,[[["self"]],["x509ref"]]],[11,"borrow","","",133,[[["self"]],["x509ref"]]],[11,"as_ref","","",133,[[["self"]],["x509ref"]]],[11,"subject_name","","",134,[[["self"]],["x509nameref"]]],[11,"subject_alt_names","","Returns this certificate's SAN entries, if they exist.",134,[[["self"]],["option",["stack"]]]],[11,"public_key","","",134,[[["self"]],["result",["pkey","errorstack"]]]],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",134,[[["self"],["messagedigest"]],["result",["vec","errorstack"]]]],[11,"not_after","","Returns the certificate's Not After validity period.",134,[[["self"]],["asn1timeref"]]],[11,"not_before","","Returns the certificate's Not Before validity period.",134,[[["self"]],["asn1timeref"]]],[11,"signature","","Returns the certificate's signature",134,[[["self"]],["asn1bitstringref"]]],[11,"signature_algorithm","","Returns the certificate's signature algorithm.",134,[[["self"]],["x509algorithmref"]]],[11,"ocsp_responders","","Returns the list of OCSP responder URLs specified in the certificate's Authority Information Access field.",134,[[["self"]],["result",["stack","errorstack"]]]],[11,"issued","","Checks that this certificate issued `subject`.",134,[[["self"],["x509ref"]],["result",["x509verifyerror"]]]],[11,"to_pem","","Serializes this value to PEM.",134,[[["self"]],["result",["vec","errorstack"]]]],[11,"to_der","","Serializes this value to DER.",134,[[["self"]],["result",["vec","errorstack"]]]],[11,"to_owned","","",134,[[["self"]],["x509"]]],[11,"builder","","Returns a new builder.",133,[[],["result",["x509builder","errorstack"]]]],[11,"from_pem","","Deserializes a value from PEM-formatted data.",133,N],[11,"from_der","","Deserializes a value from DER-formatted data.",133,N],[11,"stack_from_pem","","Deserializes a list of PEM-formatted certificates.",133,N],[11,"clone","","",133,[[["self"]],["x509"]]],[11,"as_ref","","",134,[[["self"]],["x509ref"]]],[11,"as_ptr","","",135,N],[11,"from_ptr","","",136,N],[11,"as_ptr","","",136,N],[11,"drop","","",136,[[["self"]]]],[11,"deref","","",136,[[["self"]],["x509extensionref"]]],[11,"deref_mut","","",136,[[["self"]],["x509extensionref"]]],[11,"borrow","","",136,[[["self"]],["x509extensionref"]]],[11,"as_ref","","",136,[[["self"]],["x509extensionref"]]],[11,"new","","Constructs an X509 extension value. See `man x509v3_config` for information on supported names and their value formats.",136,[[["option",["confref"]],["option",["x509v3context"]],["str"],["str"]],["result",["x509extension","errorstack"]]]],[11,"new_nid","","Constructs an X509 extension value. See `man x509v3_config` for information on supported extensions and their value formats.",136,[[["option",["confref"]],["option",["x509v3context"]],["nid"],["str"]],["result",["x509extension","errorstack"]]]],[11,"new","","",137,[[],["result",["x509namebuilder","errorstack"]]]],[11,"append_entry_by_text","","",137,[[["self"],["str"],["str"]],["result",["errorstack"]]]],[11,"append_entry_by_nid","","",137,[[["self"],["nid"],["str"]],["result",["errorstack"]]]],[11,"build","","",137,[[["self"]],["x509name"]]],[11,"from_ptr","","",138,N],[11,"as_ptr","","",138,N],[11,"drop","","",138,[[["self"]]]],[11,"deref","","",138,[[["self"]],["x509nameref"]]],[11,"deref_mut","","",138,[[["self"]],["x509nameref"]]],[11,"borrow","","",138,[[["self"]],["x509nameref"]]],[11,"as_ref","","",138,[[["self"]],["x509nameref"]]],[11,"builder","","Returns a new builder.",138,[[],["result",["x509namebuilder","errorstack"]]]],[11,"load_client_ca_file","","Loads subject names from a file containing PEM-formatted certificates.",138,[[["p"]],["result",["stack","errorstack"]]]],[11,"entries_by_nid","","",139,[[["self"],["nid"]],["x509nameentries"]]],[11,"next","","",140,[[["self"]],["option",["x509nameentryref"]]]],[11,"from_ptr","","",141,N],[11,"as_ptr","","",141,N],[11,"drop","","",141,[[["self"]]]],[11,"deref","","",141,[[["self"]],["x509nameentryref"]]],[11,"deref_mut","","",141,[[["self"]],["x509nameentryref"]]],[11,"borrow","","",141,[[["self"]],["x509nameentryref"]]],[11,"as_ref","","",141,[[["self"]],["x509nameentryref"]]],[11,"data","","",142,[[["self"]],["asn1stringref"]]],[11,"new","","",143,[[],["result",["x509reqbuilder","errorstack"]]]],[11,"set_version","","",143,[[["self"],["i32"]],["result",["errorstack"]]]],[11,"set_subject_name","","",143,[[["self"],["x509nameref"]],["result",["errorstack"]]]],[11,"set_pubkey","","",143,[[["self"],["pkeyref"]],["result",["errorstack"]]]],[11,"x509v3_context","","",143,[[["self"],["option",["confref"]]],["x509v3context"]]],[11,"add_extensions","","",143,[[["self"],["stackref"]],["result",["errorstack"]]]],[11,"sign","","",143,[[["self"],["pkeyref"],["messagedigest"]],["result",["errorstack"]]]],[11,"build","","",143,[[["self"]],["x509req"]]],[11,"from_ptr","","",144,N],[11,"as_ptr","","",144,N],[11,"drop","","",144,[[["self"]]]],[11,"deref","","",144,[[["self"]],["x509reqref"]]],[11,"deref_mut","","",144,[[["self"]],["x509reqref"]]],[11,"borrow","","",144,[[["self"]],["x509reqref"]]],[11,"as_ref","","",144,[[["self"]],["x509reqref"]]],[11,"builder","","",144,[[],["result",["x509reqbuilder","errorstack"]]]],[11,"from_pem","","Reads CSR from PEM",144,N],[11,"from_der","","Deserializes a value from DER-formatted data.",144,N],[11,"to_pem","","Serializes this value to PEM.",145,[[["self"]],["result",["vec","errorstack"]]]],[11,"to_der","","Serializes this value to DER.",145,[[["self"]],["result",["vec","errorstack"]]]],[11,"version","","",145,[[["self"]],["i32"]]],[11,"subject_name","","",145,[[["self"]],["x509nameref"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"description","","",146,[[["self"]],["str"]]],[11,"from_raw","","Creates an `X509VerifyError` from a raw error number.",146,[[["c_long"]],["option",["x509verifyerror"]]]],[11,"as_raw","","",146,[[["self"]],["c_long"]]],[11,"error_string","","",146,[[["self"]],["str"]]],[11,"from_ptr","","",147,N],[11,"as_ptr","","",147,N],[11,"drop","","",147,[[["self"]]]],[11,"deref","","",147,[[["self"]],["generalnameref"]]],[11,"deref_mut","","",147,[[["self"]],["generalnameref"]]],[11,"borrow","","",147,[[["self"]],["generalnameref"]]],[11,"as_ref","","",147,[[["self"]],["generalnameref"]]],[11,"dnsname","","Returns the contents of this `GeneralName` if it is a `dNSName`.",148,[[["self"]],["option",["str"]]]],[11,"ipaddress","","Returns the contents of this `GeneralName` if it is an `iPAddress`.",148,[[["self"]],["option"]]],[11,"from_ptr","","",149,N],[11,"as_ptr","","",149,N],[11,"drop","","",149,[[["self"]]]],[11,"deref","","",149,[[["self"]],["x509algorithmref"]]],[11,"deref_mut","","",149,[[["self"]],["x509algorithmref"]]],[11,"borrow","","",149,[[["self"]],["x509algorithmref"]]],[11,"as_ref","","",149,[[["self"]],["x509algorithmref"]]],[11,"object","","Returns the ASN.1 OID of this algorithm.",150,[[["self"]],["asn1objectref"]]]],"paths":[[3,"KeyError"],[3,"AesKey"],[3,"Asn1GeneralizedTime"],[3,"Asn1GeneralizedTimeRef"],[3,"Asn1Time"],[3,"Asn1TimeRef"],[3,"Asn1String"],[3,"Asn1StringRef"],[3,"Asn1Integer"],[3,"Asn1IntegerRef"],[3,"Asn1BitString"],[3,"Asn1BitStringRef"],[3,"Asn1Object"],[3,"Asn1ObjectRef"],[3,"BigNumContext"],[3,"BigNum"],[3,"BigNumRef"],[3,"CmsContentInfo"],[3,"CmsContentInfoRef"],[3,"ConfMethod"],[3,"Conf"],[3,"Dh"],[3,"DhRef"],[3,"Dsa"],[3,"DsaRef"],[3,"PointConversionForm"],[3,"Asn1Flag"],[3,"EcGroup"],[3,"EcGroupRef"],[3,"EcPoint"],[3,"EcPointRef"],[3,"EcKey"],[3,"EcKeyRef"],[3,"EcKeyBuilder"],[3,"EcKeyBuilderRef"],[3,"ErrorStack"],[3,"Error"],[3,"Index"],[3,"MessageDigest"],[3,"Hasher"],[3,"DigestBytes"],[3,"Nid"],[3,"Status"],[3,"Flag"],[3,"OcspResponseStatus"],[3,"OcspCertStatus"],[3,"OcspRevokedStatus"],[3,"OcspBasicResponse"],[3,"OcspBasicResponseRef"],[3,"OcspCertId"],[3,"OcspResponse"],[3,"OcspResponseRef"],[3,"OcspRequest"],[3,"OcspRequestRef"],[3,"OcspOneReq"],[3,"ParsedPkcs12"],[3,"Pkcs12"],[3,"Pkcs12Ref"],[3,"Pkcs12Builder"],[3,"KeyIvPair"],[3,"PKey"],[3,"PKeyRef"],[3,"PKeyCtx"],[3,"PKeyCtxRef"],[3,"Padding"],[3,"Rsa"],[3,"RsaRef"],[3,"Signer"],[3,"Verifier"],[3,"Sha1"],[3,"Sha224"],[3,"Sha256"],[3,"Sha384"],[3,"Sha512"],[3,"CipherBits"],[4,"Error"],[4,"HandshakeError"],[4,"SniError"],[4,"ShutdownResult"],[3,"RetryError"],[3,"SslConnectorBuilder"],[3,"SslConnector"],[3,"ConnectConfiguration"],[3,"SslAcceptorBuilder"],[3,"SslAcceptor"],[3,"SslOption"],[3,"SslMode"],[3,"SslMethod"],[3,"SslVerifyMode"],[3,"StatusType"],[3,"SslContextBuilder"],[3,"SslContext"],[3,"SslContextRef"],[3,"SslCipher"],[3,"SslCipherRef"],[3,"SslSession"],[3,"SslSessionRef"],[3,"Ssl"],[3,"SslRef"],[3,"MidHandshakeSslStream"],[3,"SslStream"],[8,"Stackable"],[3,"Stack"],[3,"IntoIter"],[3,"StackRef"],[3,"Iter"],[3,"IterMut"],[3,"OpensslString"],[3,"OpensslStringRef"],[4,"Mode"],[3,"Cipher"],[3,"Crypter"],[8,"OpenSslType"],[8,"OpenSslTypeRef"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"BasicConstraints"],[3,"KeyUsage"],[3,"ExtendedKeyUsage"],[3,"SubjectKeyIdentifier"],[3,"AuthorityKeyIdentifier"],[3,"SubjectAlternativeName"],[3,"X509StoreBuilder"],[3,"X509StoreBuilderRef"],[3,"X509Store"],[3,"X509FileType"],[3,"X509StoreContext"],[3,"X509StoreContextRef"],[3,"X509Generator"],[3,"X509Builder"],[3,"X509"],[3,"X509Ref"],[3,"X509v3Context"],[3,"X509Extension"],[3,"X509NameBuilder"],[3,"X509Name"],[3,"X509NameRef"],[3,"X509NameEntries"],[3,"X509NameEntry"],[3,"X509NameEntryRef"],[3,"X509ReqBuilder"],[3,"X509Req"],[3,"X509ReqRef"],[3,"X509VerifyError"],[3,"GeneralName"],[3,"GeneralNameRef"],[3,"X509Algorithm"],[3,"X509AlgorithmRef"]]};
searchIndex["openssl_sys"]={"doc":"","items":[[3,"stack_st_ASN1_OBJECT","openssl_sys","",N,N],[12,"stack","","",0,N],[3,"stack_st_X509","","",N,N],[12,"stack","","",1,N],[3,"stack_st_X509_NAME","","",N,N],[12,"stack","","",2,N],[3,"stack_st_X509_ATTRIBUTE","","",N,N],[12,"stack","","",3,N],[3,"stack_st_X509_EXTENSION","","",N,N],[12,"stack","","",4,N],[3,"stack_st_GENERAL_NAME","","",N,N],[12,"stack","","",5,N],[3,"stack_st_void","","",N,N],[12,"stack","","",6,N],[3,"stack_st_SSL_CIPHER","","",N,N],[12,"stack","","",7,N],[3,"stack_st_OPENSSL_STRING","","",N,N],[12,"stack","","",8,N],[3,"_STACK","","",N,N],[12,"num","","",9,N],[12,"data","","",9,N],[12,"sorted","","",9,N],[12,"num_alloc","","",9,N],[12,"comp","","",9,N],[3,"BIO_METHOD","","",N,N],[12,"type_","","",10,N],[12,"name","","",10,N],[12,"bwrite","","",10,N],[12,"bread","","",10,N],[12,"bputs","","",10,N],[12,"bgets","","",10,N],[12,"ctrl","","",10,N],[12,"create","","",10,N],[12,"destroy","","",10,N],[12,"callback_ctrl","","",10,N],[3,"RSA","","",N,N],[12,"pad","","",11,N],[12,"version","","",11,N],[12,"meth","","",11,N],[12,"engine","","",11,N],[12,"n","","",11,N],[12,"e","","",11,N],[12,"d","","",11,N],[12,"p","","",11,N],[12,"q","","",11,N],[12,"dmp1","","",11,N],[12,"dmq1","","",11,N],[12,"iqmp","","",11,N],[12,"ex_data","","",11,N],[12,"references","","",11,N],[12,"flags","","",11,N],[12,"_method_mod_n","","",11,N],[12,"_method_mod_p","","",11,N],[12,"_method_mod_q","","",11,N],[12,"bignum_data","","",11,N],[12,"blinding","","",11,N],[12,"mt_blinding","","",11,N],[3,"DSA","","",N,N],[12,"pad","","",12,N],[12,"version","","",12,N],[12,"write_params","","",12,N],[12,"p","","",12,N],[12,"q","","",12,N],[12,"g","","",12,N],[12,"pub_key","","",12,N],[12,"priv_key","","",12,N],[12,"kinv","","",12,N],[12,"r","","",12,N],[12,"flags","","",12,N],[12,"method_mont_p","","",12,N],[12,"references","","",12,N],[12,"ex_data","","",12,N],[12,"meth","","",12,N],[12,"engine","","",12,N],[3,"ECDSA_SIG","","",N,N],[12,"r","","",13,N],[12,"s","","",13,N],[3,"EVP_PKEY","","",N,N],[12,"type_","","",14,N],[12,"save_type","","",14,N],[12,"references","","",14,N],[12,"ameth","","",14,N],[12,"engine","","",14,N],[12,"pkey","","",14,N],[12,"save_parameters","","",14,N],[12,"attributes","","",14,N],[3,"BIO","","",N,N],[12,"method","","",15,N],[12,"callback","","",15,N],[12,"cb_arg","","",15,N],[12,"init","","",15,N],[12,"shutdown","","",15,N],[12,"flags","","",15,N],[12,"retry_reason","","",15,N],[12,"num","","",15,N],[12,"ptr","","",15,N],[12,"next_bio","","",15,N],[12,"prev_bio","","",15,N],[12,"references","","",15,N],[12,"num_read","","",15,N],[12,"num_write","","",15,N],[12,"ex_data","","",15,N],[3,"CRYPTO_EX_DATA","","",N,N],[12,"sk","","",16,N],[12,"dummy","","",16,N],[3,"EVP_MD_CTX","","",N,N],[3,"EVP_CIPHER","","",N,N],[12,"nid","","",17,N],[12,"block_size","","",17,N],[12,"key_len","","",17,N],[12,"iv_len","","",17,N],[12,"flags","","",17,N],[12,"init","","",17,N],[12,"do_cipher","","",17,N],[12,"cleanup","","",17,N],[12,"ctx_size","","",17,N],[12,"set_asn1_parameters","","",17,N],[12,"get_asn1_parameters","","",17,N],[12,"ctrl","","",17,N],[12,"app_data","","",17,N],[3,"HMAC_CTX","","",N,N],[3,"BIGNUM","","",N,N],[12,"d","","",18,N],[12,"top","","",18,N],[12,"dmax","","",18,N],[12,"neg","","",18,N],[12,"flags","","",18,N],[3,"DH","","",N,N],[12,"pad","","",19,N],[12,"version","","",19,N],[12,"p","","",19,N],[12,"g","","",19,N],[12,"length","","",19,N],[12,"pub_key","","",19,N],[12,"priv_key","","",19,N],[12,"flags","","",19,N],[12,"method_mont_p","","",19,N],[12,"q","","",19,N],[12,"j","","",19,N],[12,"seed","","",19,N],[12,"seedlen","","",19,N],[12,"counter","","",19,N],[12,"references","","",19,N],[12,"ex_data","","",19,N],[12,"meth","","",19,N],[12,"engine","","",19,N],[3,"X509","","",N,N],[12,"cert_info","","",20,N],[12,"sig_alg","","",20,N],[12,"signature","","",20,N],[12,"valid","","",20,N],[12,"references","","",20,N],[12,"name","","",20,N],[12,"ex_data","","",20,N],[12,"ex_pathlen","","",20,N],[12,"ex_pcpathlen","","",20,N],[12,"ex_flags","","",20,N],[12,"ex_kusage","","",20,N],[12,"ex_xkusage","","",20,N],[12,"ex_nscert","","",20,N],[3,"X509_CINF","","",N,N],[12,"validity","","",21,N],[12,"extensions","","",21,N],[3,"X509_ALGOR","","",N,N],[12,"algorithm","","",22,N],[3,"ASN1_ENCODING","","",N,N],[12,"enc","","",23,N],[12,"len","","",23,N],[12,"modified","","",23,N],[3,"X509_VAL","","",N,N],[12,"notBefore","","",24,N],[12,"notAfter","","",24,N],[3,"X509_REQ_INFO","","",N,N],[12,"enc","","",25,N],[12,"version","","",25,N],[12,"subject","","",25,N],[12,"attributes","","",25,N],[3,"X509_REQ","","",N,N],[12,"req_info","","",26,N],[3,"SSL","","",N,N],[12,"server","","",27,N],[3,"SSL_CTX","","",N,N],[12,"references","","",28,N],[3,"SSL_SESSION","","",N,N],[12,"master_key_length","","",29,N],[12,"master_key","","",29,N],[12,"references","","",29,N],[3,"SRP_CTX","","",N,N],[3,"AES_KEY","","",N,N],[3,"GENERAL_NAME","","",N,N],[12,"type_","","",30,N],[12,"d","","",30,N],[3,"X509V3_CTX","","",N,N],[3,"SHA_CTX","","",N,N],[12,"h0","","",31,N],[12,"h1","","",31,N],[12,"h2","","",31,N],[12,"h3","","",31,N],[12,"h4","","",31,N],[12,"Nl","","",31,N],[12,"Nh","","",31,N],[12,"data","","",31,N],[12,"num","","",31,N],[3,"SHA256_CTX","","",N,N],[12,"h","","",32,N],[12,"Nl","","",32,N],[12,"Nh","","",32,N],[12,"data","","",32,N],[12,"num","","",32,N],[12,"md_len","","",32,N],[3,"SHA512_CTX","","",N,N],[12,"h","","",33,N],[12,"Nl","","",33,N],[12,"Nh","","",33,N],[12,"num","","",33,N],[12,"md_len","","",33,N],[4,"PKCS12","","",N,N],[4,"ASN1_INTEGER","","",N,N],[4,"ASN1_GENERALIZEDTIME","","",N,N],[4,"ASN1_STRING","","",N,N],[4,"ASN1_BIT_STRING","","",N,N],[4,"ASN1_TIME","","",N,N],[4,"ASN1_TYPE","","",N,N],[4,"ASN1_OBJECT","","",N,N],[4,"BN_CTX","","",N,N],[4,"BN_GENCB","","",N,N],[4,"CMS_ContentInfo","","",N,N],[4,"CONF","","",N,N],[4,"CONF_METHOD","","",N,N],[4,"COMP_METHOD","","",N,N],[4,"EC_KEY","","",N,N],[4,"EC_GROUP","","",N,N],[4,"EC_METHOD","","",N,N],[4,"EC_POINT","","",N,N],[4,"ENGINE","","",N,N],[4,"EVP_CIPHER_CTX","","",N,N],[4,"EVP_MD","","",N,N],[4,"EVP_PKEY_CTX","","",N,N],[4,"OCSP_BASICRESP","","",N,N],[4,"OCSP_CERTID","","",N,N],[4,"OCSP_RESPONSE","","",N,N],[4,"OCSP_REQUEST","","",N,N],[4,"OCSP_ONEREQ","","",N,N],[4,"SSL_CIPHER","","",N,N],[4,"SSL_METHOD","","",N,N],[4,"X509_CRL","","",N,N],[4,"X509_EXTENSION","","",N,N],[4,"X509_NAME","","",N,N],[4,"X509_NAME_ENTRY","","",N,N],[4,"X509_STORE","","",N,N],[4,"X509_STORE_CTX","","",N,N],[4,"bio_st","","",N,N],[4,"DH_METHOD","","",N,N],[4,"RSA_METHOD","","",N,N],[4,"BN_MONT_CTX","","",N,N],[4,"BN_BLINDING","","",N,N],[4,"DSA_METHOD","","",N,N],[4,"EVP_PKEY_ASN1_METHOD","","",N,N],[4,"point_conversion_form_t","","",N,N],[13,"POINT_CONVERSION_COMPRESSED","","",34,N],[13,"POINT_CONVERSION_UNCOMPRESSED","","",34,N],[13,"POINT_CONVERSION_HYBRID","","",34,N],[5,"init","","",N,[[]]],[5,"SSL_session_reused","","",N,N],[5,"SSL_CTX_get_options","","",N,N],[5,"SSL_CTX_set_options","","",N,N],[5,"SSL_CTX_clear_options","","",N,N],[5,"BIO_get_mem_data","","",N,N],[5,"BIO_clear_retry_flags","","",N,N],[5,"BIO_set_retry_read","","",N,N],[5,"BIO_set_retry_write","","",N,N],[5,"EVP_get_digestbynid","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_padding","","",N,N],[5,"EVP_PKEY_CTX_get_rsa_padding","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_pss_saltlen","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_mgf1_md","","",N,N],[5,"SSL_CTX_set_mode","","",N,N],[5,"SSL_CTX_set_read_ahead","","",N,N],[5,"SSL_CTX_set_tmp_dh","","",N,N],[5,"SSL_CTX_set_tmp_ecdh","","",N,N],[5,"SSL_set_tmp_dh","","",N,N],[5,"SSL_set_tmp_ecdh","","",N,N],[5,"SSL_CTX_add_extra_chain_cert","","",N,N],[5,"SSL_CTX_set_tlsext_servername_callback","","",N,N],[5,"SSL_set_tlsext_host_name","","",N,N],[5,"SSL_set_tlsext_status_type","","",N,N],[5,"SSL_CTX_set_tlsext_status_cb","","",N,N],[5,"SSL_CTX_set_tlsext_status_arg","","",N,N],[5,"SSL_CTX_get_extra_chain_certs","","",N,N],[5,"SSL_CTX_set_session_cache_mode","","",N,N],[5,"SSL_get_tlsext_status_ocsp_resp","","",N,N],[5,"SSL_set_tlsext_status_ocsp_resp","","",N,N],[5,"ERR_GET_LIB","","",N,[[["c_ulong"]],["c_int"]]],[5,"ERR_GET_FUNC","","",N,[[["c_ulong"]],["c_int"]]],[5,"ERR_GET_REASON","","",N,[[["c_ulong"]],["c_int"]]],[5,"BIO_new","","",N,N],[5,"BIO_s_file","","",N,N],[5,"BIO_s_mem","","",N,N],[5,"get_rfc2409_prime_768","","",N,N],[5,"get_rfc2409_prime_1024","","",N,N],[5,"get_rfc3526_prime_1536","","",N,N],[5,"get_rfc3526_prime_2048","","",N,N],[5,"get_rfc3526_prime_3072","","",N,N],[5,"get_rfc3526_prime_4096","","",N,N],[5,"get_rfc3526_prime_6144","","",N,N],[5,"get_rfc3526_prime_8192","","",N,N],[5,"CRYPTO_malloc","","",N,N],[5,"CRYPTO_free","","",N,N],[5,"CRYPTO_num_locks","","",N,N],[5,"CRYPTO_set_locking_callback","","",N,N],[5,"CRYPTO_set_id_callback","","",N,N],[5,"ERR_load_crypto_strings","","",N,N],[5,"RSA_generate_key","","",N,N],[5,"OCSP_cert_to_id","","",N,N],[5,"PKCS12_create","","",N,N],[5,"SSL_library_init","","",N,N],[5,"SSL_load_error_strings","","",N,N],[5,"OPENSSL_add_all_algorithms_noconf","","",N,N],[5,"HMAC_CTX_init","","",N,N],[5,"HMAC_CTX_cleanup","","",N,N],[5,"SSLv3_method","","",N,N],[5,"TLSv1_method","","",N,N],[5,"SSLv23_method","","",N,N],[5,"TLSv1_1_method","","",N,N],[5,"TLSv1_2_method","","",N,N],[5,"DTLSv1_method","","",N,N],[5,"SSL_get_ex_new_index","","",N,N],[5,"SSL_set_tmp_ecdh_callback","","",N,N],[5,"SSL_CIPHER_get_version","","",N,N],[5,"SSL_CTX_get_ex_new_index","","",N,N],[5,"SSL_CTX_set_tmp_ecdh_callback","","",N,N],[5,"SSL_CTX_sess_set_get_cb","","",N,N],[5,"X509_get_subject_name","","",N,N],[5,"X509_get_issuer_name","","",N,N],[5,"X509_set_notAfter","","",N,N],[5,"X509_set_notBefore","","",N,N],[5,"X509_get_ext_d2i","","",N,N],[5,"X509_NAME_add_entry_by_NID","","",N,N],[5,"X509_NAME_get_entry","","",N,N],[5,"X509_NAME_ENTRY_get_data","","",N,N],[5,"X509_STORE_CTX_get_chain","","",N,N],[5,"X509V3_EXT_nconf_nid","","",N,N],[5,"X509V3_EXT_nconf","","",N,N],[5,"ASN1_STRING_to_UTF8","","",N,N],[5,"ASN1_STRING_data","","",N,N],[5,"CRYPTO_add_lock","","",N,N],[5,"EVP_MD_CTX_create","","",N,N],[5,"EVP_MD_CTX_destroy","","",N,N],[5,"EVP_PKEY_bits","","",N,N],[5,"sk_new_null","","",N,N],[5,"sk_num","","",N,N],[5,"sk_value","","",N,N],[5,"sk_free","","",N,N],[5,"sk_push","","",N,N],[5,"sk_pop_free","","",N,N],[5,"sk_pop","","",N,N],[5,"SSLeay","","",N,N],[5,"SSLeay_version","","",N,N],[5,"CMS_decrypt","","",N,N],[5,"SMIME_read_CMS","","",N,N],[5,"CMS_ContentInfo_free","","",N,N],[5,"CMS_sign","","",N,N],[5,"i2d_CMS_ContentInfo","","",N,N],[5,"FIPS_mode_set","","",N,N],[5,"FIPS_mode","","",N,N],[5,"AES_set_encrypt_key","","",N,N],[5,"AES_set_decrypt_key","","",N,N],[5,"AES_ige_encrypt","","",N,N],[5,"ASN1_INTEGER_get","","",N,N],[5,"ASN1_INTEGER_set","","",N,N],[5,"ASN1_INTEGER_to_BN","","",N,N],[5,"ASN1_GENERALIZEDTIME_free","","",N,N],[5,"ASN1_GENERALIZEDTIME_print","","",N,N],[5,"ASN1_STRING_type_new","","",N,N],[5,"ASN1_TIME_free","","",N,N],[5,"ASN1_TIME_print","","",N,N],[5,"ASN1_BIT_STRING_free","","",N,N],[5,"ASN1_OBJECT_free","","",N,N],[5,"BIO_ctrl","","",N,N],[5,"BIO_free_all","","",N,N],[5,"BIO_new_fp","","",N,N],[5,"BIO_new_socket","","",N,N],[5,"BIO_read","","",N,N],[5,"BIO_write","","",N,N],[5,"BIO_new_mem_buf","","",N,N],[5,"BIO_set_flags","","",N,N],[5,"BIO_clear_flags","","",N,N],[5,"BN_CTX_new","","",N,N],[5,"BN_CTX_free","","",N,N],[5,"BN_new","","",N,N],[5,"BN_dup","","",N,N],[5,"BN_clear","","",N,N],[5,"BN_free","","",N,N],[5,"BN_clear_free","","",N,N],[5,"BN_num_bits","","",N,N],[5,"BN_set_negative","","",N,N],[5,"BN_set_word","","",N,N],[5,"BN_add","","",N,N],[5,"BN_div","","",N,N],[5,"BN_exp","","",N,N],[5,"BN_gcd","","",N,N],[5,"BN_mod_add","","",N,N],[5,"BN_mod_exp","","",N,N],[5,"BN_mod_inverse","","",N,N],[5,"BN_mod_mul","","",N,N],[5,"BN_mod_sqr","","",N,N],[5,"BN_mod_sub","","",N,N],[5,"BN_mul","","",N,N],[5,"BN_nnmod","","",N,N],[5,"BN_add_word","","",N,N],[5,"BN_sub_word","","",N,N],[5,"BN_mul_word","","",N,N],[5,"BN_div_word","","",N,N],[5,"BN_mod_word","","",N,N],[5,"BN_sqr","","",N,N],[5,"BN_sub","","",N,N],[5,"BN_clear_bit","","",N,N],[5,"BN_is_bit_set","","",N,N],[5,"BN_lshift","","",N,N],[5,"BN_lshift1","","",N,N],[5,"BN_mask_bits","","",N,N],[5,"BN_rshift","","",N,N],[5,"BN_set_bit","","",N,N],[5,"BN_rshift1","","",N,N],[5,"BN_cmp","","",N,N],[5,"BN_ucmp","","",N,N],[5,"BN_generate_prime_ex","","",N,N],[5,"BN_is_prime_ex","","",N,N],[5,"BN_is_prime_fasttest_ex","","",N,N],[5,"BN_rand","","",N,N],[5,"BN_pseudo_rand","","",N,N],[5,"BN_rand_range","","",N,N],[5,"BN_pseudo_rand_range","","",N,N],[5,"BN_bin2bn","","",N,N],[5,"BN_bn2bin","","",N,N],[5,"BN_dec2bn","","",N,N],[5,"BN_bn2dec","","",N,N],[5,"BN_hex2bn","","",N,N],[5,"BN_bn2hex","","",N,N],[5,"BN_to_ASN1_INTEGER","","",N,N],[5,"NCONF_default","","",N,N],[5,"NCONF_new","","",N,N],[5,"NCONF_free","","",N,N],[5,"CRYPTO_memcmp","","",N,N],[5,"DH_new","","",N,N],[5,"DH_free","","",N,N],[5,"EC_KEY_new","","",N,N],[5,"EC_KEY_new_by_curve_name","","",N,N],[5,"EC_KEY_dup","","",N,N],[5,"EC_KEY_up_ref","","",N,N],[5,"EC_KEY_set_group","","",N,N],[5,"EC_KEY_get0_group","","",N,N],[5,"EC_KEY_set_public_key","","",N,N],[5,"EC_KEY_get0_public_key","","",N,N],[5,"EC_KEY_set_private_key","","",N,N],[5,"EC_KEY_get0_private_key","","",N,N],[5,"EC_KEY_generate_key","","",N,N],[5,"EC_KEY_check_key","","",N,N],[5,"EC_KEY_free","","",N,N],[5,"EC_KEY_set_public_key_affine_coordinates","","",N,N],[5,"EC_GF2m_simple_method","","",N,N],[5,"EC_GROUP_new","","",N,N],[5,"EC_GROUP_new_curve_GFp","","",N,N],[5,"EC_GROUP_new_curve_GF2m","","",N,N],[5,"EC_GROUP_new_by_curve_name","","",N,N],[5,"EC_GROUP_get_curve_GFp","","",N,N],[5,"EC_GROUP_get_curve_GF2m","","",N,N],[5,"EC_GROUP_get_degree","","",N,N],[5,"EC_GROUP_get_order","","",N,N],[5,"EC_GROUP_set_asn1_flag","","",N,N],[5,"EC_GROUP_free","","",N,N],[5,"EC_POINT_new","","",N,N],[5,"EC_POINT_add","","",N,N],[5,"EC_POINT_mul","","",N,N],[5,"EC_POINT_invert","","",N,N],[5,"EC_POINT_point2oct","","",N,N],[5,"EC_POINT_oct2point","","",N,N],[5,"EC_POINT_cmp","","",N,N],[5,"EC_POINT_free","","",N,N],[5,"EC_POINT_get_affine_coordinates_GFp","","",N,N],[5,"EC_POINT_get_affine_coordinates_GF2m","","",N,N],[5,"ECDSA_SIG_new","","",N,N],[5,"ECDSA_SIG_free","","",N,N],[5,"ECDSA_do_verify","","",N,N],[5,"ECDSA_do_sign","","",N,N],[5,"ERR_peek_last_error","","",N,N],[5,"ERR_get_error","","",N,N],[5,"ERR_get_error_line_data","","",N,N],[5,"ERR_lib_error_string","","",N,N],[5,"ERR_func_error_string","","",N,N],[5,"ERR_reason_error_string","","",N,N],[5,"ERR_clear_error","","",N,N],[5,"ERR_put_error","","",N,N],[5,"ERR_set_error_data","","",N,N],[5,"EVP_md5","","",N,N],[5,"EVP_ripemd160","","",N,N],[5,"EVP_sha1","","",N,N],[5,"EVP_sha224","","",N,N],[5,"EVP_sha256","","",N,N],[5,"EVP_sha384","","",N,N],[5,"EVP_sha512","","",N,N],[5,"EVP_aes_128_cbc","","",N,N],[5,"EVP_aes_128_ecb","","",N,N],[5,"EVP_aes_128_xts","","",N,N],[5,"EVP_aes_128_ctr","","",N,N],[5,"EVP_aes_128_gcm","","",N,N],[5,"EVP_aes_128_ccm","","",N,N],[5,"EVP_aes_128_cfb1","","",N,N],[5,"EVP_aes_128_cfb128","","",N,N],[5,"EVP_aes_128_cfb8","","",N,N],[5,"EVP_aes_256_cbc","","",N,N],[5,"EVP_aes_256_ecb","","",N,N],[5,"EVP_aes_256_xts","","",N,N],[5,"EVP_aes_256_ctr","","",N,N],[5,"EVP_aes_256_gcm","","",N,N],[5,"EVP_aes_256_ccm","","",N,N],[5,"EVP_aes_256_cfb1","","",N,N],[5,"EVP_aes_256_cfb128","","",N,N],[5,"EVP_aes_256_cfb8","","",N,N],[5,"EVP_bf_cbc","","",N,N],[5,"EVP_bf_ecb","","",N,N],[5,"EVP_bf_cfb64","","",N,N],[5,"EVP_bf_ofb","","",N,N],[5,"EVP_rc4","","",N,N],[5,"EVP_des_cbc","","",N,N],[5,"EVP_des_ecb","","",N,N],[5,"EVP_des_ede3","","",N,N],[5,"EVP_des_ede3_cbc","","",N,N],[5,"EVP_BytesToKey","","",N,N],[5,"EVP_CIPHER_CTX_new","","",N,N],[5,"EVP_CIPHER_CTX_set_padding","","",N,N],[5,"EVP_CIPHER_CTX_set_key_length","","",N,N],[5,"EVP_CIPHER_CTX_ctrl","","",N,N],[5,"EVP_CIPHER_CTX_free","","",N,N],[5,"EVP_CipherInit","","",N,N],[5,"EVP_CipherInit_ex","","",N,N],[5,"EVP_CipherUpdate","","",N,N],[5,"EVP_CipherFinal","","",N,N],[5,"EVP_DigestInit","","",N,N],[5,"EVP_DigestInit_ex","","",N,N],[5,"EVP_DigestUpdate","","",N,N],[5,"EVP_DigestFinal","","",N,N],[5,"EVP_DigestFinal_ex","","",N,N],[5,"EVP_DigestSignInit","","",N,N],[5,"EVP_DigestSignFinal","","",N,N],[5,"EVP_DigestVerifyInit","","",N,N],[5,"EVP_DigestVerifyFinal","","",N,N],[5,"EVP_MD_CTX_copy_ex","","",N,N],[5,"EVP_PKEY_new","","",N,N],[5,"EVP_PKEY_free","","",N,N],[5,"EVP_PKEY_assign","","",N,N],[5,"EVP_PKEY_copy_parameters","","",N,N],[5,"EVP_PKEY_get1_RSA","","",N,N],[5,"EVP_PKEY_set1_RSA","","",N,N],[5,"EVP_PKEY_get1_DSA","","",N,N],[5,"EVP_PKEY_get1_DH","","",N,N],[5,"EVP_PKEY_get1_EC_KEY","","",N,N],[5,"EVP_PKEY_cmp","","",N,N],[5,"EVP_PKEY_id","","",N,N],[5,"EVP_PKEY_new_mac_key","","",N,N],[5,"EVP_PKEY_derive_init","","",N,N],[5,"EVP_PKEY_derive_set_peer","","",N,N],[5,"EVP_PKEY_derive","","",N,N],[5,"d2i_PKCS8PrivateKey_bio","","",N,N],[5,"EVP_PKEY_CTX_new","","",N,N],[5,"EVP_PKEY_CTX_new_id","","",N,N],[5,"EVP_PKEY_CTX_free","","",N,N],[5,"EVP_PKEY_CTX_ctrl","","",N,N],[5,"EVP_PKEY_keygen_init","","",N,N],[5,"EVP_PKEY_keygen","","",N,N],[5,"HMAC_CTX_copy","","",N,N],[5,"OBJ_obj2nid","","",N,N],[5,"OBJ_obj2txt","","",N,N],[5,"OBJ_nid2ln","","",N,N],[5,"OBJ_nid2sn","","",N,N],[5,"OBJ_find_sigid_algs","","",N,N],[5,"OCSP_BASICRESP_new","","",N,N],[5,"OCSP_BASICRESP_free","","",N,N],[5,"OCSP_basic_verify","","",N,N],[5,"OCSP_resp_find_status","","",N,N],[5,"OCSP_check_validity","","",N,N],[5,"OCSP_CERTID_free","","",N,N],[5,"OCSP_RESPONSE_new","","",N,N],[5,"OCSP_RESPONSE_free","","",N,N],[5,"i2d_OCSP_RESPONSE","","",N,N],[5,"d2i_OCSP_RESPONSE","","",N,N],[5,"OCSP_response_create","","",N,N],[5,"OCSP_response_status","","",N,N],[5,"OCSP_response_get1_basic","","",N,N],[5,"OCSP_REQUEST_new","","",N,N],[5,"OCSP_REQUEST_free","","",N,N],[5,"i2d_OCSP_REQUEST","","",N,N],[5,"d2i_OCSP_REQUEST","","",N,N],[5,"OCSP_request_add0_id","","",N,N],[5,"OCSP_ONEREQ_free","","",N,N],[5,"PEM_read_bio_DHparams","","",N,N],[5,"PEM_read_bio_X509","","",N,N],[5,"PEM_read_bio_X509_REQ","","",N,N],[5,"PEM_read_bio_PrivateKey","","",N,N],[5,"PEM_read_bio_PUBKEY","","",N,N],[5,"PEM_read_bio_RSAPrivateKey","","",N,N],[5,"PEM_read_bio_RSAPublicKey","","",N,N],[5,"PEM_read_bio_RSA_PUBKEY","","",N,N],[5,"PEM_write_bio_DHparams","","",N,N],[5,"PEM_write_bio_PrivateKey","","",N,N],[5,"PEM_write_bio_PKCS8PrivateKey","","",N,N],[5,"PEM_write_bio_PUBKEY","","",N,N],[5,"PEM_write_bio_RSAPrivateKey","","",N,N],[5,"PEM_write_bio_RSAPublicKey","","",N,N],[5,"PEM_write_bio_RSA_PUBKEY","","",N,N],[5,"PEM_read_bio_DSAPrivateKey","","",N,N],[5,"PEM_read_bio_DSA_PUBKEY","","",N,N],[5,"PEM_write_bio_DSAPrivateKey","","",N,N],[5,"PEM_write_bio_DSA_PUBKEY","","",N,N],[5,"PEM_write_bio_X509","","",N,N],[5,"PEM_write_bio_X509_REQ","","",N,N],[5,"PEM_write_bio_ECPrivateKey","","",N,N],[5,"PEM_read_bio_ECPrivateKey","","",N,N],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",N,N],[5,"PKCS5_PBKDF2_HMAC","","",N,N],[5,"RAND_bytes","","",N,N],[5,"RAND_status","","",N,N],[5,"RSA_new","","",N,N],[5,"RSA_free","","",N,N],[5,"RSA_up_ref","","",N,N],[5,"RSA_generate_key_ex","","",N,N],[5,"RSA_private_decrypt","","",N,N],[5,"RSA_public_decrypt","","",N,N],[5,"RSA_private_encrypt","","",N,N],[5,"RSA_public_encrypt","","",N,N],[5,"RSA_sign","","",N,N],[5,"RSA_size","","",N,N],[5,"RSA_verify","","",N,N],[5,"RSA_padding_check_PKCS1_type_2","","",N,N],[5,"DSA_new","","",N,N],[5,"DSA_free","","",N,N],[5,"DSA_size","","",N,N],[5,"DSA_generate_parameters_ex","","",N,N],[5,"DSA_generate_key","","",N,N],[5,"DSA_sign","","",N,N],[5,"DSA_verify","","",N,N],[5,"SHA1","","",N,N],[5,"SHA224","","",N,N],[5,"SHA256","","",N,N],[5,"SHA384","","",N,N],[5,"SHA512","","",N,N],[5,"SHA1_Init","","",N,N],[5,"SHA1_Update","","",N,N],[5,"SHA1_Final","","",N,N],[5,"SHA256_Init","","",N,N],[5,"SHA256_Update","","",N,N],[5,"SHA256_Final","","",N,N],[5,"SHA224_Init","","",N,N],[5,"SHA224_Update","","",N,N],[5,"SHA224_Final","","",N,N],[5,"SHA384_Init","","",N,N],[5,"SHA384_Update","","",N,N],[5,"SHA384_Final","","",N,N],[5,"SHA512_Init","","",N,N],[5,"SHA512_Update","","",N,N],[5,"SHA512_Final","","",N,N],[5,"SSL_new","","",N,N],[5,"SSL_pending","","",N,N],[5,"SSL_free","","",N,N],[5,"SSL_set_bio","","",N,N],[5,"SSL_get_rbio","","",N,N],[5,"SSL_get_wbio","","",N,N],[5,"SSL_accept","","",N,N],[5,"SSL_connect","","",N,N],[5,"SSL_do_handshake","","",N,N],[5,"SSL_ctrl","","",N,N],[5,"SSL_get_error","","",N,N],[5,"SSL_read","","",N,N],[5,"SSL_write","","",N,N],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",N,N],[5,"SSL_get_SSL_CTX","","",N,N],[5,"SSL_set_SSL_CTX","","",N,N],[5,"SSL_get_current_compression","","",N,N],[5,"SSL_get_peer_certificate","","",N,N],[5,"SSL_get_peer_cert_chain","","",N,N],[5,"SSL_get_ssl_method","","",N,N],[5,"SSL_get_version","","",N,N],[5,"SSL_version","","",N,N],[5,"SSL_state_string","","",N,N],[5,"SSL_state_string_long","","",N,N],[5,"SSL_set_verify","","",N,N],[5,"SSL_set_ex_data","","",N,N],[5,"SSL_get_ex_data","","",N,N],[5,"SSL_get_servername","","",N,N],[5,"SSL_get_current_cipher","","",N,N],[5,"SSL_get_verify_result","","",N,N],[5,"SSL_shutdown","","",N,N],[5,"SSL_get_certificate","","",N,N],[5,"SSL_get_privatekey","","",N,N],[5,"SSL_load_client_CA_file","","",N,N],[5,"SSL_set_tmp_dh_callback","","",N,N],[5,"SSL_export_keying_material","","",N,N],[5,"SSL_COMP_get_name","","",N,N],[5,"SSL_CIPHER_get_name","","",N,N],[5,"SSL_CIPHER_get_bits","","",N,N],[5,"SSL_CIPHER_description","","",N,N],[5,"SSL_CTX_new","","",N,N],[5,"SSL_CTX_free","","",N,N],[5,"SSL_CTX_ctrl","","",N,N],[5,"SSL_CTX_callback_ctrl","","",N,N],[5,"SSL_CTX_set_verify","","",N,N],[5,"SSL_CTX_set_verify_depth","","",N,N],[5,"SSL_CTX_load_verify_locations","","",N,N],[5,"SSL_CTX_set_default_verify_paths","","",N,N],[5,"SSL_CTX_set_ex_data","","",N,N],[5,"SSL_CTX_get_ex_data","","",N,N],[5,"SSL_CTX_set_session_id_context","","",N,N],[5,"SSL_CTX_use_certificate_file","","",N,N],[5,"SSL_CTX_use_certificate_chain_file","","",N,N],[5,"SSL_CTX_use_certificate","","",N,N],[5,"SSL_CTX_use_PrivateKey_file","","",N,N],[5,"SSL_CTX_use_PrivateKey","","",N,N],[5,"SSL_CTX_check_private_key","","",N,N],[5,"SSL_CTX_set_client_CA_list","","",N,N],[5,"SSL_CTX_get_cert_store","","",N,N],[5,"SSL_CTX_set_tmp_dh_callback","","",N,N],[5,"SSL_CTX_sess_set_new_cb","","",N,N],[5,"SSL_CTX_sess_set_remove_cb","","",N,N],[5,"SSL_CTX_set_cipher_list","","",N,N],[5,"SSL_CTX_set_next_protos_advertised_cb","","",N,N],[5,"SSL_CTX_set_next_proto_select_cb","","",N,N],[5,"SSL_CTX_set_psk_client_callback","","",N,N],[5,"SSL_select_next_proto","","",N,N],[5,"SSL_get0_next_proto_negotiated","","",N,N],[5,"SSL_get_session","","",N,N],[5,"SSL_set_session","","",N,N],[5,"SSL_get_finished","","",N,N],[5,"SSL_get_peer_finished","","",N,N],[5,"SSL_SESSION_free","","",N,N],[5,"SSL_SESSION_get_id","","",N,N],[5,"d2i_SSL_SESSION","","",N,N],[5,"i2d_SSL_SESSION","","",N,N],[5,"X509_add_ext","","",N,N],[5,"X509_digest","","",N,N],[5,"X509_free","","",N,N],[5,"X509_REQ_free","","",N,N],[5,"X509_get_serialNumber","","",N,N],[5,"X509_gmtime_adj","","",N,N],[5,"X509_new","","",N,N],[5,"X509_set_issuer_name","","",N,N],[5,"X509_set_subject_name","","",N,N],[5,"X509_set_serialNumber","","",N,N],[5,"X509_set_version","","",N,N],[5,"X509_set_pubkey","","",N,N],[5,"X509_sign","","",N,N],[5,"X509_get_pubkey","","",N,N],[5,"X509_to_X509_REQ","","",N,N],[5,"X509_verify_cert","","",N,N],[5,"X509_verify_cert_error_string","","",N,N],[5,"X509_get1_ocsp","","",N,N],[5,"X509_check_issued","","",N,N],[5,"X509_ALGOR_free","","",N,N],[5,"X509_EXTENSION_free","","",N,N],[5,"X509_NAME_new","","",N,N],[5,"X509_NAME_free","","",N,N],[5,"X509_NAME_add_entry_by_txt","","",N,N],[5,"X509_NAME_get_index_by_NID","","",N,N],[5,"X509_NAME_ENTRY_free","","",N,N],[5,"ASN1_STRING_free","","",N,N],[5,"ASN1_STRING_length","","",N,N],[5,"ASN1_INTEGER_free","","",N,N],[5,"X509_STORE_new","","",N,N],[5,"X509_STORE_free","","",N,N],[5,"X509_STORE_add_cert","","",N,N],[5,"X509_STORE_set_default_paths","","",N,N],[5,"X509_STORE_CTX_new","","",N,N],[5,"X509_STORE_CTX_cleanup","","",N,N],[5,"X509_STORE_CTX_init","","",N,N],[5,"X509_STORE_CTX_free","","",N,N],[5,"X509_STORE_CTX_get_current_cert","","",N,N],[5,"X509_STORE_CTX_get_error","","",N,N],[5,"X509_STORE_CTX_set_error","","",N,N],[5,"X509_STORE_CTX_get_ex_data","","",N,N],[5,"X509_STORE_CTX_get_error_depth","","",N,N],[5,"X509V3_set_ctx","","",N,N],[5,"X509V3_set_nconf","","",N,N],[5,"X509_REQ_new","","",N,N],[5,"X509_REQ_set_version","","",N,N],[5,"X509_REQ_set_subject_name","","",N,N],[5,"X509_REQ_set_pubkey","","",N,N],[5,"X509_REQ_get_pubkey","","",N,N],[5,"X509_REQ_add_extensions","","",N,N],[5,"X509_REQ_get_extensions","","",N,N],[5,"X509_REQ_sign","","",N,N],[5,"d2i_DHparams","","",N,N],[5,"i2d_DHparams","","",N,N],[5,"d2i_DSAPublicKey","","",N,N],[5,"i2d_DSAPublicKey","","",N,N],[5,"d2i_DSAPrivateKey","","",N,N],[5,"i2d_DSAPrivateKey","","",N,N],[5,"d2i_DSA_PUBKEY","","",N,N],[5,"i2d_DSA_PUBKEY","","",N,N],[5,"d2i_ECPrivateKey","","",N,N],[5,"i2d_ECPrivateKey","","",N,N],[5,"d2i_X509","","",N,N],[5,"d2i_X509_REQ","","",N,N],[5,"i2d_X509_bio","","",N,N],[5,"i2d_X509","","",N,N],[5,"i2d_X509_REQ_bio","","",N,N],[5,"i2d_X509_REQ","","",N,N],[5,"d2i_AutoPrivateKey","","",N,N],[5,"d2i_PUBKEY","","",N,N],[5,"i2d_PUBKEY_bio","","",N,N],[5,"i2d_PrivateKey_bio","","",N,N],[5,"i2d_PUBKEY","","",N,N],[5,"i2d_PrivateKey","","",N,N],[5,"i2d_RSA_PUBKEY","","",N,N],[5,"d2i_RSA_PUBKEY","","",N,N],[5,"i2d_RSAPublicKey","","",N,N],[5,"d2i_RSAPublicKey","","",N,N],[5,"i2d_RSAPrivateKey","","",N,N],[5,"d2i_RSAPrivateKey","","",N,N],[5,"i2d_PKCS12_bio","","",N,N],[5,"i2d_PKCS12","","",N,N],[5,"d2i_PKCS12","","",N,N],[5,"PKCS12_parse","","",N,N],[5,"PKCS12_free","","",N,N],[5,"GENERAL_NAME_free","","",N,N],[5,"HMAC_Init_ex","","",N,N],[5,"HMAC_Update","","",N,N],[5,"HMAC_Final","","",N,N],[5,"SSL_CTX_set_cookie_generate_cb","","",N,N],[5,"SSL_CTX_set_cookie_verify_cb","","",N,N],[5,"EVP_MD_size","","",N,N],[5,"EVP_get_digestbyname","","",N,N],[5,"EVP_get_cipherbyname","","",N,N],[5,"SSL_set_connect_state","","",N,N],[5,"SSL_set_accept_state","","",N,N],[6,"bio_info_cb","","",N,N],[6,"GEN_SESSION_CB","","",N,N],[6,"tls_session_ticket_ext_cb_fn","","",N,N],[6,"tls_session_secret_cb_fn","","",N,N],[6,"BN_ULONG","","",N,N],[6,"CRYPTO_EX_new","","",N,N],[6,"CRYPTO_EX_dup","","",N,N],[6,"CRYPTO_EX_free","","",N,N],[6,"PasswordCallback","","",N,N],[6,"SHA_LONG","","",N,N],[6,"SHA_LONG64","","",N,N],[17,"SSL_CTRL_GET_SESSION_REUSED","","",N,N],[17,"SSL_CTRL_OPTIONS","","",N,N],[17,"SSL_CTRL_CLEAR_OPTIONS","","",N,N],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",N,N],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",N,N],[17,"SSL_OP_TLS_D5_BUG","","",N,N],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",N,N],[17,"SSL_OP_SINGLE_ECDH_USE","","",N,N],[17,"SSL_OP_SINGLE_DH_USE","","",N,N],[17,"SSL_OP_NO_SSLv2","","",N,N],[17,"SSL_MAX_SSL_SESSION_ID_LENGTH","","",N,N],[17,"SSL_MAX_SID_CTX_LENGTH","","",N,N],[17,"SSL_MAX_KEY_ARG_LENGTH","","",N,N],[17,"SSL_MAX_MASTER_KEY_LENGTH","","",N,N],[17,"SSL_MAX_KRB5_PRINCIPAL_LENGTH","","",N,N],[17,"SSLEAY_VERSION","","",N,N],[17,"SSLEAY_CFLAGS","","",N,N],[17,"SSLEAY_BUILT_ON","","",N,N],[17,"SSLEAY_PLATFORM","","",N,N],[17,"SSLEAY_DIR","","",N,N],[17,"CRYPTO_LOCK_X509","","",N,N],[17,"CRYPTO_LOCK_SSL_CTX","","",N,N],[17,"CRYPTO_LOCK_SSL_SESSION","","",N,N],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",N,N],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",N,N],[17,"SSL_OP_CISCO_ANYCONNECT","","",N,N],[17,"SSL_OP_NO_COMPRESSION","","",N,N],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",N,N],[17,"SSL_OP_NO_SSLv3","","",N,N],[17,"X509_V_ERR_UNSPECIFIED","","",N,N],[17,"CMS_TEXT","","",N,N],[17,"CMS_NOCERTS","","",N,N],[17,"CMS_NO_CONTENT_VERIFY","","",N,N],[17,"CMS_NO_ATTR_VERIFY","","",N,N],[17,"CMS_NOSIGS","","",N,N],[17,"CMS_NOINTERN","","",N,N],[17,"CMS_NO_SIGNER_CERT_VERIFY","","",N,N],[17,"CMS_NOVERIFY","","",N,N],[17,"CMS_DETACHED","","",N,N],[17,"CMS_BINARY","","",N,N],[17,"CMS_NOATTR","","",N,N],[17,"CMS_NOSMIMECAP","","",N,N],[17,"CMS_NOOLDMIMETYPE","","",N,N],[17,"CMS_CRLFEOL","","",N,N],[17,"CMS_STREAM","","",N,N],[17,"CMS_NOCRL","","",N,N],[17,"CMS_PARTIAL","","",N,N],[17,"CMS_REUSE_DIGEST","","",N,N],[17,"CMS_USE_KEYID","","",N,N],[17,"CMS_DEBUG_DECRYPT","","",N,N],[17,"AES_ENCRYPT","","",N,N],[17,"AES_DECRYPT","","",N,N],[17,"AES_MAXNR","","",N,N],[17,"AES_BLOCK_SIZE","","",N,N],[17,"BIO_TYPE_NONE","","",N,N],[17,"BIO_CTRL_EOF","","",N,N],[17,"BIO_CTRL_INFO","","",N,N],[17,"BIO_CTRL_FLUSH","","",N,N],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",N,N],[17,"BIO_FLAGS_READ","","",N,N],[17,"BIO_FLAGS_WRITE","","",N,N],[17,"BIO_FLAGS_IO_SPECIAL","","",N,N],[17,"BIO_FLAGS_RWS","","",N,N],[17,"BIO_FLAGS_SHOULD_RETRY","","",N,N],[17,"CRYPTO_LOCK","","",N,N],[17,"ERR_TXT_MALLOCED","","",N,N],[17,"ERR_TXT_STRING","","",N,N],[17,"ERR_LIB_PEM","","",N,N],[17,"PEM_R_NO_START_LINE","","",N,N],[17,"EVP_MAX_MD_SIZE","","",N,N],[17,"EVP_PKEY_RSA","","",N,N],[17,"EVP_PKEY_HMAC","","",N,N],[17,"EVP_PKEY_CMAC","","",N,N],[17,"EVP_PKEY_DSA","","",N,N],[17,"EVP_PKEY_DH","","",N,N],[17,"EVP_PKEY_EC","","",N,N],[17,"EVP_PKEY_ALG_CTRL","","",N,N],[17,"EVP_PKEY_CTRL_RSA_PADDING","","",N,N],[17,"EVP_PKEY_CTRL_RSA_PSS_SALTLEN","","",N,N],[17,"EVP_PKEY_CTRL_RSA_MGF1_MD","","",N,N],[17,"EVP_PKEY_CTRL_GET_RSA_PADDING","","",N,N],[17,"EVP_PKEY_CTRL_SET_MAC_KEY","","",N,N],[17,"EVP_PKEY_CTRL_CIPHER","","",N,N],[17,"EVP_PKEY_OP_KEYGEN","","",N,N],[17,"EVP_PKEY_OP_SIGN","","",N,N],[17,"EVP_PKEY_OP_VERIFY","","",N,N],[17,"EVP_PKEY_OP_VERIFYRECOVER","","",N,N],[17,"EVP_PKEY_OP_SIGNCTX","","",N,N],[17,"EVP_PKEY_OP_VERIFYCTX","","",N,N],[17,"EVP_PKEY_OP_ENCRYPT","","",N,N],[17,"EVP_PKEY_OP_DECRYPT","","",N,N],[17,"EVP_PKEY_OP_TYPE_SIG","","",N,N],[17,"EVP_PKEY_OP_TYPE_CRYPT","","",N,N],[17,"EVP_CTRL_GCM_SET_IVLEN","","",N,N],[17,"EVP_CTRL_GCM_GET_TAG","","",N,N],[17,"EVP_CTRL_GCM_SET_TAG","","",N,N],[17,"MBSTRING_ASC","","",N,N],[17,"MBSTRING_BMP","","",N,N],[17,"MBSTRING_FLAG","","",N,N],[17,"MBSTRING_UNIV","","",N,N],[17,"MBSTRING_UTF8","","",N,N],[17,"NID_undef","","",N,N],[17,"NID_itu_t","","",N,N],[17,"NID_ccitt","","",N,N],[17,"NID_iso","","",N,N],[17,"NID_joint_iso_itu_t","","",N,N],[17,"NID_joint_iso_ccitt","","",N,N],[17,"NID_member_body","","",N,N],[17,"NID_identified_organization","","",N,N],[17,"NID_hmac_md5","","",N,N],[17,"NID_hmac_sha1","","",N,N],[17,"NID_certicom_arc","","",N,N],[17,"NID_international_organizations","","",N,N],[17,"NID_wap","","",N,N],[17,"NID_wap_wsg","","",N,N],[17,"NID_selected_attribute_types","","",N,N],[17,"NID_clearance","","",N,N],[17,"NID_ISO_US","","",N,N],[17,"NID_X9_57","","",N,N],[17,"NID_X9cm","","",N,N],[17,"NID_dsa","","",N,N],[17,"NID_dsaWithSHA1","","",N,N],[17,"NID_ansi_X9_62","","",N,N],[17,"NID_X9_62_prime_field","","",N,N],[17,"NID_X9_62_characteristic_two_field","","",N,N],[17,"NID_X9_62_id_characteristic_two_basis","","",N,N],[17,"NID_X9_62_onBasis","","",N,N],[17,"NID_X9_62_tpBasis","","",N,N],[17,"NID_X9_62_ppBasis","","",N,N],[17,"NID_X9_62_id_ecPublicKey","","",N,N],[17,"NID_X9_62_c2pnb163v1","","",N,N],[17,"NID_X9_62_c2pnb163v2","","",N,N],[17,"NID_X9_62_c2pnb163v3","","",N,N],[17,"NID_X9_62_c2pnb176v1","","",N,N],[17,"NID_X9_62_c2tnb191v1","","",N,N],[17,"NID_X9_62_c2tnb191v2","","",N,N],[17,"NID_X9_62_c2tnb191v3","","",N,N],[17,"NID_X9_62_c2onb191v4","","",N,N],[17,"NID_X9_62_c2onb191v5","","",N,N],[17,"NID_X9_62_c2pnb208w1","","",N,N],[17,"NID_X9_62_c2tnb239v1","","",N,N],[17,"NID_X9_62_c2tnb239v2","","",N,N],[17,"NID_X9_62_c2tnb239v3","","",N,N],[17,"NID_X9_62_c2onb239v4","","",N,N],[17,"NID_X9_62_c2onb239v5","","",N,N],[17,"NID_X9_62_c2pnb272w1","","",N,N],[17,"NID_X9_62_c2pnb304w1","","",N,N],[17,"NID_X9_62_c2tnb359v1","","",N,N],[17,"NID_X9_62_c2pnb368w1","","",N,N],[17,"NID_X9_62_c2tnb431r1","","",N,N],[17,"NID_X9_62_prime192v1","","",N,N],[17,"NID_X9_62_prime192v2","","",N,N],[17,"NID_X9_62_prime192v3","","",N,N],[17,"NID_X9_62_prime239v1","","",N,N],[17,"NID_X9_62_prime239v2","","",N,N],[17,"NID_X9_62_prime239v3","","",N,N],[17,"NID_X9_62_prime256v1","","",N,N],[17,"NID_ecdsa_with_SHA1","","",N,N],[17,"NID_ecdsa_with_Recommended","","",N,N],[17,"NID_ecdsa_with_Specified","","",N,N],[17,"NID_ecdsa_with_SHA224","","",N,N],[17,"NID_ecdsa_with_SHA256","","",N,N],[17,"NID_ecdsa_with_SHA384","","",N,N],[17,"NID_ecdsa_with_SHA512","","",N,N],[17,"NID_secp112r1","","",N,N],[17,"NID_secp112r2","","",N,N],[17,"NID_secp128r1","","",N,N],[17,"NID_secp128r2","","",N,N],[17,"NID_secp160k1","","",N,N],[17,"NID_secp160r1","","",N,N],[17,"NID_secp160r2","","",N,N],[17,"NID_secp192k1","","",N,N],[17,"NID_secp224k1","","",N,N],[17,"NID_secp224r1","","",N,N],[17,"NID_secp256k1","","",N,N],[17,"NID_secp384r1","","",N,N],[17,"NID_secp521r1","","",N,N],[17,"NID_sect113r1","","",N,N],[17,"NID_sect113r2","","",N,N],[17,"NID_sect131r1","","",N,N],[17,"NID_sect131r2","","",N,N],[17,"NID_sect163k1","","",N,N],[17,"NID_sect163r1","","",N,N],[17,"NID_sect163r2","","",N,N],[17,"NID_sect193r1","","",N,N],[17,"NID_sect193r2","","",N,N],[17,"NID_sect233k1","","",N,N],[17,"NID_sect233r1","","",N,N],[17,"NID_sect239k1","","",N,N],[17,"NID_sect283k1","","",N,N],[17,"NID_sect283r1","","",N,N],[17,"NID_sect409k1","","",N,N],[17,"NID_sect409r1","","",N,N],[17,"NID_sect571k1","","",N,N],[17,"NID_sect571r1","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls1","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls3","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls4","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls5","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls6","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls7","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls8","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls9","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls10","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls11","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls12","","",N,N],[17,"NID_cast5_cbc","","",N,N],[17,"NID_cast5_ecb","","",N,N],[17,"NID_cast5_cfb64","","",N,N],[17,"NID_cast5_ofb64","","",N,N],[17,"NID_pbeWithMD5AndCast5_CBC","","",N,N],[17,"NID_id_PasswordBasedMAC","","",N,N],[17,"NID_id_DHBasedMac","","",N,N],[17,"NID_rsadsi","","",N,N],[17,"NID_pkcs","","",N,N],[17,"NID_pkcs1","","",N,N],[17,"NID_rsaEncryption","","",N,N],[17,"NID_md2WithRSAEncryption","","",N,N],[17,"NID_md4WithRSAEncryption","","",N,N],[17,"NID_md5WithRSAEncryption","","",N,N],[17,"NID_sha1WithRSAEncryption","","",N,N],[17,"NID_rsaesOaep","","",N,N],[17,"NID_mgf1","","",N,N],[17,"NID_rsassaPss","","",N,N],[17,"NID_sha256WithRSAEncryption","","",N,N],[17,"NID_sha384WithRSAEncryption","","",N,N],[17,"NID_sha512WithRSAEncryption","","",N,N],[17,"NID_sha224WithRSAEncryption","","",N,N],[17,"NID_pkcs3","","",N,N],[17,"NID_dhKeyAgreement","","",N,N],[17,"NID_pkcs5","","",N,N],[17,"NID_pbeWithMD2AndDES_CBC","","",N,N],[17,"NID_pbeWithMD5AndDES_CBC","","",N,N],[17,"NID_pbeWithMD2AndRC2_CBC","","",N,N],[17,"NID_pbeWithMD5AndRC2_CBC","","",N,N],[17,"NID_pbeWithSHA1AndDES_CBC","","",N,N],[17,"NID_pbeWithSHA1AndRC2_CBC","","",N,N],[17,"NID_id_pbkdf2","","",N,N],[17,"NID_pbes2","","",N,N],[17,"NID_pbmac1","","",N,N],[17,"NID_pkcs7","","",N,N],[17,"NID_pkcs7_data","","",N,N],[17,"NID_pkcs7_signed","","",N,N],[17,"NID_pkcs7_enveloped","","",N,N],[17,"NID_pkcs7_signedAndEnveloped","","",N,N],[17,"NID_pkcs7_digest","","",N,N],[17,"NID_pkcs7_encrypted","","",N,N],[17,"NID_pkcs9","","",N,N],[17,"NID_pkcs9_emailAddress","","",N,N],[17,"NID_pkcs9_unstructuredName","","",N,N],[17,"NID_pkcs9_contentType","","",N,N],[17,"NID_pkcs9_messageDigest","","",N,N],[17,"NID_pkcs9_signingTime","","",N,N],[17,"NID_pkcs9_countersignature","","",N,N],[17,"NID_pkcs9_challengePassword","","",N,N],[17,"NID_pkcs9_unstructuredAddress","","",N,N],[17,"NID_pkcs9_extCertAttributes","","",N,N],[17,"NID_ext_req","","",N,N],[17,"NID_SMIMECapabilities","","",N,N],[17,"NID_SMIME","","",N,N],[17,"NID_id_smime_mod","","",N,N],[17,"NID_id_smime_ct","","",N,N],[17,"NID_id_smime_aa","","",N,N],[17,"NID_id_smime_alg","","",N,N],[17,"NID_id_smime_cd","","",N,N],[17,"NID_id_smime_spq","","",N,N],[17,"NID_id_smime_cti","","",N,N],[17,"NID_id_smime_mod_cms","","",N,N],[17,"NID_id_smime_mod_ess","","",N,N],[17,"NID_id_smime_mod_oid","","",N,N],[17,"NID_id_smime_mod_msg_v3","","",N,N],[17,"NID_id_smime_mod_ets_eSignature_88","","",N,N],[17,"NID_id_smime_mod_ets_eSignature_97","","",N,N],[17,"NID_id_smime_mod_ets_eSigPolicy_88","","",N,N],[17,"NID_id_smime_mod_ets_eSigPolicy_97","","",N,N],[17,"NID_id_smime_ct_receipt","","",N,N],[17,"NID_id_smime_ct_authData","","",N,N],[17,"NID_id_smime_ct_publishCert","","",N,N],[17,"NID_id_smime_ct_TSTInfo","","",N,N],[17,"NID_id_smime_ct_TDTInfo","","",N,N],[17,"NID_id_smime_ct_contentInfo","","",N,N],[17,"NID_id_smime_ct_DVCSRequestData","","",N,N],[17,"NID_id_smime_ct_DVCSResponseData","","",N,N],[17,"NID_id_smime_ct_compressedData","","",N,N],[17,"NID_id_ct_asciiTextWithCRLF","","",N,N],[17,"NID_id_smime_aa_receiptRequest","","",N,N],[17,"NID_id_smime_aa_securityLabel","","",N,N],[17,"NID_id_smime_aa_mlExpandHistory","","",N,N],[17,"NID_id_smime_aa_contentHint","","",N,N],[17,"NID_id_smime_aa_msgSigDigest","","",N,N],[17,"NID_id_smime_aa_encapContentType","","",N,N],[17,"NID_id_smime_aa_contentIdentifier","","",N,N],[17,"NID_id_smime_aa_macValue","","",N,N],[17,"NID_id_smime_aa_equivalentLabels","","",N,N],[17,"NID_id_smime_aa_contentReference","","",N,N],[17,"NID_id_smime_aa_encrypKeyPref","","",N,N],[17,"NID_id_smime_aa_signingCertificate","","",N,N],[17,"NID_id_smime_aa_smimeEncryptCerts","","",N,N],[17,"NID_id_smime_aa_timeStampToken","","",N,N],[17,"NID_id_smime_aa_ets_sigPolicyId","","",N,N],[17,"NID_id_smime_aa_ets_commitmentType","","",N,N],[17,"NID_id_smime_aa_ets_signerLocation","","",N,N],[17,"NID_id_smime_aa_ets_signerAttr","","",N,N],[17,"NID_id_smime_aa_ets_otherSigCert","","",N,N],[17,"NID_id_smime_aa_ets_contentTimestamp","","",N,N],[17,"NID_id_smime_aa_ets_CertificateRefs","","",N,N],[17,"NID_id_smime_aa_ets_RevocationRefs","","",N,N],[17,"NID_id_smime_aa_ets_certValues","","",N,N],[17,"NID_id_smime_aa_ets_revocationValues","","",N,N],[17,"NID_id_smime_aa_ets_escTimeStamp","","",N,N],[17,"NID_id_smime_aa_ets_certCRLTimestamp","","",N,N],[17,"NID_id_smime_aa_ets_archiveTimeStamp","","",N,N],[17,"NID_id_smime_aa_signatureType","","",N,N],[17,"NID_id_smime_aa_dvcs_dvc","","",N,N],[17,"NID_id_smime_alg_ESDHwith3DES","","",N,N],[17,"NID_id_smime_alg_ESDHwithRC2","","",N,N],[17,"NID_id_smime_alg_3DESwrap","","",N,N],[17,"NID_id_smime_alg_RC2wrap","","",N,N],[17,"NID_id_smime_alg_ESDH","","",N,N],[17,"NID_id_smime_alg_CMS3DESwrap","","",N,N],[17,"NID_id_smime_alg_CMSRC2wrap","","",N,N],[17,"NID_id_alg_PWRI_KEK","","",N,N],[17,"NID_id_smime_cd_ldap","","",N,N],[17,"NID_id_smime_spq_ets_sqt_uri","","",N,N],[17,"NID_id_smime_spq_ets_sqt_unotice","","",N,N],[17,"NID_id_smime_cti_ets_proofOfOrigin","","",N,N],[17,"NID_id_smime_cti_ets_proofOfReceipt","","",N,N],[17,"NID_id_smime_cti_ets_proofOfDelivery","","",N,N],[17,"NID_id_smime_cti_ets_proofOfSender","","",N,N],[17,"NID_id_smime_cti_ets_proofOfApproval","","",N,N],[17,"NID_id_smime_cti_ets_proofOfCreation","","",N,N],[17,"NID_friendlyName","","",N,N],[17,"NID_localKeyID","","",N,N],[17,"NID_ms_csp_name","","",N,N],[17,"NID_LocalKeySet","","",N,N],[17,"NID_x509Certificate","","",N,N],[17,"NID_sdsiCertificate","","",N,N],[17,"NID_x509Crl","","",N,N],[17,"NID_pbe_WithSHA1And128BitRC4","","",N,N],[17,"NID_pbe_WithSHA1And40BitRC4","","",N,N],[17,"NID_pbe_WithSHA1And3_Key_TripleDES_CBC","","",N,N],[17,"NID_pbe_WithSHA1And2_Key_TripleDES_CBC","","",N,N],[17,"NID_pbe_WithSHA1And128BitRC2_CBC","","",N,N],[17,"NID_pbe_WithSHA1And40BitRC2_CBC","","",N,N],[17,"NID_keyBag","","",N,N],[17,"NID_pkcs8ShroudedKeyBag","","",N,N],[17,"NID_certBag","","",N,N],[17,"NID_crlBag","","",N,N],[17,"NID_secretBag","","",N,N],[17,"NID_safeContentsBag","","",N,N],[17,"NID_md2","","",N,N],[17,"NID_md4","","",N,N],[17,"NID_md5","","",N,N],[17,"NID_md5_sha1","","",N,N],[17,"NID_hmacWithMD5","","",N,N],[17,"NID_hmacWithSHA1","","",N,N],[17,"NID_hmacWithSHA224","","",N,N],[17,"NID_hmacWithSHA256","","",N,N],[17,"NID_hmacWithSHA384","","",N,N],[17,"NID_hmacWithSHA512","","",N,N],[17,"NID_rc2_cbc","","",N,N],[17,"NID_rc2_ecb","","",N,N],[17,"NID_rc2_cfb64","","",N,N],[17,"NID_rc2_ofb64","","",N,N],[17,"NID_rc2_40_cbc","","",N,N],[17,"NID_rc2_64_cbc","","",N,N],[17,"NID_rc4","","",N,N],[17,"NID_rc4_40","","",N,N],[17,"NID_des_ede3_cbc","","",N,N],[17,"NID_rc5_cbc","","",N,N],[17,"NID_rc5_ecb","","",N,N],[17,"NID_rc5_cfb64","","",N,N],[17,"NID_rc5_ofb64","","",N,N],[17,"NID_ms_ext_req","","",N,N],[17,"NID_ms_code_ind","","",N,N],[17,"NID_ms_code_com","","",N,N],[17,"NID_ms_ctl_sign","","",N,N],[17,"NID_ms_sgc","","",N,N],[17,"NID_ms_efs","","",N,N],[17,"NID_ms_smartcard_login","","",N,N],[17,"NID_ms_upn","","",N,N],[17,"NID_idea_cbc","","",N,N],[17,"NID_idea_ecb","","",N,N],[17,"NID_idea_cfb64","","",N,N],[17,"NID_idea_ofb64","","",N,N],[17,"NID_bf_cbc","","",N,N],[17,"NID_bf_ecb","","",N,N],[17,"NID_bf_cfb64","","",N,N],[17,"NID_bf_ofb64","","",N,N],[17,"NID_id_pkix","","",N,N],[17,"NID_id_pkix_mod","","",N,N],[17,"NID_id_pe","","",N,N],[17,"NID_id_qt","","",N,N],[17,"NID_id_kp","","",N,N],[17,"NID_id_it","","",N,N],[17,"NID_id_pkip","","",N,N],[17,"NID_id_alg","","",N,N],[17,"NID_id_cmc","","",N,N],[17,"NID_id_on","","",N,N],[17,"NID_id_pda","","",N,N],[17,"NID_id_aca","","",N,N],[17,"NID_id_qcs","","",N,N],[17,"NID_id_cct","","",N,N],[17,"NID_id_ppl","","",N,N],[17,"NID_id_ad","","",N,N],[17,"NID_id_pkix1_explicit_88","","",N,N],[17,"NID_id_pkix1_implicit_88","","",N,N],[17,"NID_id_pkix1_explicit_93","","",N,N],[17,"NID_id_pkix1_implicit_93","","",N,N],[17,"NID_id_mod_crmf","","",N,N],[17,"NID_id_mod_cmc","","",N,N],[17,"NID_id_mod_kea_profile_88","","",N,N],[17,"NID_id_mod_kea_profile_93","","",N,N],[17,"NID_id_mod_cmp","","",N,N],[17,"NID_id_mod_qualified_cert_88","","",N,N],[17,"NID_id_mod_qualified_cert_93","","",N,N],[17,"NID_id_mod_attribute_cert","","",N,N],[17,"NID_id_mod_timestamp_protocol","","",N,N],[17,"NID_id_mod_ocsp","","",N,N],[17,"NID_id_mod_dvcs","","",N,N],[17,"NID_id_mod_cmp2000","","",N,N],[17,"NID_info_access","","",N,N],[17,"NID_biometricInfo","","",N,N],[17,"NID_qcStatements","","",N,N],[17,"NID_ac_auditEntity","","",N,N],[17,"NID_ac_targeting","","",N,N],[17,"NID_aaControls","","",N,N],[17,"NID_sbgp_ipAddrBlock","","",N,N],[17,"NID_sbgp_autonomousSysNum","","",N,N],[17,"NID_sbgp_routerIdentifier","","",N,N],[17,"NID_ac_proxying","","",N,N],[17,"NID_sinfo_access","","",N,N],[17,"NID_proxyCertInfo","","",N,N],[17,"NID_id_qt_cps","","",N,N],[17,"NID_id_qt_unotice","","",N,N],[17,"NID_textNotice","","",N,N],[17,"NID_server_auth","","",N,N],[17,"NID_client_auth","","",N,N],[17,"NID_code_sign","","",N,N],[17,"NID_email_protect","","",N,N],[17,"NID_ipsecEndSystem","","",N,N],[17,"NID_ipsecTunnel","","",N,N],[17,"NID_ipsecUser","","",N,N],[17,"NID_time_stamp","","",N,N],[17,"NID_OCSP_sign","","",N,N],[17,"NID_dvcs","","",N,N],[17,"NID_id_it_caProtEncCert","","",N,N],[17,"NID_id_it_signKeyPairTypes","","",N,N],[17,"NID_id_it_encKeyPairTypes","","",N,N],[17,"NID_id_it_preferredSymmAlg","","",N,N],[17,"NID_id_it_caKeyUpdateInfo","","",N,N],[17,"NID_id_it_currentCRL","","",N,N],[17,"NID_id_it_unsupportedOIDs","","",N,N],[17,"NID_id_it_subscriptionRequest","","",N,N],[17,"NID_id_it_subscriptionResponse","","",N,N],[17,"NID_id_it_keyPairParamReq","","",N,N],[17,"NID_id_it_keyPairParamRep","","",N,N],[17,"NID_id_it_revPassphrase","","",N,N],[17,"NID_id_it_implicitConfirm","","",N,N],[17,"NID_id_it_confirmWaitTime","","",N,N],[17,"NID_id_it_origPKIMessage","","",N,N],[17,"NID_id_it_suppLangTags","","",N,N],[17,"NID_id_regCtrl","","",N,N],[17,"NID_id_regInfo","","",N,N],[17,"NID_id_regCtrl_regToken","","",N,N],[17,"NID_id_regCtrl_authenticator","","",N,N],[17,"NID_id_regCtrl_pkiPublicationInfo","","",N,N],[17,"NID_id_regCtrl_pkiArchiveOptions","","",N,N],[17,"NID_id_regCtrl_oldCertID","","",N,N],[17,"NID_id_regCtrl_protocolEncrKey","","",N,N],[17,"NID_id_regInfo_utf8Pairs","","",N,N],[17,"NID_id_regInfo_certReq","","",N,N],[17,"NID_id_alg_des40","","",N,N],[17,"NID_id_alg_noSignature","","",N,N],[17,"NID_id_alg_dh_sig_hmac_sha1","","",N,N],[17,"NID_id_alg_dh_pop","","",N,N],[17,"NID_id_cmc_statusInfo","","",N,N],[17,"NID_id_cmc_identification","","",N,N],[17,"NID_id_cmc_identityProof","","",N,N],[17,"NID_id_cmc_dataReturn","","",N,N],[17,"NID_id_cmc_transactionId","","",N,N],[17,"NID_id_cmc_senderNonce","","",N,N],[17,"NID_id_cmc_recipientNonce","","",N,N],[17,"NID_id_cmc_addExtensions","","",N,N],[17,"NID_id_cmc_encryptedPOP","","",N,N],[17,"NID_id_cmc_decryptedPOP","","",N,N],[17,"NID_id_cmc_lraPOPWitness","","",N,N],[17,"NID_id_cmc_getCert","","",N,N],[17,"NID_id_cmc_getCRL","","",N,N],[17,"NID_id_cmc_revokeRequest","","",N,N],[17,"NID_id_cmc_regInfo","","",N,N],[17,"NID_id_cmc_responseInfo","","",N,N],[17,"NID_id_cmc_queryPending","","",N,N],[17,"NID_id_cmc_popLinkRandom","","",N,N],[17,"NID_id_cmc_popLinkWitness","","",N,N],[17,"NID_id_cmc_confirmCertAcceptance","","",N,N],[17,"NID_id_on_personalData","","",N,N],[17,"NID_id_on_permanentIdentifier","","",N,N],[17,"NID_id_pda_dateOfBirth","","",N,N],[17,"NID_id_pda_placeOfBirth","","",N,N],[17,"NID_id_pda_gender","","",N,N],[17,"NID_id_pda_countryOfCitizenship","","",N,N],[17,"NID_id_pda_countryOfResidence","","",N,N],[17,"NID_id_aca_authenticationInfo","","",N,N],[17,"NID_id_aca_accessIdentity","","",N,N],[17,"NID_id_aca_chargingIdentity","","",N,N],[17,"NID_id_aca_group","","",N,N],[17,"NID_id_aca_role","","",N,N],[17,"NID_id_aca_encAttrs","","",N,N],[17,"NID_id_qcs_pkixQCSyntax_v1","","",N,N],[17,"NID_id_cct_crs","","",N,N],[17,"NID_id_cct_PKIData","","",N,N],[17,"NID_id_cct_PKIResponse","","",N,N],[17,"NID_id_ppl_anyLanguage","","",N,N],[17,"NID_id_ppl_inheritAll","","",N,N],[17,"NID_Independent","","",N,N],[17,"NID_ad_OCSP","","",N,N],[17,"NID_ad_ca_issuers","","",N,N],[17,"NID_ad_timeStamping","","",N,N],[17,"NID_ad_dvcs","","",N,N],[17,"NID_caRepository","","",N,N],[17,"NID_id_pkix_OCSP_basic","","",N,N],[17,"NID_id_pkix_OCSP_Nonce","","",N,N],[17,"NID_id_pkix_OCSP_CrlID","","",N,N],[17,"NID_id_pkix_OCSP_acceptableResponses","","",N,N],[17,"NID_id_pkix_OCSP_noCheck","","",N,N],[17,"NID_id_pkix_OCSP_archiveCutoff","","",N,N],[17,"NID_id_pkix_OCSP_serviceLocator","","",N,N],[17,"NID_id_pkix_OCSP_extendedStatus","","",N,N],[17,"NID_id_pkix_OCSP_valid","","",N,N],[17,"NID_id_pkix_OCSP_path","","",N,N],[17,"NID_id_pkix_OCSP_trustRoot","","",N,N],[17,"NID_algorithm","","",N,N],[17,"NID_md5WithRSA","","",N,N],[17,"NID_des_ecb","","",N,N],[17,"NID_des_cbc","","",N,N],[17,"NID_des_ofb64","","",N,N],[17,"NID_des_cfb64","","",N,N],[17,"NID_rsaSignature","","",N,N],[17,"NID_dsa_2","","",N,N],[17,"NID_dsaWithSHA","","",N,N],[17,"NID_shaWithRSAEncryption","","",N,N],[17,"NID_des_ede_ecb","","",N,N],[17,"NID_des_ede3_ecb","","",N,N],[17,"NID_des_ede_cbc","","",N,N],[17,"NID_des_ede_cfb64","","",N,N],[17,"NID_des_ede3_cfb64","","",N,N],[17,"NID_des_ede_ofb64","","",N,N],[17,"NID_des_ede3_ofb64","","",N,N],[17,"NID_desx_cbc","","",N,N],[17,"NID_sha","","",N,N],[17,"NID_sha1","","",N,N],[17,"NID_dsaWithSHA1_2","","",N,N],[17,"NID_sha1WithRSA","","",N,N],[17,"NID_ripemd160","","",N,N],[17,"NID_ripemd160WithRSA","","",N,N],[17,"NID_sxnet","","",N,N],[17,"NID_X500","","",N,N],[17,"NID_X509","","",N,N],[17,"NID_commonName","","",N,N],[17,"NID_surname","","",N,N],[17,"NID_serialNumber","","",N,N],[17,"NID_countryName","","",N,N],[17,"NID_localityName","","",N,N],[17,"NID_stateOrProvinceName","","",N,N],[17,"NID_streetAddress","","",N,N],[17,"NID_organizationName","","",N,N],[17,"NID_organizationalUnitName","","",N,N],[17,"NID_title","","",N,N],[17,"NID_description","","",N,N],[17,"NID_searchGuide","","",N,N],[17,"NID_businessCategory","","",N,N],[17,"NID_postalAddress","","",N,N],[17,"NID_postalCode","","",N,N],[17,"NID_postOfficeBox","","",N,N],[17,"NID_physicalDeliveryOfficeName","","",N,N],[17,"NID_telephoneNumber","","",N,N],[17,"NID_telexNumber","","",N,N],[17,"NID_teletexTerminalIdentifier","","",N,N],[17,"NID_facsimileTelephoneNumber","","",N,N],[17,"NID_x121Address","","",N,N],[17,"NID_internationaliSDNNumber","","",N,N],[17,"NID_registeredAddress","","",N,N],[17,"NID_destinationIndicator","","",N,N],[17,"NID_preferredDeliveryMethod","","",N,N],[17,"NID_presentationAddress","","",N,N],[17,"NID_supportedApplicationContext","","",N,N],[17,"NID_member","","",N,N],[17,"NID_owner","","",N,N],[17,"NID_roleOccupant","","",N,N],[17,"NID_seeAlso","","",N,N],[17,"NID_userPassword","","",N,N],[17,"NID_userCertificate","","",N,N],[17,"NID_cACertificate","","",N,N],[17,"NID_authorityRevocationList","","",N,N],[17,"NID_certificateRevocationList","","",N,N],[17,"NID_crossCertificatePair","","",N,N],[17,"NID_name","","",N,N],[17,"NID_givenName","","",N,N],[17,"NID_initials","","",N,N],[17,"NID_generationQualifier","","",N,N],[17,"NID_x500UniqueIdentifier","","",N,N],[17,"NID_dnQualifier","","",N,N],[17,"NID_enhancedSearchGuide","","",N,N],[17,"NID_protocolInformation","","",N,N],[17,"NID_distinguishedName","","",N,N],[17,"NID_uniqueMember","","",N,N],[17,"NID_houseIdentifier","","",N,N],[17,"NID_supportedAlgorithms","","",N,N],[17,"NID_deltaRevocationList","","",N,N],[17,"NID_dmdName","","",N,N],[17,"NID_pseudonym","","",N,N],[17,"NID_role","","",N,N],[17,"NID_X500algorithms","","",N,N],[17,"NID_rsa","","",N,N],[17,"NID_mdc2WithRSA","","",N,N],[17,"NID_mdc2","","",N,N],[17,"NID_id_ce","","",N,N],[17,"NID_subject_directory_attributes","","",N,N],[17,"NID_subject_key_identifier","","",N,N],[17,"NID_key_usage","","",N,N],[17,"NID_private_key_usage_period","","",N,N],[17,"NID_subject_alt_name","","",N,N],[17,"NID_issuer_alt_name","","",N,N],[17,"NID_basic_constraints","","",N,N],[17,"NID_crl_number","","",N,N],[17,"NID_crl_reason","","",N,N],[17,"NID_invalidity_date","","",N,N],[17,"NID_delta_crl","","",N,N],[17,"NID_issuing_distribution_point","","",N,N],[17,"NID_certificate_issuer","","",N,N],[17,"NID_name_constraints","","",N,N],[17,"NID_crl_distribution_points","","",N,N],[17,"NID_certificate_policies","","",N,N],[17,"NID_any_policy","","",N,N],[17,"NID_policy_mappings","","",N,N],[17,"NID_authority_key_identifier","","",N,N],[17,"NID_policy_constraints","","",N,N],[17,"NID_ext_key_usage","","",N,N],[17,"NID_freshest_crl","","",N,N],[17,"NID_inhibit_any_policy","","",N,N],[17,"NID_target_information","","",N,N],[17,"NID_no_rev_avail","","",N,N],[17,"NID_anyExtendedKeyUsage","","",N,N],[17,"NID_netscape","","",N,N],[17,"NID_netscape_cert_extension","","",N,N],[17,"NID_netscape_data_type","","",N,N],[17,"NID_netscape_cert_type","","",N,N],[17,"NID_netscape_base_url","","",N,N],[17,"NID_netscape_revocation_url","","",N,N],[17,"NID_netscape_ca_revocation_url","","",N,N],[17,"NID_netscape_renewal_url","","",N,N],[17,"NID_netscape_ca_policy_url","","",N,N],[17,"NID_netscape_ssl_server_name","","",N,N],[17,"NID_netscape_comment","","",N,N],[17,"NID_netscape_cert_sequence","","",N,N],[17,"NID_ns_sgc","","",N,N],[17,"NID_org","","",N,N],[17,"NID_dod","","",N,N],[17,"NID_iana","","",N,N],[17,"NID_Directory","","",N,N],[17,"NID_Management","","",N,N],[17,"NID_Experimental","","",N,N],[17,"NID_Private","","",N,N],[17,"NID_Security","","",N,N],[17,"NID_SNMPv2","","",N,N],[17,"NID_Mail","","",N,N],[17,"NID_Enterprises","","",N,N],[17,"NID_dcObject","","",N,N],[17,"NID_mime_mhs","","",N,N],[17,"NID_mime_mhs_headings","","",N,N],[17,"NID_mime_mhs_bodies","","",N,N],[17,"NID_id_hex_partial_message","","",N,N],[17,"NID_id_hex_multipart_message","","",N,N],[17,"NID_zlib_compression","","",N,N],[17,"NID_aes_128_ecb","","",N,N],[17,"NID_aes_128_cbc","","",N,N],[17,"NID_aes_128_ofb128","","",N,N],[17,"NID_aes_128_cfb128","","",N,N],[17,"NID_id_aes128_wrap","","",N,N],[17,"NID_aes_128_gcm","","",N,N],[17,"NID_aes_128_ccm","","",N,N],[17,"NID_id_aes128_wrap_pad","","",N,N],[17,"NID_aes_192_ecb","","",N,N],[17,"NID_aes_192_cbc","","",N,N],[17,"NID_aes_192_ofb128","","",N,N],[17,"NID_aes_192_cfb128","","",N,N],[17,"NID_id_aes192_wrap","","",N,N],[17,"NID_aes_192_gcm","","",N,N],[17,"NID_aes_192_ccm","","",N,N],[17,"NID_id_aes192_wrap_pad","","",N,N],[17,"NID_aes_256_ecb","","",N,N],[17,"NID_aes_256_cbc","","",N,N],[17,"NID_aes_256_ofb128","","",N,N],[17,"NID_aes_256_cfb128","","",N,N],[17,"NID_id_aes256_wrap","","",N,N],[17,"NID_aes_256_gcm","","",N,N],[17,"NID_aes_256_ccm","","",N,N],[17,"NID_id_aes256_wrap_pad","","",N,N],[17,"NID_aes_128_cfb1","","",N,N],[17,"NID_aes_192_cfb1","","",N,N],[17,"NID_aes_256_cfb1","","",N,N],[17,"NID_aes_128_cfb8","","",N,N],[17,"NID_aes_192_cfb8","","",N,N],[17,"NID_aes_256_cfb8","","",N,N],[17,"NID_aes_128_ctr","","",N,N],[17,"NID_aes_192_ctr","","",N,N],[17,"NID_aes_256_ctr","","",N,N],[17,"NID_aes_128_xts","","",N,N],[17,"NID_aes_256_xts","","",N,N],[17,"NID_des_cfb1","","",N,N],[17,"NID_des_cfb8","","",N,N],[17,"NID_des_ede3_cfb1","","",N,N],[17,"NID_des_ede3_cfb8","","",N,N],[17,"NID_sha256","","",N,N],[17,"NID_sha384","","",N,N],[17,"NID_sha512","","",N,N],[17,"NID_sha224","","",N,N],[17,"NID_dsa_with_SHA224","","",N,N],[17,"NID_dsa_with_SHA256","","",N,N],[17,"NID_hold_instruction_code","","",N,N],[17,"NID_hold_instruction_none","","",N,N],[17,"NID_hold_instruction_call_issuer","","",N,N],[17,"NID_hold_instruction_reject","","",N,N],[17,"NID_data","","",N,N],[17,"NID_pss","","",N,N],[17,"NID_ucl","","",N,N],[17,"NID_pilot","","",N,N],[17,"NID_pilotAttributeType","","",N,N],[17,"NID_pilotAttributeSyntax","","",N,N],[17,"NID_pilotObjectClass","","",N,N],[17,"NID_pilotGroups","","",N,N],[17,"NID_iA5StringSyntax","","",N,N],[17,"NID_caseIgnoreIA5StringSyntax","","",N,N],[17,"NID_pilotObject","","",N,N],[17,"NID_pilotPerson","","",N,N],[17,"NID_account","","",N,N],[17,"NID_document","","",N,N],[17,"NID_room","","",N,N],[17,"NID_documentSeries","","",N,N],[17,"NID_Domain","","",N,N],[17,"NID_rFC822localPart","","",N,N],[17,"NID_dNSDomain","","",N,N],[17,"NID_domainRelatedObject","","",N,N],[17,"NID_friendlyCountry","","",N,N],[17,"NID_simpleSecurityObject","","",N,N],[17,"NID_pilotOrganization","","",N,N],[17,"NID_pilotDSA","","",N,N],[17,"NID_qualityLabelledData","","",N,N],[17,"NID_userId","","",N,N],[17,"NID_textEncodedORAddress","","",N,N],[17,"NID_rfc822Mailbox","","",N,N],[17,"NID_info","","",N,N],[17,"NID_favouriteDrink","","",N,N],[17,"NID_roomNumber","","",N,N],[17,"NID_photo","","",N,N],[17,"NID_userClass","","",N,N],[17,"NID_host","","",N,N],[17,"NID_manager","","",N,N],[17,"NID_documentIdentifier","","",N,N],[17,"NID_documentTitle","","",N,N],[17,"NID_documentVersion","","",N,N],[17,"NID_documentAuthor","","",N,N],[17,"NID_documentLocation","","",N,N],[17,"NID_homeTelephoneNumber","","",N,N],[17,"NID_secretary","","",N,N],[17,"NID_otherMailbox","","",N,N],[17,"NID_lastModifiedTime","","",N,N],[17,"NID_lastModifiedBy","","",N,N],[17,"NID_domainComponent","","",N,N],[17,"NID_aRecord","","",N,N],[17,"NID_pilotAttributeType27","","",N,N],[17,"NID_mXRecord","","",N,N],[17,"NID_nSRecord","","",N,N],[17,"NID_sOARecord","","",N,N],[17,"NID_cNAMERecord","","",N,N],[17,"NID_associatedDomain","","",N,N],[17,"NID_associatedName","","",N,N],[17,"NID_homePostalAddress","","",N,N],[17,"NID_personalTitle","","",N,N],[17,"NID_mobileTelephoneNumber","","",N,N],[17,"NID_pagerTelephoneNumber","","",N,N],[17,"NID_friendlyCountryName","","",N,N],[17,"NID_organizationalStatus","","",N,N],[17,"NID_janetMailbox","","",N,N],[17,"NID_mailPreferenceOption","","",N,N],[17,"NID_buildingName","","",N,N],[17,"NID_dSAQuality","","",N,N],[17,"NID_singleLevelQuality","","",N,N],[17,"NID_subtreeMinimumQuality","","",N,N],[17,"NID_subtreeMaximumQuality","","",N,N],[17,"NID_personalSignature","","",N,N],[17,"NID_dITRedirect","","",N,N],[17,"NID_audio","","",N,N],[17,"NID_documentPublisher","","",N,N],[17,"NID_id_set","","",N,N],[17,"NID_set_ctype","","",N,N],[17,"NID_set_msgExt","","",N,N],[17,"NID_set_attr","","",N,N],[17,"NID_set_policy","","",N,N],[17,"NID_set_certExt","","",N,N],[17,"NID_set_brand","","",N,N],[17,"NID_setct_PANData","","",N,N],[17,"NID_setct_PANToken","","",N,N],[17,"NID_setct_PANOnly","","",N,N],[17,"NID_setct_OIData","","",N,N],[17,"NID_setct_PI","","",N,N],[17,"NID_setct_PIData","","",N,N],[17,"NID_setct_PIDataUnsigned","","",N,N],[17,"NID_setct_HODInput","","",N,N],[17,"NID_setct_AuthResBaggage","","",N,N],[17,"NID_setct_AuthRevReqBaggage","","",N,N],[17,"NID_setct_AuthRevResBaggage","","",N,N],[17,"NID_setct_CapTokenSeq","","",N,N],[17,"NID_setct_PInitResData","","",N,N],[17,"NID_setct_PI_TBS","","",N,N],[17,"NID_setct_PResData","","",N,N],[17,"NID_setct_AuthReqTBS","","",N,N],[17,"NID_setct_AuthResTBS","","",N,N],[17,"NID_setct_AuthResTBSX","","",N,N],[17,"NID_setct_AuthTokenTBS","","",N,N],[17,"NID_setct_CapTokenData","","",N,N],[17,"NID_setct_CapTokenTBS","","",N,N],[17,"NID_setct_AcqCardCodeMsg","","",N,N],[17,"NID_setct_AuthRevReqTBS","","",N,N],[17,"NID_setct_AuthRevResData","","",N,N],[17,"NID_setct_AuthRevResTBS","","",N,N],[17,"NID_setct_CapReqTBS","","",N,N],[17,"NID_setct_CapReqTBSX","","",N,N],[17,"NID_setct_CapResData","","",N,N],[17,"NID_setct_CapRevReqTBS","","",N,N],[17,"NID_setct_CapRevReqTBSX","","",N,N],[17,"NID_setct_CapRevResData","","",N,N],[17,"NID_setct_CredReqTBS","","",N,N],[17,"NID_setct_CredReqTBSX","","",N,N],[17,"NID_setct_CredResData","","",N,N],[17,"NID_setct_CredRevReqTBS","","",N,N],[17,"NID_setct_CredRevReqTBSX","","",N,N],[17,"NID_setct_CredRevResData","","",N,N],[17,"NID_setct_PCertReqData","","",N,N],[17,"NID_setct_PCertResTBS","","",N,N],[17,"NID_setct_BatchAdminReqData","","",N,N],[17,"NID_setct_BatchAdminResData","","",N,N],[17,"NID_setct_CardCInitResTBS","","",N,N],[17,"NID_setct_MeAqCInitResTBS","","",N,N],[17,"NID_setct_RegFormResTBS","","",N,N],[17,"NID_setct_CertReqData","","",N,N],[17,"NID_setct_CertReqTBS","","",N,N],[17,"NID_setct_CertResData","","",N,N],[17,"NID_setct_CertInqReqTBS","","",N,N],[17,"NID_setct_ErrorTBS","","",N,N],[17,"NID_setct_PIDualSignedTBE","","",N,N],[17,"NID_setct_PIUnsignedTBE","","",N,N],[17,"NID_setct_AuthReqTBE","","",N,N],[17,"NID_setct_AuthResTBE","","",N,N],[17,"NID_setct_AuthResTBEX","","",N,N],[17,"NID_setct_AuthTokenTBE","","",N,N],[17,"NID_setct_CapTokenTBE","","",N,N],[17,"NID_setct_CapTokenTBEX","","",N,N],[17,"NID_setct_AcqCardCodeMsgTBE","","",N,N],[17,"NID_setct_AuthRevReqTBE","","",N,N],[17,"NID_setct_AuthRevResTBE","","",N,N],[17,"NID_setct_AuthRevResTBEB","","",N,N],[17,"NID_setct_CapReqTBE","","",N,N],[17,"NID_setct_CapReqTBEX","","",N,N],[17,"NID_setct_CapResTBE","","",N,N],[17,"NID_setct_CapRevReqTBE","","",N,N],[17,"NID_setct_CapRevReqTBEX","","",N,N],[17,"NID_setct_CapRevResTBE","","",N,N],[17,"NID_setct_CredReqTBE","","",N,N],[17,"NID_setct_CredReqTBEX","","",N,N],[17,"NID_setct_CredResTBE","","",N,N],[17,"NID_setct_CredRevReqTBE","","",N,N],[17,"NID_setct_CredRevReqTBEX","","",N,N],[17,"NID_setct_CredRevResTBE","","",N,N],[17,"NID_setct_BatchAdminReqTBE","","",N,N],[17,"NID_setct_BatchAdminResTBE","","",N,N],[17,"NID_setct_RegFormReqTBE","","",N,N],[17,"NID_setct_CertReqTBE","","",N,N],[17,"NID_setct_CertReqTBEX","","",N,N],[17,"NID_setct_CertResTBE","","",N,N],[17,"NID_setct_CRLNotificationTBS","","",N,N],[17,"NID_setct_CRLNotificationResTBS","","",N,N],[17,"NID_setct_BCIDistributionTBS","","",N,N],[17,"NID_setext_genCrypt","","",N,N],[17,"NID_setext_miAuth","","",N,N],[17,"NID_setext_pinSecure","","",N,N],[17,"NID_setext_pinAny","","",N,N],[17,"NID_setext_track2","","",N,N],[17,"NID_setext_cv","","",N,N],[17,"NID_set_policy_root","","",N,N],[17,"NID_setCext_hashedRoot","","",N,N],[17,"NID_setCext_certType","","",N,N],[17,"NID_setCext_merchData","","",N,N],[17,"NID_setCext_cCertRequired","","",N,N],[17,"NID_setCext_tunneling","","",N,N],[17,"NID_setCext_setExt","","",N,N],[17,"NID_setCext_setQualf","","",N,N],[17,"NID_setCext_PGWYcapabilities","","",N,N],[17,"NID_setCext_TokenIdentifier","","",N,N],[17,"NID_setCext_Track2Data","","",N,N],[17,"NID_setCext_TokenType","","",N,N],[17,"NID_setCext_IssuerCapabilities","","",N,N],[17,"NID_setAttr_Cert","","",N,N],[17,"NID_setAttr_PGWYcap","","",N,N],[17,"NID_setAttr_TokenType","","",N,N],[17,"NID_setAttr_IssCap","","",N,N],[17,"NID_set_rootKeyThumb","","",N,N],[17,"NID_set_addPolicy","","",N,N],[17,"NID_setAttr_Token_EMV","","",N,N],[17,"NID_setAttr_Token_B0Prime","","",N,N],[17,"NID_setAttr_IssCap_CVM","","",N,N],[17,"NID_setAttr_IssCap_T2","","",N,N],[17,"NID_setAttr_IssCap_Sig","","",N,N],[17,"NID_setAttr_GenCryptgrm","","",N,N],[17,"NID_setAttr_T2Enc","","",N,N],[17,"NID_setAttr_T2cleartxt","","",N,N],[17,"NID_setAttr_TokICCsig","","",N,N],[17,"NID_setAttr_SecDevSig","","",N,N],[17,"NID_set_brand_IATA_ATA","","",N,N],[17,"NID_set_brand_Diners","","",N,N],[17,"NID_set_brand_AmericanExpress","","",N,N],[17,"NID_set_brand_JCB","","",N,N],[17,"NID_set_brand_Visa","","",N,N],[17,"NID_set_brand_MasterCard","","",N,N],[17,"NID_set_brand_Novus","","",N,N],[17,"NID_des_cdmf","","",N,N],[17,"NID_rsaOAEPEncryptionSET","","",N,N],[17,"NID_ipsec3","","",N,N],[17,"NID_ipsec4","","",N,N],[17,"NID_whirlpool","","",N,N],[17,"NID_cryptopro","","",N,N],[17,"NID_cryptocom","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_2001","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_94","","",N,N],[17,"NID_id_GostR3411_94","","",N,N],[17,"NID_id_HMACGostR3411_94","","",N,N],[17,"NID_id_GostR3410_2001","","",N,N],[17,"NID_id_GostR3410_94","","",N,N],[17,"NID_id_Gost28147_89","","",N,N],[17,"NID_gost89_cnt","","",N,N],[17,"NID_id_Gost28147_89_MAC","","",N,N],[17,"NID_id_GostR3411_94_prf","","",N,N],[17,"NID_id_GostR3410_2001DH","","",N,N],[17,"NID_id_GostR3410_94DH","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_KeyMeshing","","",N,N],[17,"NID_id_Gost28147_89_None_KeyMeshing","","",N,N],[17,"NID_id_GostR3411_94_TestParamSet","","",N,N],[17,"NID_id_GostR3411_94_CryptoProParamSet","","",N,N],[17,"NID_id_Gost28147_89_TestParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_D_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_TestParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_D_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchA_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchB_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchC_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_TestParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_a","","",N,N],[17,"NID_id_GostR3410_94_aBis","","",N,N],[17,"NID_id_GostR3410_94_b","","",N,N],[17,"NID_id_GostR3410_94_bBis","","",N,N],[17,"NID_id_Gost28147_89_cc","","",N,N],[17,"NID_id_GostR3410_94_cc","","",N,N],[17,"NID_id_GostR3410_2001_cc","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_94_cc","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_2001_cc","","",N,N],[17,"NID_id_GostR3410_2001_ParamSet_cc","","",N,N],[17,"NID_camellia_128_cbc","","",N,N],[17,"NID_camellia_192_cbc","","",N,N],[17,"NID_camellia_256_cbc","","",N,N],[17,"NID_id_camellia128_wrap","","",N,N],[17,"NID_id_camellia192_wrap","","",N,N],[17,"NID_id_camellia256_wrap","","",N,N],[17,"NID_camellia_128_ecb","","",N,N],[17,"NID_camellia_128_ofb128","","",N,N],[17,"NID_camellia_128_cfb128","","",N,N],[17,"NID_camellia_192_ecb","","",N,N],[17,"NID_camellia_192_ofb128","","",N,N],[17,"NID_camellia_192_cfb128","","",N,N],[17,"NID_camellia_256_ecb","","",N,N],[17,"NID_camellia_256_ofb128","","",N,N],[17,"NID_camellia_256_cfb128","","",N,N],[17,"NID_camellia_128_cfb1","","",N,N],[17,"NID_camellia_192_cfb1","","",N,N],[17,"NID_camellia_256_cfb1","","",N,N],[17,"NID_camellia_128_cfb8","","",N,N],[17,"NID_camellia_192_cfb8","","",N,N],[17,"NID_camellia_256_cfb8","","",N,N],[17,"NID_kisa","","",N,N],[17,"NID_seed_ecb","","",N,N],[17,"NID_seed_cbc","","",N,N],[17,"NID_seed_cfb128","","",N,N],[17,"NID_seed_ofb128","","",N,N],[17,"NID_hmac","","",N,N],[17,"NID_cmac","","",N,N],[17,"NID_rc4_hmac_md5","","",N,N],[17,"NID_aes_128_cbc_hmac_sha1","","",N,N],[17,"NID_aes_192_cbc_hmac_sha1","","",N,N],[17,"NID_aes_256_cbc_hmac_sha1","","",N,N],[17,"OCSP_NOCERTS","","",N,N],[17,"OCSP_NOINTERN","","",N,N],[17,"OCSP_NOSIGS","","",N,N],[17,"OCSP_NOCHAIN","","",N,N],[17,"OCSP_NOVERIFY","","",N,N],[17,"OCSP_NOEXPLICIT","","",N,N],[17,"OCSP_NOCASIGN","","",N,N],[17,"OCSP_NODELEGATED","","",N,N],[17,"OCSP_NOCHECKS","","",N,N],[17,"OCSP_TRUSTOTHER","","",N,N],[17,"OCSP_RESPID_KEY","","",N,N],[17,"OCSP_NOTIME","","",N,N],[17,"V_OCSP_CERTSTATUS_GOOD","","",N,N],[17,"V_OCSP_CERTSTATUS_REVOKED","","",N,N],[17,"V_OCSP_CERTSTATUS_UNKNOWN","","",N,N],[17,"OCSP_REVOKED_STATUS_NOSTATUS","","",N,N],[17,"OCSP_REVOKED_STATUS_UNSPECIFIED","","",N,N],[17,"OCSP_REVOKED_STATUS_KEYCOMPROMISE","","",N,N],[17,"OCSP_REVOKED_STATUS_CACOMPROMISE","","",N,N],[17,"OCSP_REVOKED_STATUS_AFFILIATIONCHANGED","","",N,N],[17,"OCSP_REVOKED_STATUS_SUPERSEDED","","",N,N],[17,"OCSP_REVOKED_STATUS_CESSATIONOFOPERATION","","",N,N],[17,"OCSP_REVOKED_STATUS_CERTIFICATEHOLD","","",N,N],[17,"OCSP_REVOKED_STATUS_REMOVEFROMCRL","","",N,N],[17,"OCSP_RESPONSE_STATUS_SUCCESSFUL","","",N,N],[17,"OCSP_RESPONSE_STATUS_MALFORMEDREQUEST","","",N,N],[17,"OCSP_RESPONSE_STATUS_INTERNALERROR","","",N,N],[17,"OCSP_RESPONSE_STATUS_TRYLATER","","",N,N],[17,"OCSP_RESPONSE_STATUS_SIGREQUIRED","","",N,N],[17,"OCSP_RESPONSE_STATUS_UNAUTHORIZED","","",N,N],[17,"OPENSSL_EC_NAMED_CURVE","","",N,N],[17,"PKCS5_SALT_LEN","","",N,N],[17,"PKCS12_DEFAULT_ITER","","",N,N],[17,"RSA_F4","","",N,N],[17,"RSA_PKCS1_PADDING","","",N,N],[17,"RSA_SSLV23_PADDING","","",N,N],[17,"RSA_NO_PADDING","","",N,N],[17,"RSA_PKCS1_OAEP_PADDING","","",N,N],[17,"RSA_X931_PADDING","","",N,N],[17,"RSA_PKCS1_PSS_PADDING","","",N,N],[17,"SHA_LBLOCK","","",N,N],[17,"SSL3_AD_ILLEGAL_PARAMETER","","",N,N],[17,"SSL_AD_ILLEGAL_PARAMETER","","",N,N],[17,"TLS1_AD_DECODE_ERROR","","",N,N],[17,"SSL_AD_DECODE_ERROR","","",N,N],[17,"TLS1_AD_UNRECOGNIZED_NAME","","",N,N],[17,"SSL_AD_UNRECOGNIZED_NAME","","",N,N],[17,"SSL_CTRL_SET_TMP_DH","","",N,N],[17,"SSL_CTRL_SET_TMP_ECDH","","",N,N],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",N,N],[17,"SSL_CTRL_MODE","","",N,N],[17,"SSL_CTRL_SET_READ_AHEAD","","",N,N],[17,"SSL_CTRL_SET_SESS_CACHE_MODE","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE","","",N,N],[17,"SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP","","",N,N],[17,"SSL_CTRL_GET_EXTRA_CHAIN_CERTS","","",N,N],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",N,N],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",N,N],[17,"SSL_MODE_AUTO_RETRY","","",N,N],[17,"SSL_MODE_NO_AUTO_CHAIN","","",N,N],[17,"SSL_MODE_RELEASE_BUFFERS","","",N,N],[17,"SSL_ERROR_NONE","","",N,N],[17,"SSL_ERROR_SSL","","",N,N],[17,"SSL_ERROR_SYSCALL","","",N,N],[17,"SSL_ERROR_WANT_ACCEPT","","",N,N],[17,"SSL_ERROR_WANT_CONNECT","","",N,N],[17,"SSL_ERROR_WANT_READ","","",N,N],[17,"SSL_ERROR_WANT_WRITE","","",N,N],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",N,N],[17,"SSL_ERROR_ZERO_RETURN","","",N,N],[17,"SSL_VERIFY_NONE","","",N,N],[17,"SSL_VERIFY_PEER","","",N,N],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",N,N],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",N,N],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",N,N],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",N,N],[17,"SSL_OP_ALL","","",N,N],[17,"SSL_OP_NO_QUERY_MTU","","",N,N],[17,"SSL_OP_COOKIE_EXCHANGE","","",N,N],[17,"SSL_OP_NO_TICKET","","",N,N],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",N,N],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",N,N],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",N,N],[17,"SSL_OP_NO_TLSv1","","",N,N],[17,"SSL_OP_NO_TLSv1_1","","",N,N],[17,"SSL_OP_NO_TLSv1_2","","",N,N],[17,"SSL_FILETYPE_PEM","","",N,N],[17,"SSL_FILETYPE_ASN1","","",N,N],[17,"SSL_SESS_CACHE_OFF","","",N,N],[17,"SSL_SESS_CACHE_CLIENT","","",N,N],[17,"SSL_SESS_CACHE_SERVER","","",N,N],[17,"SSL_SESS_CACHE_BOTH","","",N,N],[17,"SSL_SESS_CACHE_NO_AUTO_CLEAR","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL_LOOKUP","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL_STORE","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL","","",N,N],[17,"SSL3_VERSION","","",N,N],[17,"TLS1_VERSION","","",N,N],[17,"TLS1_1_VERSION","","",N,N],[17,"TLS1_2_VERSION","","",N,N],[17,"TLSEXT_NAMETYPE_host_name","","",N,N],[17,"TLSEXT_STATUSTYPE_ocsp","","",N,N],[17,"SSL_TLSEXT_ERR_OK","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",N,N],[17,"SSL_TLSEXT_ERR_NOACK","","",N,N],[17,"OPENSSL_NPN_UNSUPPORTED","","",N,N],[17,"OPENSSL_NPN_NEGOTIATED","","",N,N],[17,"OPENSSL_NPN_NO_OVERLAP","","",N,N],[17,"V_ASN1_GENERALIZEDTIME","","",N,N],[17,"V_ASN1_UTCTIME","","",N,N],[17,"X509_FILETYPE_ASN1","","",N,N],[17,"X509_FILETYPE_DEFAULT","","",N,N],[17,"X509_FILETYPE_PEM","","",N,N],[17,"X509_V_OK","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",N,N],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_OUT_OF_MEM","","",N,N],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",N,N],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",N,N],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",N,N],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",N,N],[17,"X509_V_ERR_CERT_REVOKED","","",N,N],[17,"X509_V_ERR_INVALID_CA","","",N,N],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_INVALID_PURPOSE","","",N,N],[17,"X509_V_ERR_CERT_UNTRUSTED","","",N,N],[17,"X509_V_ERR_CERT_REJECTED","","",N,N],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",N,N],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",N,N],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_NON_CA","","",N,N],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",N,N],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",N,N],[17,"X509_V_ERR_INVALID_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",N,N],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",N,N],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",N,N],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",N,N],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",N,N],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",N,N],[17,"X509_V_ERR_SUBTREE_MINMAX","","",N,N],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",N,N],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",N,N],[17,"GEN_OTHERNAME","","",N,N],[17,"GEN_EMAIL","","",N,N],[17,"GEN_DNS","","",N,N],[17,"GEN_X400","","",N,N],[17,"GEN_DIRNAME","","",N,N],[17,"GEN_EDIPARTY","","",N,N],[17,"GEN_URI","","",N,N],[17,"GEN_IPADD","","",N,N],[17,"GEN_RID","","",N,N],[17,"DTLS1_COOKIE_LENGTH","","",N,N],[11,"clone","","",34,[[["self"]],["point_conversion_form_t"]]]],"paths":[[3,"stack_st_ASN1_OBJECT"],[3,"stack_st_X509"],[3,"stack_st_X509_NAME"],[3,"stack_st_X509_ATTRIBUTE"],[3,"stack_st_X509_EXTENSION"],[3,"stack_st_GENERAL_NAME"],[3,"stack_st_void"],[3,"stack_st_SSL_CIPHER"],[3,"stack_st_OPENSSL_STRING"],[3,"_STACK"],[3,"BIO_METHOD"],[3,"RSA"],[3,"DSA"],[3,"ECDSA_SIG"],[3,"EVP_PKEY"],[3,"BIO"],[3,"CRYPTO_EX_DATA"],[3,"EVP_CIPHER"],[3,"BIGNUM"],[3,"DH"],[3,"X509"],[3,"X509_CINF"],[3,"X509_ALGOR"],[3,"ASN1_ENCODING"],[3,"X509_VAL"],[3,"X509_REQ_INFO"],[3,"X509_REQ"],[3,"SSL"],[3,"SSL_CTX"],[3,"SSL_SESSION"],[3,"GENERAL_NAME"],[3,"SHA_CTX"],[3,"SHA256_CTX"],[3,"SHA512_CTX"],[4,"point_conversion_form_t"]]};
searchIndex["pad"]={"doc":"This is a library for padding strings at runtime.","items":[[4,"Alignment","pad","An alignment tells the padder where to put the spaces.",N,N],[13,"Left","","Text on the left, spaces on the right.",0,N],[13,"Right","","Text on the right, spaces on the left.",0,N],[13,"Middle","","Text in the middle, spaces around it, but shifted to the left if it can't be exactly central.",0,N],[13,"MiddleRight","","Text in the middle, spaces around it, but shifted to the right if it can't be exactly central.",0,N],[8,"PadStr","","Functions to do with string padding.",N,N],[11,"pad_to_width","","Pad a string to be at least the given width by adding spaces on the right.",1,[[["self"],["usize"]],["string"]]],[11,"pad_to_width_with_char","","Pad a string to be at least the given width by adding the given character on the right.",1,[[["self"],["usize"],["char"]],["string"]]],[11,"pad_to_width_with_alignment","","Pad a string to be at least the given with by adding spaces around it.",1,[[["self"],["usize"],["alignment"]],["string"]]],[11,"with_exact_width","","Pad a string to be exactly the given width by either adding spaces on the right, or by truncating it to that width.",1,[[["self"],["usize"]],["string"]]],[10,"pad","","Pad a string to the given width somehow.",1,[[["self"],["usize"],["char"],["alignment"],["bool"]],["string"]]],[11,"eq","","",0,[[["self"],["alignment"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["alignment"]]]],"paths":[[4,"Alignment"],[8,"PadStr"]]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",N,N],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",N,N],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",N,N],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",N,N],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",N,N],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",N,N],[3,"PercentDecode","","The return type of `percent_decode()`.",N,N],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",N,[[["u8"]],["str"]]],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",N,N],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",N,[[["str"],["e"]],["percentencode"]]],[5,"percent_decode","","Percent-decode the given bytes.",N,N],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",N,N],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,[[["self"],["u8"]],["bool"]]],[11,"clone","","",1,[[["self"]],["simple_encode_set"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"contains","","",1,[[["self"],["u8"]],["bool"]]],[11,"clone","","",2,[[["self"]],["query_encode_set"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"contains","","",2,[[["self"],["u8"]],["bool"]]],[11,"clone","","",3,[[["self"]],["default_encode_set"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"contains","","",3,[[["self"],["u8"]],["bool"]]],[11,"clone","","",4,[[["self"]],["path_segment_encode_set"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"contains","","",4,[[["self"],["u8"]],["bool"]]],[11,"clone","","",5,[[["self"]],["userinfo_encode_set"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"contains","","",5,[[["self"],["u8"]],["bool"]]],[11,"clone","","",6,[[["self"]],["percentencode"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["str"]]]],[11,"size_hint","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["percentdecode"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"next","","",7,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",7,N],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,[[["self"]],["option",["vec"]]]],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,[[["self"]],["result",["cow","utf8error"]]]],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,[[["self"]],["cow",["str"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["phf"]={"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",N,N],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,N],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,N],[3,"Map","","An immutable map constructed at compile time.",N,N],[3,"Set","","An immutable set constructed at compile time.",N,N],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",N,N],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",N,N],[0,"map","","An immutable map constructed at compile time.",N,N],[3,"Map","phf::map","An immutable map constructed at compile time.",N,N],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",N,N],[3,"Keys","","An iterator over the keys in a `Map`.",N,N],[3,"Values","","An iterator over the values in a `Map`.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"index","","",1,[[["self"],["t"]],["v"]]],[11,"is_empty","","Returns true if the `Map` is empty.",1,[[["self"]],["bool"]]],[11,"len","","Returns the number of entries in the `Map`.",1,[[["self"]],["usize"]]],[11,"contains_key","","Determines if `key` is in the `Map`.",1,[[["self"],["t"]],["bool"]]],[11,"get","","Returns a reference to the value that `key` maps to.",1,[[["self"],["t"]],["option"]]],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,[[["self"],["t"]],["option"]]],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,[[["self"],["t"]],["option"]]],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,[[["self"]],["entries"]]],[11,"keys","","Returns an iterator over the keys in the map.",1,[[["self"]],["keys"]]],[11,"values","","Returns an iterator over the values in the map.",1,[[["self"]],["values"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[0,"set","phf","An immutable set constructed at compile time.",N,N],[3,"Set","phf::set","An immutable set constructed at compile time.",N,N],[3,"Iter","","An iterator over the values in a `Set`.",N,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"len","","Returns the number of elements in the `Set`.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,[[["self"]],["bool"]]],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,[[["self"],["u"]],["option"]]],[11,"contains","","Returns true if `value` is in the `Set`.",5,[[["self"],["u"]],["bool"]]],[11,"iter","","Returns an iterator over the values in the set.",5,[[["self"]],["iter"]]],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,[[["self"],["set"]],["bool"]]],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,[[["self"],["set"]],["bool"]]],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,[[["self"],["set"]],["bool"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",N,N],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",N,N],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",N,N],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",N,N],[3,"Values","","An iterator over the values in a `OrderedMap`.",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"index","","",7,[[["self"],["t"]],["v"]]],[11,"len","","Returns the number of entries in the `Map`.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Map` is empty.",7,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the value that `key` maps to.",7,[[["self"],["t"]],["option"]]],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,[[["self"],["t"]],["option"]]],[11,"contains_key","","Determines if `key` is in the `Map`.",7,[[["self"],["t"]],["bool"]]],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,[[["self"],["t"]],["option",["usize"]]]],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,[[["self"],["usize"]],["option"]]],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,[[["self"],["t"]],["option"]]],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,[[["self"]],["entries"]]],[11,"keys","","Returns an iterator over the keys in the map.",7,[[["self"]],["keys"]]],[11,"values","","Returns an iterator over the values in the map.",7,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",N,N],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",N,N],[3,"Iter","","An iterator over the values in a `OrderedSet`.",N,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,[[["self"]],["bool"]]],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,[[["self"],["u"]],["option"]]],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,[[["self"],["u"]],["option",["usize"]]]],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,[[["self"],["usize"]],["option"]]],[11,"contains","","Returns true if `value` is in the `Set`.",11,[[["self"],["u"]],["bool"]]],[11,"iter","","Returns an iterator over the values in the set.",11,[[["self"]],["iter"]]],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,[[["self"],["orderedset"]],["bool"]]],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,[[["self"],["orderedset"]],["bool"]]],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,[[["self"],["orderedset"]],["bool"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"]={"doc":"","items":[[5,"displace","phf_shared","",N,[[["u32"],["u32"],["u32"],["u32"]],["u32"]]],[5,"split","","",N,N],[5,"hash","","`key` is from `phf_generator::HashState::key`.",N,[[["t"],["u64"]],["u64"]]],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",N,N],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",N,N],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,[[["self"],["h"]]]],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,N]],"paths":[[8,"PhfHash"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",3,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",4,[[["self"]],["intoiter"]]],[11,"clone","","",4,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,[[],["tokenstream"]]],[11,"empty","","",4,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"from_str","","",4,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",4,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"from_iter","","",4,[[["i"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",6,[[],["span"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[3,"IsaacRng","rand","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[3,"XorShiftRng","","An Xorshift[1] random number generator.",N,N],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",N,N],[12,"0","","",0,N],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",N,N],[12,"0","","",1,N],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",N,N],[3,"ThreadRng","","The thread-local RNG.",N,N],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",N,[[],["xorshiftrng"]]],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",N,[[],["threadrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Sampling from random distributions.",N,N],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",2,N],[12,"item","","The actual item which is being weighted",2,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[0,"range","","Generating numbers between two others.",N,N],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",N,N],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",N,N],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,[[["self"],["self"]],["range"]]],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,[[["range"],["r"]],["self"]]],[11,"clone","","",4,[[["self"]],["range"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,[[["x"],["x"]],["range"]]],[11,"sample","","",4,[[["self"],["r"]],["sup"]]],[11,"ind_sample","","",4,[[["self"],["r"]],["sup"]]],[0,"gamma","rand::distributions","The Gamma and derived distributions.",N,N],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[11,"clone","","",5,[[["self"]],["gamma"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,[[["f64"],["f64"]],["gamma"]]],[11,"sample","","",5,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",5,[[["self"],["r"]],["f64"]]],[11,"clone","","",6,[[["self"]],["chisquared"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,[[["f64"]],["chisquared"]]],[11,"sample","","",6,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",6,[[["self"],["r"]],["f64"]]],[11,"clone","","",7,[[["self"]],["fisherf"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,[[["f64"],["f64"]],["fisherf"]]],[11,"sample","","",7,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",7,[[["self"],["r"]],["f64"]]],[11,"clone","","",8,[[["self"]],["studentt"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,[[["f64"]],["studentt"]]],[11,"sample","","",8,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",8,[[["self"],["r"]],["f64"]]],[0,"normal","rand::distributions","The normal and derived distributions.",N,N],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",N,N],[12,"0","","",9,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[11,"clone","","",9,[[["self"]],["standardnormal"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"rand","","",9,[[["r"]],["standardnormal"]]],[11,"clone","","",10,[[["self"]],["normal"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,[[["f64"],["f64"]],["normal"]]],[11,"sample","","",10,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",10,[[["self"],["r"]],["f64"]]],[11,"clone","","",11,[[["self"]],["lognormal"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,[[["f64"],["f64"]],["lognormal"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",11,[[["self"],["r"]],["f64"]]],[0,"exponential","rand::distributions","The exponential distribution.",N,N],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",N,N],[12,"0","","",12,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[11,"clone","","",12,[[["self"]],["exp1"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"rand","","",12,[[["r"]],["exp1"]]],[11,"clone","","",13,[[["self"]],["exp"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,[[["f64"]],["exp"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",13,[[["self"],["r"]],["f64"]]],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",15,[[["self"],["r"]],["support"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"sample","","",16,[[["self"],["r"]],["sup"]]],[11,"ind_sample","","",16,[[["self"],["r"]],["sup"]]],[11,"new","","",16,[[],["randsample"]]],[11,"clone","","",2,[[["self"]],["weighted"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `WeightedChoice`.",17,N],[11,"sample","","",17,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",17,[[["self"],["r"]],["t"]]],[0,"jitter","rand","Non-physical true random number generator based on timing jitter.",N,N],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",N,N],[4,"TimerError","","An error that can occur when `test_timer` fails.",N,N],[13,"NoTimer","","No timer available.",18,N],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",18,N],[13,"NotMonotonic","","Timer is not monotonically increasing.",18,N],[13,"TinyVariantions","","Variations of deltas of time too small.",18,N],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",18,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["timererror"]]],[11,"eq","","",18,[[["self"],["timererror"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"description","","",18,[[["self"]],["str"]]],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer.",19,[[],["result",["jitterrng","timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",19,N],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",19,[[["self"],["u32"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",19,[[["self"]],["result",["u32","timererror"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",19,[[["self"],["bool"]],["i64"]]],[11,"next_u32","","",19,[[["self"]],["u32"]]],[11,"next_u64","","",19,[[["self"]],["u64"]]],[11,"fill_bytes","","",19,N],[0,"os","rand","Interfaces to the operating system provided random number generators.",N,N],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[11,"new","","Create a new `OsRng`.",20,[[],["result",["osrng"]]]],[11,"next_u32","","",20,[[["self"]],["u32"]]],[11,"next_u64","","",20,[[["self"]],["u64"]]],[11,"fill_bytes","","",20,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",N,N],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",N,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReadRng` from a `Read`.",21,[[["r"]],["readrng"]]],[11,"next_u32","","",21,[[["self"]],["u32"]]],[11,"next_u64","","",21,[[["self"]],["u64"]]],[11,"fill_bytes","","",21,N],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",N,N],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",N,N],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",22,N],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",N,N],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",N,N],[10,"reseed","","Reseed the given RNG.",23,[[["self"],["r"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReseedingRng` with the given parameters.",22,[[["r"],["u64"],["rsdr"]],["reseedingrng"]]],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",22,[[["self"]]]],[11,"next_u32","","",22,[[["self"]],["u32"]]],[11,"next_u64","","",22,[[["self"]],["u64"]]],[11,"fill_bytes","","",22,N],[11,"reseed","","",22,N],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",22,N],[11,"clone","","",24,[[["self"]],["reseedwithdefault"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"reseed","","",24,[[["self"],["r"]]]],[11,"default","","",24,[[],["reseedwithdefault"]]],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",N,N],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",N,[[["r"],["i"],["usize"]],["result",["vec","vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",N,N],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",N,N],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",N,[[["r"],["usize"],["usize"]],["vec",["usize"]]]],[0,"chacha","rand","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"isaac","rand","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[11,"rand","rand","",0,[[["r"]],["open01",["f64"]]]],[11,"rand","","",1,[[["r"]],["closed01",["f64"]]]],[11,"rand","","",0,[[["r"]],["open01",["f32"]]]],[11,"rand","","",1,[[["r"]],["closed01",["f32"]]]],[11,"clone","","",25,[[["self"]],["chacharng"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",25,[[],["chacharng"]]],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",25,[[["self"],["u64"],["u64"]]]],[11,"next_u32","","",25,[[["self"]],["u32"]]],[11,"reseed","","",25,N],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",25,N],[11,"rand","","",25,[[["r"]],["chacharng"]]],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",26,[[],["isaacrng"]]],[11,"clone","","",26,[[["self"]],["isaacrng"]]],[11,"next_u32","","",26,[[["self"]],["u32"]]],[11,"reseed","","",26,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",26,N],[11,"rand","","",26,[[["r"]],["isaacrng"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,[[],["isaac64rng"]]],[11,"clone","","",27,[[["self"]],["isaac64rng"]]],[11,"next_u32","","",27,[[["self"]],["u32"]]],[11,"next_u64","","",27,[[["self"]],["u64"]]],[11,"reseed","","",27,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,N],[11,"rand","","",27,[[["r"]],["isaac64rng"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["xorshiftrng"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",28,[[],["xorshiftrng"]]],[11,"next_u32","","",28,[[["self"]],["u32"]]],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",28,N],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",28,N],[11,"rand","","",28,[[["r"]],["xorshiftrng"]]],[8,"Rand","","A type that can be randomly generated using an `Rng`.",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",29,[[["r"]],["self"]]],[8,"Rng","","A random number generator.",N,N],[10,"next_u32","","Return the next random u32.",30,[[["self"]],["u32"]]],[11,"next_u64","","Return the next random u64.",30,[[["self"]],["u64"]]],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",30,[[["self"]],["f32"]]],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",30,[[["self"]],["f64"]]],[11,"fill_bytes","","Fill `dest` with random data.",30,N],[11,"gen","","Return a random value of a `Rand` type.",30,[[["self"]],["t"]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",30,[[["self"]],["generator"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",30,[[["self"],["t"],["t"]],["t"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",30,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",30,[[["self"]],["asciigenerator"]]],[11,"choose","","Return a random element from `values`.",30,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",30,N],[11,"shuffle","","Shuffle a mutable slice in place.",30,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",N,N],[10,"reseed","","Reseed an RNG with the given seed.",31,[[["self"],["seed"]]]],[10,"from_seed","","Create a new RNG with the given seed.",31,[[["seed"]],["self"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"next","","",33,[[["self"]],["option",["char"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["stdrng"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,[[],["result",["stdrng"]]]],[11,"next_u32","","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"reseed","","",34,N],[11,"from_seed","","",34,N],[11,"clone","","",35,[[["self"]],["threadrng"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",35,[[["self"]],["u32"]]],[11,"next_u64","","",35,[[["self"]],["u64"]]],[11,"fill_bytes","","",35,N]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[4,"TimerError"],[3,"JitterRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","regex","",1,[[["self"]],["error"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","","",8,[[["self"]],["match"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["match"]],["bool"]]],[11,"ne","","",8,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,N],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",9,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,N],[11,"shortest_match","","Returns the end location of a match in the text given.",9,N],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,N],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,N],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,N],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,N],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,N],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,[[["self"]],["capturelocations"]]],[11,"next","","",10,[[["self"]],["option",["match"]]]],[11,"next","","",11,[[["self"]],["option",["captures"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option",["option"]]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["capturelocations"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",15,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",15,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",16,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",16,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",16,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",16,N],[11,"len","","Returns the number of captured groups.",16,[[["self"]],["usize"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"index","","",16,N],[11,"index","","",16,N],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",18,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",18,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"clone","regex","",19,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",19,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",19,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",19,[[["self"]],["usize"]]],[11,"clone","","",20,[[["self"]],["setmatches"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",20,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",20,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",20,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",20,N],[11,"next","","",21,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",21,N],[11,"next_back","","",21,[[["self"]],["option",["usize"]]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",22,N],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","regex::bytes","",23,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",23,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",23,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,N],[11,"len","","Returns the total number of regular expressions in this set.",23,[[["self"]],["usize"]]],[11,"clone","","",24,[[["self"]],["setmatches"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",24,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",24,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",24,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",24,N],[11,"next","","",25,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",25,N],[11,"next_back","","",25,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",26,N],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","regex","",27,[[["self"]],["match"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["match"]],["bool"]]],[11,"ne","","",27,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",27,[[["self"]],["str"]]],[11,"clone","","",28,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",28,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",28,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",28,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",28,[[["self"],["str"]],["option",["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",28,[[["self"],["str"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",28,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",28,[[["self"],["str"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",28,[[["self"],["str"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",28,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",28,[[["self"],["str"],["usize"],["r"]],["cow",["str"]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",28,[[["self"],["str"]],["option",["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",28,[[["self"],["capturelocations"],["str"]],["option",["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",28,[[["self"],["capturelocations"],["str"],["usize"]],["option",["match"]]]],[11,"as_str","","Returns the original string of this regex.",28,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",28,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",28,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",28,[[["self"]],["capturelocations"]]],[11,"next","","",29,[[["self"]],["option",["option"]]]],[11,"size_hint","","",29,N],[11,"next","","",30,[[["self"]],["option",["str"]]]],[11,"next","","",31,[[["self"]],["option",["str"]]]],[11,"clone","","",32,[[["self"]],["capturelocations"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",32,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",32,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",33,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",33,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",33,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",33,[[["self"],["str"],["string"]]]],[11,"len","","Returns the number of captured groups.",33,[[["self"]],["usize"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"index","","",33,[[["self"],["usize"]],["str"]]],[11,"index","","",33,[[["self"],["str"]],["str"]]],[11,"next","","",34,[[["self"]],["option",["option"]]]],[11,"next","","",35,[[["self"]],["option",["captures"]]]],[11,"next","","",36,[[["self"]],["option",["match"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",37,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",37,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",0,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],["option",["cow"]]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",38,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"clone","","",42,[[["self"]],["parserbuilder"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"clone","","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",46,[[["self"]],["str"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",1,[[["self"],["span"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"drop","","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"clone","","",58,[[["self"]],["literals"]]],[11,"eq","","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"cmp","","",59,[[["self"],["literal"]],["ordering"]]],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",59,N],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"clone","","",61,[[["self"]],["translatorbuilder"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["translatorbuilder"]]],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"clone","","",64,[[["self"]],["error"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",64,[[["self"]],["str"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"next","","",67,[[["self"]],["option",["classunicoderange"]]]],[11,"clone","","",68,[[["self"]],["classunicoderange"]]],[11,"default","","",68,[[],["classunicoderange"]]],[11,"eq","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"cmp","","",68,[[["self"],["classunicoderange"]],["ordering"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Unicode scalar value range for a character class.",68,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",68,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",68,[[["self"]],["char"]]],[11,"clone","","",69,[[["self"]],["classbytes"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",69,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",69,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",69,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",69,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",69,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,[[["self"]]]],[11,"negate","","Negate this byte class.",69,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"next","","",70,[[["self"]],["option",["classbytesrange"]]]],[11,"clone","","",71,[[["self"]],["classbytesrange"]]],[11,"default","","",71,[[],["classbytesrange"]]],[11,"eq","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"cmp","","",71,[[["self"],["classbytesrange"]],["ordering"]]],[11,"new","","Create a new byte range for a character class.",71,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",71,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",71,[[["self"]],["u8"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"drop","","",65,[[["self"]]]],[11,"clone","regex_syntax","",72,[[["self"]],["parserbuilder"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"default","","",72,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",72,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",72,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",72,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",73,[[["self"]],["parser"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",73,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["relay"]={"doc":"relay","items":[[3,"Sender","relay","The Sender portion of a channel.",N,N],[3,"Receiver","","The receiver end of the channel.",N,N],[3,"Waiting","","A `Future` waiting for interest to be registered on the `Receiver`.",N,N],[3,"Canceled","","Represents that the `Sender` dropped before sending a message.",N,N],[5,"channel","","Create a new channel to send a message.",N,N],[11,"complete","","Sends the message to the `Receiver`.",0,[[["self"],["t"]]]],[11,"is_canceled","","Returns true if the `Receiver` has been dropped.",0,[[["self"]],["bool"]]],[11,"waiting","","Creates a `Future` that waits until someone is waiting on the `Receiver`.",0,[[["self"]],["waiting"]]],[11,"drop","","",0,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_canceled","","Returns true if the `Sender` was dropped without sending a message.",1,[[["self"]],["bool"]]],[11,"try_recv","","Tries to receive the value if completed.",1,[[["self"]],["result",["option","canceled"]]]],[11,"poll","","",1,[[["self"]],["poll"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["canceled"]]],[11,"eq","","",3,[[["self"],["canceled"]],["bool"]]]],"paths":[[3,"Sender"],[3,"Receiver"],[3,"Waiting"],[3,"Canceled"]]};
searchIndex["reqwest"]={"doc":"reqwest","items":[[0,"header","reqwest","Headers container, and common header fields.",N,N],[0,"parsing","reqwest::header","Utility functions for Header implementations.",N,N],[5,"from_one_raw_str","reqwest::header::parsing","Reads a single raw string when parsing a header.",N,[[["raw"]],["result",["error"]]]],[5,"from_raw_str","","Reads a raw string into a value.",N,N],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",N,[[["raw"]],["result",["vec","error"]]]],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",N,N],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",N,N],[12,"charset","","The character set that is used to encode the `value` to a string.",0,N],[12,"language_tag","","The human language details of the `value`, if available.",0,N],[12,"value","","The parameter value, as expressed in octets.",0,N],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",N,[[["str"]],["result",["extendedvalue","error"]]]],[5,"http_percent_encode","","Percent encode a sequence of bytes with a character set defined in [https://tools.ietf.org/html/rfc5987#section-3.2][url]",N,N],[8,"Header","reqwest::header","A trait for any object that will represent a header field and value.",N,N],[10,"header_name","","Returns the name of the header field this belongs to.",1,[[],["str"]]],[10,"parse_header","","Parse a header from a raw stream of bytes.",1,[[["raw"]],["result",["error"]]]],[10,"fmt_header","","Format a header to outgoing stream.",1,[[["self"],["formatter"]],["result",["error"]]]],[3,"Formatter","","A formatter used to serialize headers to an output stream.",N,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",N,N],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",N,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",2,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",3,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",4,N],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",N,N],[13,"Alternate","","alternate.",5,N],[13,"Appendix","","appendix.",5,N],[13,"Bookmark","","bookmark.",5,N],[13,"Chapter","","chapter.",5,N],[13,"Contents","","contents.",5,N],[13,"Copyright","","copyright.",5,N],[13,"Current","","current.",5,N],[13,"DescribedBy","","describedby.",5,N],[13,"Edit","","edit.",5,N],[13,"EditMedia","","edit-media.",5,N],[13,"Enclosure","","enclosure.",5,N],[13,"First","","first.",5,N],[13,"Glossary","","glossary.",5,N],[13,"Help","","help.",5,N],[13,"Hub","","hub.",5,N],[13,"Index","","index.",5,N],[13,"Last","","last.",5,N],[13,"LatestVersion","","latest-version.",5,N],[13,"License","","license.",5,N],[13,"Next","","next.",5,N],[13,"NextArchive","","next-archive.",5,N],[13,"Payment","","payment.",5,N],[13,"Prev","","prev.",5,N],[13,"PredecessorVersion","","predecessor-version.",5,N],[13,"Previous","","previous.",5,N],[13,"PrevArchive","","prev-archive.",5,N],[13,"Related","","related.",5,N],[13,"Replies","","replies.",5,N],[13,"Section","","section.",5,N],[13,"RelationTypeSelf","","self.",5,N],[13,"Service","","service.",5,N],[13,"Start","","start.",5,N],[13,"Stylesheet","","stylesheet.",5,N],[13,"Subsection","","subsection.",5,N],[13,"SuccessorVersion","","successor-version.",5,N],[13,"Up","","up.",5,N],[13,"VersionHistory","","versionHistory.",5,N],[13,"Via","","via.",5,N],[13,"WorkingCopy","","working-copy.",5,N],[13,"WorkingCopyOf","","working-copy-of.",5,N],[13,"ExtRelType","","ext-rel-type.",5,N],[3,"Origin","","The `Origin` header.",N,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",6,N],[13,"Items","","Only the listed items are a match",6,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",7,N],[12,"quality","","The quality (client or server preference) for the value.",7,N],[3,"Te","","`TE` header, defined in RFC7230",N,N],[12,"0","","",8,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",9,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",10,N],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",N,N],[4,"ProtocolName","","A protocol name used to identify a specific protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",11,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",11,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",11,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",11,N],[13,"Unregistered","","Any other protocol name not known to hyper",11,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",12,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",12,N],[8,"Scheme","","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",13,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",13,[[["self"],["formatter"]],["result",["error"]]]],[3,"LanguageTag","","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",14,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",14,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",14,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",14,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",14,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",14,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",14,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",15,N],[13,"Iso_8859_1","","ISO-8859-1",15,N],[13,"Iso_8859_2","","ISO-8859-2",15,N],[13,"Iso_8859_3","","ISO-8859-3",15,N],[13,"Iso_8859_4","","ISO-8859-4",15,N],[13,"Iso_8859_5","","ISO-8859-5",15,N],[13,"Iso_8859_6","","ISO-8859-6",15,N],[13,"Iso_8859_7","","ISO-8859-7",15,N],[13,"Iso_8859_8","","ISO-8859-8",15,N],[13,"Iso_8859_9","","ISO-8859-9",15,N],[13,"Iso_8859_10","","ISO-8859-10",15,N],[13,"Shift_Jis","","Shift_JIS",15,N],[13,"Euc_Jp","","EUC-JP",15,N],[13,"Iso_2022_Kr","","ISO-2022-KR",15,N],[13,"Euc_Kr","","EUC-KR",15,N],[13,"Iso_2022_Jp","","ISO-2022-JP",15,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",15,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",15,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",15,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",15,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",15,N],[13,"Gb2312","","GB2312",15,N],[13,"Big5","","Big5",15,N],[13,"Koi8_R","","KOI8-R",15,N],[13,"Ext","","An arbitrary charset specified as a string",15,N],[5,"q","","Convenience function to create a `Quality` from a float or integer.",N,[[["t"]],["quality"]]],[4,"DispositionType","","The implied disposition of the content of the HTTP body.",N,N],[13,"Inline","","Inline implies default processing",16,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",16,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",16,N],[3,"Server","","`Server` header, defined in RFC7231",N,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",17,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",18,N],[13,"Ext","","Every value other than `no-cache`.",18,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",19,N],[13,"Date","","The date when the client retrieved the resource",19,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",20,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",21,N],[3,"ProxyAuthorization","","`Proxy-Authorization` header, defined in RFC7235",N,N],[12,"0","","",22,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",23,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",24,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",24,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",25,N],[13,"Items","","Only the listed items are a match",25,N],[4,"DispositionParam","","A parameter to the disposition type.",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",26,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",26,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",27,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[3,"Cookie","","`Cookie` header, defined in RFC6265",N,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",28,N],[12,"range","reqwest::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",28,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",28,N],[13,"Unregistered","reqwest::header","Custom range, with unit not registered at IANA",28,N],[12,"unit","reqwest::header::ContentRangeSpec","other-range-unit",28,N],[12,"resp","","other-range-resp",28,N],[4,"AccessControlAllowOrigin","reqwest::header","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",29,N],[13,"Null","","A hidden origin",29,N],[13,"Value","","Allow one particular origin",29,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",30,N],[13,"ReturnRepresentation","","\"return=representation\"",30,N],[13,"ReturnMinimal","","\"return=minimal\"",30,N],[13,"HandlingStrict","","\"handling=strict\"",30,N],[13,"HandlingLenient","","\"handling=lenient\"",30,N],[13,"Wait","","\"wait=delta\"",30,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",30,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",31,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",31,N],[13,"Unregistered","","The given range unit is not registered at IANA.",31,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",32,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",33,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",34,N],[13,"Close","","The `close` connection value.",34,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",34,N],[3,"Raw","","A raw header value.",N,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",35,N],[3,"Warning","","`Warning` header, defined in RFC7234",N,N],[12,"code","","The 3 digit warn code.",36,N],[12,"agent","","The name or pseudonym of the server adding this header.",36,N],[12,"text","","The warning message describing the error.",36,N],[12,"date","","An optional warning date.",36,N],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",N,N],[12,"0","","",37,N],[3,"CookieIter","","Iterator for cookie.",N,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",38,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",39,N],[4,"RetryAfter","","The `Retry-After` header.",N,N],[13,"Delay","","Retry after this duration has elapsed",40,N],[13,"DateTime","","Retry after the given DateTime",40,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",41,N],[3,"Accept","","`Accept` header, defined in RFC7231",N,N],[12,"0","","",42,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",43,N],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",N,N],[12,"0","","",44,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",45,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",46,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",47,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input. Note: A compliant client MUST always send a password (which may be the empty string).",47,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",48,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",48,N],[13,"Last","","Get last x bytes (\"-x\")",48,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",49,N],[3,"LastEventId","","`Last-Event-ID` header, defined in RFC3864",N,N],[12,"0","","",50,N],[3,"EntityTag","","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",51,N],[3,"Host","","The `Host` header.",N,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",52,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",53,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",53,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",54,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",55,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",56,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[3,"HttpDate","","A timestamp with HTTP formatting and parsing",N,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",57,N],[13,"Brotli","","The `br` encoding.",57,N],[13,"Gzip","","The `gzip` encoding.",57,N],[13,"Deflate","","The `deflate` encoding.",57,N],[13,"Compress","","The `compress` encoding.",57,N],[13,"Identity","","The `identity` encoding.",57,N],[13,"Trailers","","The `trailers` encoding.",57,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",57,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",58,N],[13,"NoStore","","\"no-store\"",58,N],[13,"NoTransform","","\"no-transform\"",58,N],[13,"OnlyIfCached","","\"only-if-cached\"",58,N],[13,"MaxAge","","\"max-age=delta\"",58,N],[13,"MaxStale","","\"max-stale=delta\"",58,N],[13,"MinFresh","","\"min-fresh=delta\"",58,N],[13,"MustRevalidate","","\"must-revalidate\"",58,N],[13,"Public","","\"public\"",58,N],[13,"Private","","\"private\"",58,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",58,N],[13,"SMaxAge","","\"s-maxage=delta\"",58,N],[13,"Extension","","Extension directives. Optionally include an argument.",58,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",59,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",59,N],[13,"SameOrigin","","`same-origin`",59,N],[13,"Origin","","`origin`",59,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",59,N],[13,"UnsafeUrl","","`unsafe-url`",59,N],[13,"StrictOrigin","","`strict-origin`",59,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",59,N],[3,"Link","","The `Link` header, defined in RFC5988",N,N],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",60,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",61,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266.",N,N],[12,"disposition","","The disposition",62,N],[12,"parameters","","Disposition parameters",62,N],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",63,N],[4,"Expect","","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",64,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",65,N],[13,"Items","","Only the listed items are a match",65,N],[5,"qitem","","Convenience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",66,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",67,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",68,N],[4,"MediaDesc","","A Media Descriptors Enum based on: [https://www.w3.org/TR/html401/types.html#h-6.13][url]",N,N],[13,"Screen","","screen.",69,N],[13,"Tty","","tty.",69,N],[13,"Tv","","tv.",69,N],[13,"Projection","","projection.",69,N],[13,"Handheld","","handheld.",69,N],[13,"Print","","print.",69,N],[13,"Braille","","braille.",69,N],[13,"Aural","","aural.",69,N],[13,"All","","all.",69,N],[13,"Extension","","Unrecognized media descriptor extension.",69,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",70,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[3,"Mime","reqwest::mime","A parsed mime or media type.",N,N],[3,"Name","","A section of a `Mime`.",N,N],[3,"FromStrError","","An error when parsing a `Mime` from a string.",N,N],[3,"Params","","An iterator over the parameters of a MIME.",N,N],[17,"STAR","","",N,N],[17,"TEXT","","text",N,N],[17,"IMAGE","","image",N,N],[17,"AUDIO","","audio",N,N],[17,"VIDEO","","video",N,N],[17,"APPLICATION","","application",N,N],[17,"MULTIPART","","multipart",N,N],[17,"MESSAGE","","message",N,N],[17,"MODEL","","model",N,N],[17,"FONT","","font",N,N],[17,"PLAIN","","plain",N,N],[17,"HTML","","html",N,N],[17,"XML","","xml",N,N],[17,"JAVASCRIPT","","javascript",N,N],[17,"CSS","","css",N,N],[17,"CSV","","csv",N,N],[17,"EVENT_STREAM","","event-stream",N,N],[17,"JSON","","json",N,N],[17,"WWW_FORM_URLENCODED","","x-www-form-urlencoded",N,N],[17,"MSGPACK","","msgpack",N,N],[17,"OCTET_STREAM","","octet-stream",N,N],[17,"FORM_DATA","","form-data",N,N],[17,"PNG","","png",N,N],[17,"GIF","","gif",N,N],[17,"BMP","","bmp",N,N],[17,"JPEG","","jpeg",N,N],[17,"BASIC","","basic",N,N],[17,"MPEG","","mpeg",N,N],[17,"MP4","","mp4",N,N],[17,"OGG","","ogg",N,N],[17,"CHARSET","","charset",N,N],[17,"BOUNDARY","","boundary",N,N],[17,"UTF_8","","utf-8",N,N],[17,"STAR_STAR","","`*/*`",N,N],[17,"TEXT_STAR","","`text/*`",N,N],[17,"TEXT_PLAIN","","`text/plain`",N,N],[17,"TEXT_PLAIN_UTF_8","","`text/plain; charset=utf-8`",N,N],[17,"TEXT_HTML","","`text/html`",N,N],[17,"TEXT_HTML_UTF_8","","`text/html; charset=utf-8`",N,N],[17,"TEXT_CSS","","`text/css`",N,N],[17,"TEXT_JAVASCRIPT","","`text/javascript`",N,N],[17,"TEXT_XML","","`text/xml`",N,N],[17,"TEXT_EVENT_STREAM","","`text/event-stream`",N,N],[17,"TEXT_CSV","","`text/csv`",N,N],[17,"TEXT_CSV_UTF_8","","`text/csv; charset=utf-8`",N,N],[17,"TEXT_TAB_SEPARATED_VALUES","","`text/tab-separated-values`",N,N],[17,"TEXT_TAB_SEPARATED_VALUES_UTF_8","","`text/tab-separated-values; charset=utf-8`",N,N],[17,"IMAGE_STAR","","`image/*`",N,N],[17,"IMAGE_JPEG","","`image/jpeg`",N,N],[17,"IMAGE_GIF","","`image/gif`",N,N],[17,"IMAGE_PNG","","`image/png`",N,N],[17,"IMAGE_BMP","","`image/bmp`",N,N],[17,"IMAGE_SVG","","`image/svg+xml`",N,N],[17,"APPLICATION_JSON","","`application/json`",N,N],[17,"APPLICATION_JAVASCRIPT","","`application/javascript`",N,N],[17,"APPLICATION_JAVASCRIPT_UTF_8","","`application/javascript; charset=utf-8`",N,N],[17,"APPLICATION_WWW_FORM_URLENCODED","","`application/x-www-form-urlencoded`",N,N],[17,"APPLICATION_OCTET_STREAM","","`application/octet-stream`",N,N],[17,"APPLICATION_MSGPACK","","`application/msgpack`",N,N],[17,"MULTIPART_FORM_DATA","","`multipart/form-data`",N,N],[4,"Method","reqwest","The Request Method (VERB)",N,N],[13,"Options","","OPTIONS",71,N],[13,"Get","","GET",71,N],[13,"Post","","POST",71,N],[13,"Put","","PUT",71,N],[13,"Delete","","DELETE",71,N],[13,"Head","","HEAD",71,N],[13,"Trace","","TRACE",71,N],[13,"Connect","","CONNECT",71,N],[13,"Patch","","PATCH",71,N],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",71,N],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",72,N],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",72,N],[13,"Processing","","102 Processing [RFC2518]",72,N],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",72,N],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",72,N],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",72,N],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",72,N],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",72,N],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",72,N],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",72,N],[13,"MultiStatus","","207 Multi-Status [RFC4918]",72,N],[13,"AlreadyReported","","208 Already Reported [RFC5842]",72,N],[13,"ImUsed","","226 IM Used [RFC3229]",72,N],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",72,N],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",72,N],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",72,N],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",72,N],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",72,N],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",72,N],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",72,N],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",72,N],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",72,N],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",72,N],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",72,N],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",72,N],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",72,N],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",72,N],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",72,N],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",72,N],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",72,N],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",72,N],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",72,N],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",72,N],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",72,N],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",72,N],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",72,N],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",72,N],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",72,N],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",72,N],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",72,N],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",72,N],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",72,N],[13,"Locked","","423 Locked [RFC4918]",72,N],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",72,N],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",72,N],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",72,N],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",72,N],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",72,N],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",72,N],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",72,N],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",72,N],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",72,N],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",72,N],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",72,N],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",72,N],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",72,N],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",72,N],[13,"LoopDetected","","508 Loop Detected [RFC5842]",72,N],[13,"NotExtended","","510 Not Extended [RFC2774]",72,N],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",72,N],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",72,N],[3,"Url","","A parsed URL record.",N,N],[4,"UrlError","","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",73,N],[13,"IdnaError","","",73,N],[13,"InvalidPort","","",73,N],[13,"InvalidIpv4Address","","",73,N],[13,"InvalidIpv6Address","","",73,N],[13,"InvalidDomainCharacter","","",73,N],[13,"RelativeUrlWithoutBase","","",73,N],[13,"RelativeUrlWithCannotBeABaseBase","","",73,N],[13,"SetHostOnCannotBeABaseUrl","","",73,N],[13,"Overflow","","",73,N],[3,"Client","","A `Client` to make Requests with.",N,N],[3,"ClientBuilder","","A `ClientBuilder` can be used to create a `Client` with  custom configuration.",N,N],[3,"Error","","The Errors that may occur when processing a `Request`.",N,N],[3,"Body","","The body of a `Request`.",N,N],[3,"Proxy","","Configuration of a proxy that a `Client` should pass requests to.",N,N],[3,"RedirectAction","","An action to perform when a redirect status code is found.",N,N],[3,"RedirectAttempt","","A type that holds information on the next request and previous requests in redirect chain.",N,N],[3,"RedirectPolicy","","A type that controls the policy on how to handle the following of redirects.",N,N],[3,"Request","","A request which can be executed with `Client::execute()`.",N,N],[3,"RequestBuilder","","A builder to construct the properties of a `Request`.",N,N],[3,"Response","","A Response to a submitted `Request`.",N,N],[3,"Certificate","","Represent an X509 certificate.",N,N],[3,"Identity","","Represent a private key and X509 cert as a client certificate.",N,N],[5,"get","","Shortcut method to quickly make a `GET` request.",N,[[["t"]],["result",["response"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"url","","Returns a possible URL related to this error.",74,[[["self"]],["option",["url"]]]],[11,"get_ref","","Returns a reference to the internal error, if available.",74,[[["self"]],["option",["stderror"]]]],[11,"is_http","","Returns true if the error is related to HTTP.",74,[[["self"]],["bool"]]],[11,"is_serialization","","Returns true if the error is serialization related.",74,[[["self"]],["bool"]]],[11,"is_redirect","","Returns true if the error is from a `RedirectPolicy`.",74,[[["self"]],["bool"]]],[11,"is_client_error","","Returns true if the error is from a request returning a 4xx error.",74,[[["self"]],["bool"]]],[11,"is_server_error","","Returns true if the error is from a request returning a 5xx error.",74,[[["self"]],["bool"]]],[11,"status","","Returns the status code, if the error was generated from a response.",74,[[["self"]],["option",["statuscode"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"description","","",74,[[["self"]],["str"]]],[11,"cause","","",74,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"new","","Instantiate a `Body` from a reader.",75,[[["r"]],["body"]]],[11,"sized","","Create a `Body` from a `Read` where the size is known in advance but the data should not be fully loaded into memory. This will set the `Content-Length` header and stream from the `Read`.",75,[[["r"],["u64"]],["body"]]],[11,"from","","",75,[[["vec",["u8"]]],["body"]]],[11,"from","","",75,[[["string"]],["body"]]],[11,"from","","",75,N],[11,"from","","",75,[[["str"]],["body"]]],[11,"from","","",75,[[["file"]],["body"]]],[11,"clone","","",76,[[["self"]],["client"]]],[11,"new","","Constructs a new `ClientBuilder`",77,[[],["clientbuilder"]]],[11,"build","","Returns a `Client` that uses this `ClientBuilder` configuration.",77,[[["self"]],["result",["client"]]]],[11,"add_root_certificate","","Add a custom root certificate.",77,[[["self"],["certificate"]],["clientbuilder"]]],[11,"identity","","Sets the identity to be used for client certificate authentication.",77,[[["self"],["identity"]],["clientbuilder"]]],[11,"danger_disable_hostname_verification","","Disable hostname verification.",77,[[["self"]],["clientbuilder"]]],[11,"enable_hostname_verification","","Enable hostname verification.",77,[[["self"]],["clientbuilder"]]],[11,"default_headers","","Sets the default headers for every request.",77,[[["self"],["headers"]],["clientbuilder"]]],[11,"gzip","","Enable auto gzip decompression by checking the ContentEncoding response header.",77,[[["self"],["bool"]],["clientbuilder"]]],[11,"proxy","","Add a `Proxy` to the list of proxies the `Client` will use.",77,[[["self"],["proxy"]],["clientbuilder"]]],[11,"redirect","","Set a `RedirectPolicy` for this client.",77,[[["self"],["redirectpolicy"]],["clientbuilder"]]],[11,"referer","","Enable or disable automatic setting of the `Referer` header.",77,[[["self"],["bool"]],["clientbuilder"]]],[11,"timeout","","Set a timeout for connect, read and write operations of a `Client`.",77,[[["self"],["t"]],["clientbuilder"]]],[11,"new","","Constructs a new `Client`.",76,[[],["client"]]],[11,"builder","","Creates a `ClientBuilder` to configure a `Client`.",76,[[],["clientbuilder"]]],[11,"get","","Convenience method to make a `GET` request to a URL.",76,[[["self"],["u"]],["requestbuilder"]]],[11,"post","","Convenience method to make a `POST` request to a URL.",76,[[["self"],["u"]],["requestbuilder"]]],[11,"put","","Convenience method to make a `PUT` request to a URL.",76,[[["self"],["u"]],["requestbuilder"]]],[11,"patch","","Convenience method to make a `PATCH` request to a URL.",76,[[["self"],["u"]],["requestbuilder"]]],[11,"delete","","Convenience method to make a `DELETE` request to a URL.",76,[[["self"],["u"]],["requestbuilder"]]],[11,"head","","Convenience method to make a `HEAD` request to a URL.",76,[[["self"],["u"]],["requestbuilder"]]],[11,"request","","Start building a `Request` with the `Method` and `Url`.",76,[[["self"],["method"],["u"]],["requestbuilder"]]],[11,"execute","","Executes a `Request`.",76,[[["self"],["request"]],["result",["response"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["proxy"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"http","","Proxy all HTTP traffic to the passed URL.",78,[[["u"]],["result",["proxy"]]]],[11,"https","","Proxy all HTTPS traffic to the passed URL.",78,[[["u"]],["result",["proxy"]]]],[11,"all","","Proxy all traffic to the passed URL.",78,[[["u"]],["result",["proxy"]]]],[11,"custom","","Provide a custom function to determine what traffix to proxy to where.",78,[[["f"]],["proxy"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"limited","","Create a RedirectPolicy with a maximum number of redirects.",79,[[["usize"]],["redirectpolicy"]]],[11,"none","","Create a RedirectPolicy that does not follow any redirect.",79,[[],["redirectpolicy"]]],[11,"custom","","Create a custom RedirectPolicy using the passed function.",79,[[["t"]],["redirectpolicy"]]],[11,"redirect","","Apply this policy to a given [`RedirectAttempt`] to produce a [`RedirectAction`].",79,[[["self"],["redirectattempt"]],["redirectaction"]]],[11,"default","","",79,[[],["redirectpolicy"]]],[11,"status","","Get the type of redirect.",80,[[["self"]],["statuscode"]]],[11,"url","","Get the next URL to redirect to.",80,[[["self"]],["url"]]],[11,"previous","","Get the list of previous URLs that have already been requested in this chain.",80,N],[11,"follow","","Returns an action meaning reqwest should follow the next URL.",80,[[["self"]],["redirectaction"]]],[11,"stop","","Returns an action meaning reqwest should not follow the next URL.",80,[[["self"]],["redirectaction"]]],[11,"loop_detected","","Returns an action meaning there was a loop of redirects found.",80,[[["self"]],["redirectaction"]]],[11,"too_many_redirects","","Returns an action meaning there was a loop of redirects found.",80,[[["self"]],["redirectaction"]]],[11,"new","","Constructs a new request.",82,[[["method"],["url"]],["self"]]],[11,"method","","Get the method.",82,[[["self"]],["method"]]],[11,"method_mut","","Get a mutable reference to the method.",82,[[["self"]],["method"]]],[11,"url","","Get the url.",82,[[["self"]],["url"]]],[11,"url_mut","","Get a mutable reference to the url.",82,[[["self"]],["url"]]],[11,"headers","","Get the headers.",82,[[["self"]],["headers"]]],[11,"headers_mut","","Get a mutable reference to the headers.",82,[[["self"]],["headers"]]],[11,"body","","Get the body.",82,[[["self"]],["option",["body"]]]],[11,"body_mut","","Get a mutable reference to the body.",82,[[["self"]],["option"]]],[11,"header","","Add a `Header` to this Request.",83,[[["self"],["h"]],["requestbuilder"]]],[11,"headers","","Add a set of Headers to the existing ones on this Request.",83,[[["self"],["headers"]],["requestbuilder"]]],[11,"basic_auth","","Enable HTTP basic authentication.",83,[[["self"],["u"],["option"]],["requestbuilder"]]],[11,"body","","Set the request body.",83,[[["self"],["t"]],["requestbuilder"]]],[11,"query","","Modify the query string of the URL.",83,[[["self"],["t"]],["requestbuilder"]]],[11,"form","","Send a form body.",83,[[["self"],["t"]],["requestbuilder"]]],[11,"json","","Send a JSON body.",83,[[["self"],["t"]],["requestbuilder"]]],[11,"multipart","","Sends a multipart/form-data body.",83,[[["self"],["form"]],["requestbuilder"]]],[11,"build","","Build a `Request`, which can be inspected, modified and executed with `Client::execute()`.",83,[[["self"]],["result",["request"]]]],[11,"send","","Constructs the Request and sends it the target URL, returning a Response.",83,[[["self"]],["result",["response"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"url","","Get the final `Url` of this `Response`.",84,[[["self"]],["url"]]],[11,"status","","Get the `StatusCode` of this `Response`.",84,[[["self"]],["statuscode"]]],[11,"headers","","Get the `Headers` of this `Response`.",84,[[["self"]],["headers"]]],[11,"json","","Try and deserialize the response body as JSON using `serde`.",84,[[["self"]],["result"]]],[11,"text","","Get the response text.",84,[[["self"]],["result",["string"]]]],[11,"copy_to","","Copy the response body into a writer.",84,[[["self"],["w"]],["result",["u64"]]]],[11,"error_for_status","","Turn a response into an error if the server returned an error.",84,[[["self"]],["result"]]],[11,"read","","",84,N],[11,"from_der","","Create a `Certificate` from a binary DER encoded certificate",85,N],[11,"from_pem","","Create a `Certificate` from a PEM encoded certificate",85,N],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"from_pkcs12_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",86,N],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[0,"multipart","","multipart/form-data",N,N],[3,"Form","reqwest::multipart","A multipart/form-data request.",N,N],[3,"Part","","A field in a multipart form.",N,N],[6,"Result","reqwest","A `Result` alias where the `Err` case is `reqwest::Error`.",N,N],[8,"IntoUrl","","A trait to try to convert some type into a `Url`.",N,N],[11,"fmt","reqwest::header","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header::parsing","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"eq","reqwest","",72,[[["self"],["statuscode"]],["bool"]]],[11,"eq","reqwest::header","",47,[[["self"],["basic"]],["bool"]]],[11,"ne","","",47,[[["self"],["basic"]],["bool"]]],[11,"eq","","",100,N],[11,"eq","","",70,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",70,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"eq","","",2,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",2,[[["self"],["cachecontrol"]],["bool"]]],[11,"eq","","",33,[[["self"],["etag"]],["bool"]]],[11,"ne","","",33,[[["self"],["etag"]],["bool"]]],[11,"eq","","",38,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",38,[[["self"],["bearer"]],["bool"]]],[11,"eq","","",5,[[["self"],["relationtype"]],["bool"]]],[11,"ne","","",5,[[["self"],["relationtype"]],["bool"]]],[11,"eq","","",34,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",34,[[["self"],["connectionoption"]],["bool"]]],[11,"eq","","",27,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",27,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"eq","","",32,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",32,[[["self"],["acceptranges"]],["bool"]]],[11,"eq","","",52,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",52,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"eq","","",100,N],[11,"eq","","",45,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",45,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"eq","","",6,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",6,[[["self"],["ifnonematch"]],["bool"]]],[11,"eq","","",10,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",10,[[["self"],["acceptlanguage"]],["bool"]]],[11,"eq","","",39,[[["self"],["date"]],["bool"]]],[11,"ne","","",39,[[["self"],["date"]],["bool"]]],[11,"eq","","",40,[[["self"],["retryafter"]],["bool"]]],[11,"ne","","",40,[[["self"],["retryafter"]],["bool"]]],[11,"eq","","",15,[[["self"],["charset"]],["bool"]]],[11,"ne","","",15,[[["self"],["charset"]],["bool"]]],[11,"eq","","",20,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",20,[[["self"],["contentrange"]],["bool"]]],[11,"eq","","",37,[[["self"],["setcookie"]],["bool"]]],[11,"ne","","",37,[[["self"],["setcookie"]],["bool"]]],[11,"eq","reqwest","",71,[[["self"],["method"]],["bool"]]],[11,"ne","","",71,[[["self"],["method"]],["bool"]]],[11,"eq","reqwest::header::parsing","",0,[[["self"],["extendedvalue"]],["bool"]]],[11,"ne","","",0,[[["self"],["extendedvalue"]],["bool"]]],[11,"eq","reqwest::header","",29,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",29,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",9,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",9,[[["self"],["contentlanguage"]],["bool"]]],[11,"eq","","",23,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",23,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"eq","","",101,[[["self"],["quality"]],["bool"]]],[11,"ne","","",101,[[["self"],["quality"]],["bool"]]],[11,"eq","","",12,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",12,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"eq","","",36,[[["self"],["warning"]],["bool"]]],[11,"ne","","",36,[[["self"],["warning"]],["bool"]]],[11,"eq","","",93,[[["self"],["referer"]],["bool"]]],[11,"ne","","",93,[[["self"],["referer"]],["bool"]]],[11,"eq","","",95,[[["self"],["location"]],["bool"]]],[11,"ne","","",95,[[["self"],["location"]],["bool"]]],[11,"eq","","",94,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",94,[[["self"],["useragent"]],["bool"]]],[11,"eq","","",100,[[["self"],["str"]],["bool"]]],[11,"eq","","",87,[[["self"],["cookie"]],["bool"]]],[11,"eq","","",11,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",11,[[["self"],["protocolname"]],["bool"]]],[11,"eq","","",8,[[["self"],["te"]],["bool"]]],[11,"ne","","",8,[[["self"],["te"]],["bool"]]],[11,"eq","","",43,[[["self"],["expires"]],["bool"]]],[11,"ne","","",43,[[["self"],["expires"]],["bool"]]],[11,"eq","","",99,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"eq","","",65,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",65,[[["self"],["ifmatch"]],["bool"]]],[11,"eq","","",4,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",4,[[["self"],["acceptcharset"]],["bool"]]],[11,"eq","","",26,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",26,[[["self"],["dispositionparam"]],["bool"]]],[11,"eq","","",90,[[["self"],["headers"]],["bool"]]],[11,"eq","","",31,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",31,[[["self"],["rangeunit"]],["bool"]]],[11,"eq","","",62,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",62,[[["self"],["contentdisposition"]],["bool"]]],[11,"eq","","",48,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",48,[[["self"],["byterangespec"]],["bool"]]],[11,"eq","","",88,[[["self"],["origin"]],["bool"]]],[11,"ne","","",88,[[["self"],["origin"]],["bool"]]],[11,"eq","","",42,[[["self"],["accept"]],["bool"]]],[11,"ne","","",42,[[["self"],["accept"]],["bool"]]],[11,"eq","","",96,[[["self"],["link"]],["bool"]]],[11,"ne","","",96,[[["self"],["link"]],["bool"]]],[11,"eq","","",100,[[["self"],["raw"]],["bool"]]],[11,"eq","","",46,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",46,[[["self"],["prefer"]],["bool"]]],[11,"eq","","",54,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",54,[[["self"],["contentencoding"]],["bool"]]],[11,"eq","","",100,N],[11,"eq","","",17,[[["self"],["from"]],["bool"]]],[11,"ne","","",17,[[["self"],["from"]],["bool"]]],[11,"eq","","",44,[[["self"],["contentlocation"]],["bool"]]],[11,"ne","","",44,[[["self"],["contentlocation"]],["bool"]]],[11,"eq","","",16,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",16,[[["self"],["dispositiontype"]],["bool"]]],[11,"eq","","",91,[[["self"],["linkvalue"]],["bool"]]],[11,"ne","","",91,[[["self"],["linkvalue"]],["bool"]]],[11,"eq","","",66,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",66,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",68,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",68,[[["self"],["transferencoding"]],["bool"]]],[11,"eq","","",50,[[["self"],["lasteventid"]],["bool"]]],[11,"ne","","",50,[[["self"],["lasteventid"]],["bool"]]],[11,"eq","","",19,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",19,[[["self"],["ifrange"]],["bool"]]],[11,"eq","","",35,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",35,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"eq","","",59,[[["self"],["referrerpolicy"]],["bool"]]],[11,"eq","","",28,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",28,[[["self"],["contentrangespec"]],["bool"]]],[11,"eq","","",18,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",18,[[["self"],["pragma"]],["bool"]]],[11,"eq","","",41,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",41,[[["self"],["authorization"]],["bool"]]],[11,"eq","","",22,[[["self"],["proxyauthorization"]],["bool"]]],[11,"ne","","",22,[[["self"],["proxyauthorization"]],["bool"]]],[11,"eq","","",53,[[["self"],["range"]],["bool"]]],[11,"ne","","",53,[[["self"],["range"]],["bool"]]],[11,"eq","","",89,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",89,[[["self"],["httpdate"]],["bool"]]],[11,"eq","","",30,[[["self"],["preference"]],["bool"]]],[11,"ne","","",30,[[["self"],["preference"]],["bool"]]],[11,"eq","","",49,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",49,[[["self"],["contentlength"]],["bool"]]],[11,"eq","","",7,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",7,[[["self"],["qualityitem"]],["bool"]]],[11,"eq","","",21,[[["self"],["allow"]],["bool"]]],[11,"ne","","",21,[[["self"],["allow"]],["bool"]]],[11,"eq","","",51,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",51,[[["self"],["entitytag"]],["bool"]]],[11,"eq","","",100,N],[11,"eq","","",69,[[["self"],["mediadesc"]],["bool"]]],[11,"ne","","",69,[[["self"],["mediadesc"]],["bool"]]],[11,"eq","","",92,[[["self"],["host"]],["bool"]]],[11,"ne","","",92,[[["self"],["host"]],["bool"]]],[11,"eq","","",24,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",24,[[["self"],["protocol"]],["bool"]]],[11,"eq","","",67,[[["self"],["connection"]],["bool"]]],[11,"ne","","",67,[[["self"],["connection"]],["bool"]]],[11,"eq","","",3,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",3,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"eq","","",100,N],[11,"eq","","",60,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",60,[[["self"],["lastmodified"]],["bool"]]],[11,"eq","","",58,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",58,[[["self"],["cachedirective"]],["bool"]]],[11,"eq","","",61,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",61,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",63,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",63,[[["self"],["upgrade"]],["bool"]]],[11,"eq","","",57,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",57,[[["self"],["encoding"]],["bool"]]],[11,"eq","","",64,[[["self"],["expect"]],["bool"]]],[11,"eq","","",98,[[["self"],["server"]],["bool"]]],[11,"ne","","",98,[[["self"],["server"]],["bool"]]],[11,"eq","","",56,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",56,[[["self"],["acceptencoding"]],["bool"]]],[11,"eq","","",25,[[["self"],["vary"]],["bool"]]],[11,"ne","","",25,[[["self"],["vary"]],["bool"]]],[11,"next","","",102,[[["self"]],["option",["headerview"]]]],[11,"next","","",103,[[["self"]],["option"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header::parsing","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","reqwest::header","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",21,[[["self"]],["allow"]]],[11,"clone","","",3,[[["self"]],["ifunmodifiedsince"]]],[11,"clone","","",20,[[["self"]],["contentrange"]]],[11,"clone","","",46,[[["self"]],["prefer"]]],[11,"clone","","",52,[[["self"]],["accesscontrolrequestheaders"]]],[11,"clone","","",88,[[["self"]],["origin"]]],[11,"clone","","",48,[[["self"]],["byterangespec"]]],[11,"clone","","",53,[[["self"]],["range"]]],[11,"clone","","",8,[[["self"]],["te"]]],[11,"clone","","",94,[[["self"]],["useragent"]]],[11,"clone","","",43,[[["self"]],["expires"]]],[11,"clone","","",17,[[["self"]],["from"]]],[11,"clone","","",101,[[["self"]],["quality"]]],[11,"clone","","",30,[[["self"]],["preference"]]],[11,"clone","","",70,[[["self"]],["accesscontrolmaxage"]]],[11,"clone","","",26,[[["self"]],["dispositionparam"]]],[11,"clone","","",64,[[["self"]],["expect"]]],[11,"clone","","",18,[[["self"]],["pragma"]]],[11,"clone","","",7,[[["self"]],["qualityitem"]]],[11,"clone","","",89,[[["self"]],["httpdate"]]],[11,"clone","","",45,[[["self"]],["accesscontrolallowmethods"]]],[11,"clone","reqwest","",71,[[["self"]],["method"]]],[11,"clone","reqwest::header","",39,[[["self"]],["date"]]],[11,"clone","","",65,[[["self"]],["ifmatch"]]],[11,"clone","","",38,[[["self"]],["bearer"]]],[11,"clone","","",36,[[["self"]],["warning"]]],[11,"clone","","",93,[[["self"]],["referer"]]],[11,"clone","","",56,[[["self"]],["acceptencoding"]]],[11,"clone","","",23,[[["self"]],["accesscontrolexposeheaders"]]],[11,"clone","","",44,[[["self"]],["contentlocation"]]],[11,"clone","reqwest::header::parsing","",0,[[["self"]],["extendedvalue"]]],[11,"clone","reqwest::header","",99,[[["self"]],["accesscontrolallowcredentials"]]],[11,"clone","","",95,[[["self"]],["location"]]],[11,"clone","","",87,[[["self"]],["cookie"]]],[11,"clone","","",49,[[["self"]],["contentlength"]]],[11,"clone","","",61,[[["self"]],["contenttype"]]],[11,"clone","","",40,[[["self"]],["retryafter"]]],[11,"clone","","",2,[[["self"]],["cachecontrol"]]],[11,"clone","","",98,[[["self"]],["server"]]],[11,"clone","","",11,[[["self"]],["protocolname"]]],[11,"clone","","",12,[[["self"]],["stricttransportsecurity"]]],[11,"clone","","",51,[[["self"]],["entitytag"]]],[11,"clone","","",27,[[["self"]],["ifmodifiedsince"]]],[11,"clone","","",54,[[["self"]],["contentencoding"]]],[11,"clone","","",37,[[["self"]],["setcookie"]]],[11,"clone","","",22,[[["self"]],["proxyauthorization"]]],[11,"clone","","",57,[[["self"]],["encoding"]]],[11,"clone","","",31,[[["self"]],["rangeunit"]]],[11,"clone","","",10,[[["self"]],["acceptlanguage"]]],[11,"clone","","",100,[[["self"]],["raw"]]],[11,"clone","","",96,[[["self"]],["link"]]],[11,"clone","","",19,[[["self"]],["ifrange"]]],[11,"clone","","",55,[[["self"]],["preferenceapplied"]]],[11,"clone","","",41,[[["self"]],["authorization"]]],[11,"clone","","",91,[[["self"]],["linkvalue"]]],[11,"clone","","",68,[[["self"]],["transferencoding"]]],[11,"clone","reqwest","",72,[[["self"]],["statuscode"]]],[11,"clone","reqwest::header","",24,[[["self"]],["protocol"]]],[11,"clone","","",4,[[["self"]],["acceptcharset"]]],[11,"clone","","",32,[[["self"]],["acceptranges"]]],[11,"clone","","",42,[[["self"]],["accept"]]],[11,"clone","","",28,[[["self"]],["contentrangespec"]]],[11,"clone","","",67,[[["self"]],["connection"]]],[11,"clone","","",59,[[["self"]],["referrerpolicy"]]],[11,"clone","","",60,[[["self"]],["lastmodified"]]],[11,"clone","","",6,[[["self"]],["ifnonematch"]]],[11,"clone","","",69,[[["self"]],["mediadesc"]]],[11,"clone","","",63,[[["self"]],["upgrade"]]],[11,"clone","","",9,[[["self"]],["contentlanguage"]]],[11,"clone","","",66,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",5,[[["self"]],["relationtype"]]],[11,"clone","","",25,[[["self"]],["vary"]]],[11,"clone","","",29,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",62,[[["self"]],["contentdisposition"]]],[11,"clone","","",34,[[["self"]],["connectionoption"]]],[11,"clone","","",92,[[["self"]],["host"]]],[11,"clone","","",90,[[["self"]],["headers"]]],[11,"clone","","",16,[[["self"]],["dispositiontype"]]],[11,"clone","","",47,[[["self"]],["basic"]]],[11,"clone","","",58,[[["self"]],["cachedirective"]]],[11,"clone","","",50,[[["self"]],["lasteventid"]]],[11,"clone","","",35,[[["self"]],["accesscontrolrequestmethod"]]],[11,"clone","","",15,[[["self"]],["charset"]]],[11,"clone","","",33,[[["self"]],["etag"]]],[11,"scheme","","",47,[[],["option",["str"]]]],[11,"fmt_scheme","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"scheme","","",38,[[],["option",["str"]]]],[11,"fmt_scheme","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",89,[[["self"],["httpdate"]],["ordering"]]],[11,"cmp","reqwest","",72,[[["self"],["statuscode"]],["ordering"]]],[11,"cmp","reqwest::header","",101,[[["self"],["quality"]],["ordering"]]],[11,"from_str","","",15,[[["str"]],["result",["charset","error"]]]],[11,"from_str","","",38,[[["str"]],["result",["bearer","error"]]]],[11,"from_str","","",88,[[["str"]],["result",["origin","error"]]]],[11,"from_str","","",47,[[["str"]],["result",["basic","error"]]]],[11,"from_str","","",5,[[["str"]],["result",["relationtype","error"]]]],[11,"from_str","","",92,[[["str"]],["result",["host","error"]]]],[11,"from_str","","",58,[[["str"]],["result",["cachedirective","option"]]]],[11,"from_str","","",51,[[["str"]],["result",["entitytag","error"]]]],[11,"from_str","","",34,[[["str"]],["result",["connectionoption"]]]],[11,"from_str","","",53,[[["str"]],["result",["range","error"]]]],[11,"from_str","","",57,[[["str"]],["result",["encoding","error"]]]],[11,"from_str","","",12,[[["str"]],["result",["stricttransportsecurity","error"]]]],[11,"from_str","","",48,[[["str"]],["result",["byterangespec","error"]]]],[11,"from_str","reqwest","",71,[[["str"]],["result",["method","error"]]]],[11,"from_str","reqwest::header","",89,[[["str"]],["result",["httpdate","error"]]]],[11,"from_str","","",7,[[["str"]],["result",["qualityitem","error"]]]],[11,"from_str","","",30,[[["str"]],["result",["preference","option"]]]],[11,"from_str","","",96,[[["str"]],["result",["link","error"]]]],[11,"from_str","","",36,[[["str"]],["result",["warning","error"]]]],[11,"from_str","","",11,[[["str"]],["result",["protocolname"]]]],[11,"from_str","","",31,[[["str"]],["result",["rangeunit","error"]]]],[11,"from_str","","",24,[[["str"]],["result",["protocol"]]]],[11,"from_str","","",69,[[["str"]],["result",["mediadesc","error"]]]],[11,"from_str","","",28,[[["str"]],["result",["contentrangespec","error"]]]],[11,"deref_mut","","",10,[[["self"]],["vec"]]],[11,"deref_mut","","",52,[[["self"]],["vec"]]],[11,"deref_mut","","",68,[[["self"]],["vec"]]],[11,"deref_mut","","",45,[[["self"]],["vec"]]],[11,"deref_mut","","",55,[[["self"]],["vec"]]],[11,"deref_mut","","",8,[[["self"]],["vec"]]],[11,"deref_mut","","",61,[[["self"]],["mime"]]],[11,"deref_mut","","",70,[[["self"]],["u32"]]],[11,"deref_mut","","",2,[[["self"]],["vec"]]],[11,"deref_mut","","",27,[[["self"]],["httpdate"]]],[11,"deref_mut","","",46,[[["self"]],["vec"]]],[11,"deref_mut","","",49,[[["self"]],["u64"]]],[11,"deref_mut","","",33,[[["self"]],["entitytag"]]],[11,"deref_mut","","",39,[[["self"]],["httpdate"]]],[11,"deref_mut","","",66,[[["self"]],["vec"]]],[11,"deref_mut","","",3,[[["self"]],["httpdate"]]],[11,"deref_mut","","",67,[[["self"]],["vec"]]],[11,"deref_mut","","",56,[[["self"]],["vec"]]],[11,"deref_mut","","",50,[[["self"]],["string"]]],[11,"deref_mut","","",37,[[["self"]],["vec"]]],[11,"deref_mut","","",9,[[["self"]],["vec"]]],[11,"deref_mut","","",32,[[["self"]],["vec"]]],[11,"deref_mut","","",60,[[["self"]],["httpdate"]]],[11,"deref_mut","","",41,[[["self"]],["s"]]],[11,"deref_mut","","",35,[[["self"]],["method"]]],[11,"deref_mut","","",44,[[["self"]],["string"]]],[11,"deref_mut","","",54,[[["self"]],["vec"]]],[11,"deref_mut","","",21,[[["self"]],["vec"]]],[11,"deref_mut","","",20,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",63,[[["self"]],["vec"]]],[11,"deref_mut","","",17,[[["self"]],["string"]]],[11,"deref_mut","","",42,[[["self"]],["vec"]]],[11,"deref_mut","","",22,[[["self"]],["s"]]],[11,"deref_mut","","",43,[[["self"]],["httpdate"]]],[11,"deref_mut","","",4,[[["self"]],["vec"]]],[11,"deref_mut","","",23,[[["self"]],["vec"]]],[11,"default","reqwest","",71,[[],["method"]]],[11,"default","","",72,[[],["statuscode"]]],[11,"default","reqwest::header","",101,[[],["quality"]]],[11,"default","","",90,[[],["headers"]]],[11,"from_iter","","",90,[[["i"]],["headers"]]],[11,"index","","",100,N],[11,"partial_cmp","","",89,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",89,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",89,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",89,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",89,[[["self"],["httpdate"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"partial_cmp","reqwest","",72,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"partial_cmp","reqwest::header","",101,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",101,[[["self"],["quality"]],["bool"]]],[11,"le","","",101,[[["self"],["quality"]],["bool"]]],[11,"gt","","",101,[[["self"],["quality"]],["bool"]]],[11,"ge","","",101,[[["self"],["quality"]],["bool"]]],[11,"hash","reqwest","",71,N],[11,"hash","","",72,N],[11,"type_","reqwest::mime","Get the top level media type for this `Mime`.",104,[[["self"]],["name"]]],[11,"subtype","","Get the subtype of this `Mime`.",104,[[["self"]],["name"]]],[11,"suffix","","Get an optional +suffix for this `Mime`.",104,[[["self"]],["option",["name"]]]],[11,"get_param","","Look up a parameter by name.",104,[[["self"],["n"]],["option",["name"]]]],[11,"params","","Returns an iterator over the parameters.",104,[[["self"]],["params"]]],[11,"deref","reqwest::header","",61,[[["self"]],["mime"]]],[11,"deref","","",55,[[["self"]],["vec"]]],[11,"deref","","",63,[[["self"]],["vec"]]],[11,"deref","","",54,[[["self"]],["vec"]]],[11,"deref","","",22,[[["self"]],["s"]]],[11,"deref","","",52,[[["self"]],["vec"]]],[11,"deref","","",43,[[["self"]],["httpdate"]]],[11,"deref","","",2,[[["self"]],["vec"]]],[11,"deref","","",9,[[["self"]],["vec"]]],[11,"deref","","",37,[[["self"]],["vec"]]],[11,"deref","","",46,[[["self"]],["vec"]]],[11,"deref","","",10,[[["self"]],["vec"]]],[11,"deref","","",17,[[["self"]],["string"]]],[11,"safe","reqwest","Whether a method is considered \"safe\", meaning the request is essentially read-only.",71,[[["self"]],["bool"]]],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",71,[[["self"]],["bool"]]],[11,"deref","reqwest::header","",35,[[["self"]],["method"]]],[11,"deref","","",41,[[["self"]],["s"]]],[11,"deref","","",50,[[["self"]],["string"]]],[11,"deref","","",49,[[["self"]],["u64"]]],[11,"deref","","",70,[[["self"]],["u32"]]],[11,"deref","","",68,[[["self"]],["vec"]]],[11,"deref","","",56,[[["self"]],["vec"]]],[11,"deref","","",95,N],[11,"deref","","",66,[[["self"]],["vec"]]],[11,"deref","","",67,[[["self"]],["vec"]]],[11,"deref","","",32,[[["self"]],["vec"]]],[11,"deref","","",44,[[["self"]],["string"]]],[11,"deref","","",8,[[["self"]],["vec"]]],[11,"deref","","",39,[[["self"]],["httpdate"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",51,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",51,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",51,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",51,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",51,N],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",51,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",51,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",51,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",51,[[["self"],["entitytag"]],["bool"]]],[11,"deref","","",33,[[["self"]],["entitytag"]]],[11,"deref","","",20,[[["self"]],["contentrangespec"]]],[11,"deref","","",4,[[["self"]],["vec"]]],[11,"deref","","",93,N],[11,"deref","","",23,[[["self"]],["vec"]]],[11,"deref","","",21,[[["self"]],["vec"]]],[11,"deref","","",45,[[["self"]],["vec"]]],[11,"deref","","",60,[[["self"]],["httpdate"]]],[11,"deref","","",42,[[["self"]],["vec"]]],[11,"deref","","",27,[[["self"]],["httpdate"]]],[11,"deref","","",3,[[["self"]],["httpdate"]]],[11,"deref","","",98,N],[11,"deref","","",94,N],[11,"as_ref","reqwest","",71,[[["self"]],["str"]]],[11,"header_name","reqwest::header","",54,[[],["str"]]],[11,"parse_header","","",54,[[["raw"]],["result",["contentencoding","error"]]]],[11,"fmt_header","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",41,[[],["str"]]],[11,"parse_header","","",41,[[["raw"]],["result",["authorization","error"]]]],[11,"fmt_header","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",4,[[],["str"]]],[11,"parse_header","","",4,[[["raw"]],["result",["acceptcharset","error"]]]],[11,"fmt_header","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",87,[[],["str"]]],[11,"parse_header","","",87,[[["raw"]],["result",["cookie","error"]]]],[11,"fmt_header","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",60,[[],["str"]]],[11,"parse_header","","",60,[[["raw"]],["result",["lastmodified","error"]]]],[11,"fmt_header","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",8,[[],["str"]]],[11,"parse_header","","",8,[[["raw"]],["result",["te","error"]]]],[11,"fmt_header","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",40,[[],["str"]]],[11,"parse_header","","",40,[[["raw"]],["result",["retryafter","error"]]]],[11,"fmt_header","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",22,[[],["str"]]],[11,"parse_header","","",22,[[["raw"]],["result",["proxyauthorization","error"]]]],[11,"fmt_header","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",43,[[],["str"]]],[11,"parse_header","","",43,[[["raw"]],["result",["expires","error"]]]],[11,"fmt_header","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",18,[[],["str"]]],[11,"parse_header","","",18,[[["raw"]],["result",["pragma","error"]]]],[11,"fmt_header","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",17,[[],["str"]]],[11,"parse_header","","",17,[[["raw"]],["result",["from","error"]]]],[11,"fmt_header","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",2,[[],["str"]]],[11,"parse_header","","",2,[[["raw"]],["result",["cachecontrol","error"]]]],[11,"fmt_header","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",42,[[],["str"]]],[11,"parse_header","","",42,[[["raw"]],["result",["accept","error"]]]],[11,"fmt_header","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",88,[[],["str"]]],[11,"parse_header","","",88,[[["raw"]],["result",["origin","error"]]]],[11,"fmt_header","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",45,[[],["str"]]],[11,"parse_header","","",45,[[["raw"]],["result",["accesscontrolallowmethods","error"]]]],[11,"fmt_header","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",96,[[],["str"]]],[11,"parse_header","","",96,[[["raw"]],["result",["link","error"]]]],[11,"fmt_header","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",19,[[],["str"]]],[11,"parse_header","","",19,[[["raw"]],["result",["ifrange","error"]]]],[11,"fmt_header","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",98,[[],["str"]]],[11,"parse_header","","",98,[[["raw"]],["result",["server","error"]]]],[11,"fmt_header","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",20,[[],["str"]]],[11,"parse_header","","",20,[[["raw"]],["result",["contentrange","error"]]]],[11,"fmt_header","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",70,[[],["str"]]],[11,"parse_header","","",70,[[["raw"]],["result",["accesscontrolmaxage","error"]]]],[11,"fmt_header","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",12,[[],["str"]]],[11,"parse_header","","",12,[[["raw"]],["result",["stricttransportsecurity","error"]]]],[11,"fmt_header","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",21,[[],["str"]]],[11,"parse_header","","",21,[[["raw"]],["result",["allow","error"]]]],[11,"fmt_header","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",53,[[],["str"]]],[11,"parse_header","","",53,[[["raw"]],["result",["range","error"]]]],[11,"fmt_header","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",46,[[],["str"]]],[11,"parse_header","","",46,[[["raw"]],["result",["prefer","error"]]]],[11,"fmt_header","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,[[["raw"]],["result",["accesscontrolalloworigin","error"]]]],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",33,[[],["str"]]],[11,"parse_header","","",33,[[["raw"]],["result",["etag","error"]]]],[11,"fmt_header","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",50,[[],["str"]]],[11,"parse_header","","",50,[[["raw"]],["result",["lasteventid","error"]]]],[11,"fmt_header","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",6,[[],["str"]]],[11,"parse_header","","",6,[[["raw"]],["result",["ifnonematch","error"]]]],[11,"fmt_header","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",52,[[],["str"]]],[11,"parse_header","","",52,[[["raw"]],["result",["accesscontrolrequestheaders","error"]]]],[11,"fmt_header","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,[[["raw"]],["result",["ifmodifiedsince","error"]]]],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",56,[[],["str"]]],[11,"parse_header","","",56,[[["raw"]],["result",["acceptencoding","error"]]]],[11,"fmt_header","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",36,[[],["str"]]],[11,"parse_header","","",36,[[["raw"]],["result",["warning","error"]]]],[11,"fmt_header","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",3,[[],["str"]]],[11,"parse_header","","",3,[[["raw"]],["result",["ifunmodifiedsince","error"]]]],[11,"fmt_header","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",49,[[],["str"]]],[11,"parse_header","","",49,[[["raw"]],["result",["contentlength","error"]]]],[11,"fmt_header","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",59,[[],["str"]]],[11,"parse_header","","",59,[[["raw"]],["result",["referrerpolicy","error"]]]],[11,"fmt_header","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",63,[[],["str"]]],[11,"parse_header","","",63,[[["raw"]],["result",["upgrade","error"]]]],[11,"fmt_header","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",67,[[],["str"]]],[11,"parse_header","","",67,[[["raw"]],["result",["connection","error"]]]],[11,"fmt_header","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",65,[[],["str"]]],[11,"parse_header","","",65,[[["raw"]],["result",["ifmatch","error"]]]],[11,"fmt_header","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",39,[[],["str"]]],[11,"parse_header","","",39,[[["raw"]],["result",["date","error"]]]],[11,"fmt_header","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",62,[[],["str"]]],[11,"parse_header","","",62,[[["raw"]],["result",["contentdisposition","error"]]]],[11,"fmt_header","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",94,[[],["str"]]],[11,"parse_header","","",94,[[["raw"]],["result",["useragent","error"]]]],[11,"fmt_header","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",9,[[],["str"]]],[11,"parse_header","","",9,[[["raw"]],["result",["contentlanguage","error"]]]],[11,"fmt_header","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",23,[[],["str"]]],[11,"parse_header","","",23,[[["raw"]],["result",["accesscontrolexposeheaders","error"]]]],[11,"fmt_header","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",93,[[],["str"]]],[11,"parse_header","","",93,[[["raw"]],["result",["referer","error"]]]],[11,"fmt_header","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",99,[[],["str"]]],[11,"parse_header","","",99,[[["raw"]],["result",["accesscontrolallowcredentials","error"]]]],[11,"fmt_header","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",37,[[],["str"]]],[11,"parse_header","","",37,[[["raw"]],["result",["setcookie","error"]]]],[11,"fmt_header","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",35,[[],["str"]]],[11,"parse_header","","",35,[[["raw"]],["result",["accesscontrolrequestmethod","error"]]]],[11,"fmt_header","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",44,[[],["str"]]],[11,"parse_header","","",44,[[["raw"]],["result",["contentlocation","error"]]]],[11,"fmt_header","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",95,[[],["str"]]],[11,"parse_header","","",95,[[["raw"]],["result",["location","error"]]]],[11,"fmt_header","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",10,[[],["str"]]],[11,"parse_header","","",10,[[["raw"]],["result",["acceptlanguage","error"]]]],[11,"fmt_header","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",55,[[],["str"]]],[11,"parse_header","","",55,[[["raw"]],["result",["preferenceapplied","error"]]]],[11,"fmt_header","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",66,[[],["str"]]],[11,"parse_header","","",66,[[["raw"]],["result",["accesscontrolallowheaders","error"]]]],[11,"fmt_header","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",32,[[],["str"]]],[11,"parse_header","","",32,[[["raw"]],["result",["acceptranges","error"]]]],[11,"fmt_header","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",25,[[],["str"]]],[11,"parse_header","","",25,[[["raw"]],["result",["vary","error"]]]],[11,"fmt_header","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",64,[[],["str"]]],[11,"parse_header","","",64,[[["raw"]],["result",["expect","error"]]]],[11,"fmt_header","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",61,[[],["str"]]],[11,"parse_header","","",61,[[["raw"]],["result",["contenttype","error"]]]],[11,"fmt_header","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",68,[[],["str"]]],[11,"parse_header","","",68,[[["raw"]],["result",["transferencoding","error"]]]],[11,"fmt_header","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",92,[[],["str"]]],[11,"parse_header","","",92,[[["raw"]],["result",["host","error"]]]],[11,"fmt_header","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"extend","","",90,N],[11,"extend","","",90,N],[11,"from","","",100,[[["vec",["vec"]]],["raw"]]],[11,"from","","",89,[[["systemtime"]],["httpdate"]]],[11,"from","","",100,[[["vec",["u8"]]],["raw"]]],[11,"from","","",100,[[["str"]],["raw"]]],[11,"from","","",100,N],[11,"from","","",100,[[["string"]],["raw"]]],[11,"from","","",100,[[["bytes"]],["raw"]]],[11,"clone","","",14,[[["self"]],["languagetag"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",14,[[["str"]],["result",["languagetag","error"]]]],[11,"default","","",14,[[],["languagetag"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",14,[[["self"],["languagetag"]],["bool"]]],[11,"clone","reqwest::mime","",105,[[["self"]],["name"]]],[11,"clone","","",104,[[["self"]],["mime"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",105,[[["self"],["name"]],["option",["ordering"]]]],[11,"lt","","",105,[[["self"],["name"]],["bool"]]],[11,"le","","",105,[[["self"],["name"]],["bool"]]],[11,"gt","","",105,[[["self"],["name"]],["bool"]]],[11,"ge","","",105,[[["self"],["name"]],["bool"]]],[11,"partial_cmp","","",104,[[["self"],["mime"]],["option",["ordering"]]]],[11,"description","","",107,[[["self"]],["str"]]],[11,"cmp","","",104,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",105,[[["self"],["name"]],["ordering"]]],[11,"from_str","","",104,[[["str"]],["result",["mime"]]]],[11,"hash","","",104,N],[11,"hash","","",105,N],[11,"as_ref","","",105,[[["self"]],["str"]]],[11,"as_ref","","",104,[[["self"]],["str"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",104,[[["self"],["mime"]],["bool"]]],[11,"eq","","",105,[[["self"],["str"]],["bool"]]],[11,"eq","","",105,[[["self"],["name"]],["bool"]]],[11,"ne","","",105,[[["self"],["name"]],["bool"]]],[11,"eq","","",104,[[["self"],["str"]],["bool"]]],[11,"next","","",106,[[["self"]],["option"]]],[11,"size_hint","","",106,N],[11,"clone","reqwest","",108,[[["self"]],["url"]]],[11,"clone","","",73,[[["self"]],["parseerror"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"to_socket_addrs","","",108,[[["self"]],["result",["error"]]]],[11,"partial_cmp","","",108,[[["self"],["url"]],["option",["ordering"]]]],[11,"description","","",73,[[["self"]],["str"]]],[11,"cmp","","",108,[[["self"],["url"]],["ordering"]]],[11,"from_str","","",108,[[["str"]],["result",["url","parseerror"]]]],[11,"hash","","",108,N],[11,"index","","",108,[[["self"],["rangefull"]],["str"]]],[11,"index","","",108,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",108,[[["self"],["range",["position"]]],["str"]]],[11,"index","","",108,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"as_ref","","",108,[[["self"]],["str"]]],[11,"from","","",73,[[["errors"]],["parseerror"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",108,[[["self"],["url"]],["bool"]]],[11,"eq","","",73,[[["self"],["parseerror"]],["bool"]]],[11,"fmt_line","reqwest::header","Format one 'line' of a header.",109,[[["self"],["display"]],["result",["error"]]]],[11,"new","","Creates a new, empty headers map.",90,[[],["headers"]]],[11,"with_capacity","","Creates a new `Headers` struct with space reserved for `len` headers.",90,[[["usize"]],["headers"]]],[11,"set","","Set a header field to the corresponding value.",90,N],[11,"get","","Get a reference to the header field's value, if it exists.",90,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",90,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",90,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",90,[[["self"]],["option"]]],[11,"iter","","Returns an iterator over the header fields.",90,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",90,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",90,N],[11,"get_raw","","Access the raw value of a header.",90,[[["self"],["str"]],["option",["raw"]]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",90,N],[11,"append_raw","","Append a value to raw value of this header.",90,N],[11,"remove_raw","","Remove a header by name.",90,N],[11,"is","","Check if a HeaderView is a certain Header.",97,[[["self"]],["bool"]]],[11,"name","","Get the Header name as a slice.",97,[[["self"]],["str"]]],[11,"value","","Cast the value to a certain Header type.",97,[[["self"]],["option"]]],[11,"value_string","","Get just the header value as a String.",97,[[["self"]],["string"]]],[11,"raw","","Access the raw value of the header.",97,[[["self"]],["raw"]]],[11,"new","","Creates a new `Origin` header.",88,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"null","","Creates a `Null` `Origin` header.",88,[[],["origin"]]],[11,"is_null","","Checks if `Origin` is `Null`.",88,[[["self"]],["bool"]]],[11,"scheme","","The scheme, such as http or https.",88,[[["self"]],["option",["str"]]]],[11,"host","","The host, such as `Host { hostname: \"hyper.rs\".to_owned(), port: None}`.",88,[[["self"]],["option",["host"]]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",7,[[["t"],["quality"]],["qualityitem"]]],[11,"new","","Creates a new $id",94,[[["i"]],["useragent"]]],[11,"new","","Create `LinkValue` from URI-Reference.",91,[[["t"]],["linkvalue"]]],[11,"link","","Get the `LinkValue`'s value.",91,[[["self"]],["str"]]],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",91,[[["self"]],["option"]]],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",91,[[["self"]],["option",["str"]]]],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",91,[[["self"]],["option"]]],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",91,[[["self"]],["option"]]],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",91,[[["self"]],["option"]]],[11,"title","","Get the `LinkValue`'s `title` parameter.",91,[[["self"]],["option",["str"]]]],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",91,[[["self"]],["option",["str"]]]],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",91,[[["self"]],["option",["mime"]]]],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",91,[[["self"],["relationtype"]],["linkvalue"]]],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",91,[[["self"],["t"]],["linkvalue"]]],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",91,[[["self"],["relationtype"]],["linkvalue"]]],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",91,[[["self"],["languagetag"]],["linkvalue"]]],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",91,[[["self"],["mediadesc"]],["linkvalue"]]],[11,"set_title","","Set `LinkValue`'s `title` parameter.",91,[[["self"],["t"]],["linkvalue"]]],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",91,[[["self"],["t"]],["linkvalue"]]],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",91,[[["self"],["mime"]],["linkvalue"]]],[11,"including_subdomains","","Create an STS header that includes subdomains",12,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",12,[[["u64"]],["stricttransportsecurity"]]],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",14,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",14,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",14,[[["self"]],["languagetag"]]],[11,"new","","Creates a new $id",98,[[["i"]],["server"]]],[11,"new","","Creates a new Protocol with the given name and version",24,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"new","","Creates a new `Cookie` header.",87,[[],["cookie"]]],[11,"set","","Sets a name and value for the `Cookie`.",87,N],[11,"append","","Append a name and value for the `Cookie`.",87,N],[11,"get","","Get a value for the name, if it exists.",87,[[["self"],["str"]],["option",["str"]]]],[11,"iter","","Iterate cookies.",87,[[["self"]],["cookieiter"]]],[11,"len","","Returns the amount of lines.",100,[[["self"]],["usize"]]],[11,"one","","Returns the line if there is only 1.",100,[[["self"]],["option"]]],[11,"iter","","Iterate the lines of raw bytes.",100,[[["self"]],["rawlines"]]],[11,"push","","Append a line to this `Raw` header value.",100,N],[11,"star","","A constructor to easily create `Accept: */*`.",42,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",42,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",42,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",42,[[],["accept"]]],[11,"to_satisfiable_range","","Given the full length of the entity, attempt to normalize the byte range into an satisfiable end-inclusive (from, to) range.",48,[[["self"],["u64"]],["option"]]],[11,"new","","Create a `Host` header, providing the hostname and optional port.",92,[[["h"],["p"]],["host"]]],[11,"hostname","","Get the hostname, such as example.domain.",92,[[["self"]],["str"]]],[11,"port","","Get the optional port number.",92,[[["self"]],["option",["u16"]]]],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",53,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",53,[[["vec"]],["range"]]],[11,"new","","Creates a new $id",93,[[["i"]],["referer"]]],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",96,[[["vec",["linkvalue"]]],["link"]]],[11,"values","","Get the `Link` header's `LinkValue`s.",96,N],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",96,N],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",61,[[],["contenttype"]]],[11,"text","","A constructor  to easily create a `Content-Type: text/plain` header.",61,[[],["contenttype"]]],[11,"text_utf8","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",61,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html` header.",61,[[],["contenttype"]]],[11,"xml","","A constructor  to easily create a `Content-Type: text/xml` header.",61,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",61,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",61,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",61,[[],["contenttype"]]],[11,"octet_stream","","A constructor  to easily create a `Content-Type: application/octet-stream` header.",61,[[],["contenttype"]]],[11,"close","","A constructor to easily create a `Connection: close` header.",67,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",67,[[],["connection"]]],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",68,[[],["transferencoding"]]],[11,"new","","Creates a new $id",95,[[["i"]],["location"]]],[11,"as_str","reqwest::mime","Get the value of this `Name` as a string.",105,[[["self"]],["str"]]],[11,"try_from","reqwest","Try to convert a `u16` into a `StatusCode`.",72,[[["u16"]],["result",["statuscode","invalidstatuscode"]]]],[11,"as_u16","","Get the `u16` code from this `StatusCode`.",72,[[["self"]],["u16"]]],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",72,[[["self"]],["option",["str"]]]],[11,"is_informational","","Check if this `StatusCode` is within 100-199.",72,[[["self"]],["bool"]]],[11,"is_success","","Check if this `StatusCode` is within 200-299.",72,[[["self"]],["bool"]]],[11,"is_redirection","","Check if this `StatusCode` is within 300-399.",72,[[["self"]],["bool"]]],[11,"is_client_error","","Check if this `StatusCode` is within 400-499.",72,[[["self"]],["bool"]]],[11,"is_server_error","","Check if this `StatusCode` is within 500-599.",72,[[["self"]],["bool"]]],[11,"is_strange_status","","Check if this `StatusCode` is not within 100-599.",72,[[["self"]],["bool"]]],[11,"parse","","Parse an absolute URL from a string.",108,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",108,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",108,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",108,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",108,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",108,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",108,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",108,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",108,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",108,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",108,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",108,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",108,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",108,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",108,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",108,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",108,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",108,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",108,[[["self"],["f"]],["result",["hostandport","error"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",108,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",108,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",108,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",108,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",108,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",108,N],[11,"set_query","","Change this URL’s query string.",108,N],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",108,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",108,N],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",108,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",108,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",108,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",108,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",108,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",108,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",108,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",108,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",108,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",108,[[["self"]],["result",["pathbuf"]]]],[11,"new","reqwest::multipart","Creates a new Form without any content.",110,[[],["form"]]],[11,"boundary","","Get the boundary that this form will use.",110,[[["self"]],["str"]]],[11,"text","","Add a data field with supplied name and value.",110,[[["self"],["t"],["u"]],["form"]]],[11,"file","","Adds a file field.",110,[[["self"],["t"],["u"]],["result",["form"]]]],[11,"part","","Adds a customized Part.",110,[[["self"],["t"],["part"]],["form"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"text","","Makes a text parameter.",111,[[["t"]],["part"]]],[11,"reader","","Adds a generic reader.",111,[[["t"]],["part"]]],[11,"reader_with_length","","Adds a generic reader with known length.",111,[[["t"],["u64"]],["part"]]],[11,"file","","Makes a file parameter.",111,[[["t"]],["result",["part"]]]],[11,"mime","","Sets the mime, builder style.",111,[[["self"],["mime"]],["part"]]],[11,"file_name","","Sets the filename, builder style.",111,[[["self"],["t"]],["part"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ExtendedValue"],[8,"Header"],[3,"CacheControl"],[3,"IfUnmodifiedSince"],[3,"AcceptCharset"],[4,"RelationType"],[4,"IfNoneMatch"],[3,"QualityItem"],[3,"Te"],[3,"ContentLanguage"],[3,"AcceptLanguage"],[4,"ProtocolName"],[3,"StrictTransportSecurity"],[8,"Scheme"],[3,"LanguageTag"],[4,"Charset"],[4,"DispositionType"],[3,"From"],[4,"Pragma"],[4,"IfRange"],[3,"ContentRange"],[3,"Allow"],[3,"ProxyAuthorization"],[3,"AccessControlExposeHeaders"],[3,"Protocol"],[4,"Vary"],[4,"DispositionParam"],[3,"IfModifiedSince"],[4,"ContentRangeSpec"],[4,"AccessControlAllowOrigin"],[4,"Preference"],[4,"RangeUnit"],[3,"AcceptRanges"],[3,"ETag"],[4,"ConnectionOption"],[3,"AccessControlRequestMethod"],[3,"Warning"],[3,"SetCookie"],[3,"Bearer"],[3,"Date"],[4,"RetryAfter"],[3,"Authorization"],[3,"Accept"],[3,"Expires"],[3,"ContentLocation"],[3,"AccessControlAllowMethods"],[3,"Prefer"],[3,"Basic"],[4,"ByteRangeSpec"],[3,"ContentLength"],[3,"LastEventId"],[3,"EntityTag"],[3,"AccessControlRequestHeaders"],[4,"Range"],[3,"ContentEncoding"],[3,"PreferenceApplied"],[3,"AcceptEncoding"],[4,"Encoding"],[4,"CacheDirective"],[4,"ReferrerPolicy"],[3,"LastModified"],[3,"ContentType"],[3,"ContentDisposition"],[3,"Upgrade"],[4,"Expect"],[4,"IfMatch"],[3,"AccessControlAllowHeaders"],[3,"Connection"],[3,"TransferEncoding"],[4,"MediaDesc"],[3,"AccessControlMaxAge"],[4,"Method"],[4,"StatusCode"],[4,"UrlError"],[3,"Error"],[3,"Body"],[3,"Client"],[3,"ClientBuilder"],[3,"Proxy"],[3,"RedirectPolicy"],[3,"RedirectAttempt"],[3,"RedirectAction"],[3,"Request"],[3,"RequestBuilder"],[3,"Response"],[3,"Certificate"],[3,"Identity"],[3,"Cookie"],[3,"Origin"],[3,"HttpDate"],[3,"Headers"],[3,"LinkValue"],[3,"Host"],[3,"Referer"],[3,"UserAgent"],[3,"Location"],[3,"Link"],[3,"HeaderView"],[3,"Server"],[3,"AccessControlAllowCredentials"],[3,"Raw"],[3,"Quality"],[3,"HeadersItems"],[3,"CookieIter"],[3,"Mime"],[3,"Name"],[3,"Params"],[3,"FromStrError"],[3,"Url"],[3,"Formatter"],[3,"Form"],[3,"Part"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["trydemangleerror"]]],[11,"as_str","","Returns the underlying string that's being demangled.",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["safemem"]={"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",N,N],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",N,N],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",N,N]],"paths":[]};
searchIndex["scoped_tls"]={"doc":"Scoped thread-local storage","items":[[3,"ScopedKey","scoped_tls","Type representing a thread local storage key corresponding to a reference to the type parameter `T`.",N,N],[11,"set","","Inserts a value into this scoped thread local storage slot for a duration of a closure.",0,[[["self"],["t"],["f"]],["r"]]],[11,"with","","Gets a value out of this scoped variable.",0,[[["self"],["f"]],["r"]]],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",0,[[["self"]],["bool"]]],[14,"scoped_thread_local","","",N,N]],"paths":[[3,"ScopedKey"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"should_run","","",1,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,[[["t"],["f"]],["scopeguard"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["semver"]={"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",N,N],[12,"major","","The major version, to be incremented on incompatible changes.",0,N],[12,"minor","","The minor version, to be incremented when functionality is added in a backwards-compatible manner.",0,N],[12,"patch","","The patch version, to be incremented when backwards-compatible bug fixes are made.",0,N],[12,"pre","","The pre-release version identifier, if one exists.",0,N],[12,"build","","The build metadata, ignored when determining version precedence.",0,N],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version numbers. Matching operations can then be done with the `VersionReq` against a particular version to see if it satisfies some or all of the constraints.",N,N],[4,"Identifier","","An identifier in the pre-release or build metadata.",N,N],[13,"Numeric","","An identifier that's solely numbers.",1,N],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,N],[4,"SemVerError","","An error type for this crate",N,N],[13,"ParseError","","An error ocurred while parsing.",2,N],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each enumeration is one of the possible errors that can occur.",N,N],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,N],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,N],[13,"InvalidSigil","","The sigil you have written is not correct.",3,N],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,N],[13,"InvalidIdentifier","","There was an error parsing an identifier.",3,N],[13,"MajorVersionRequired","","At least a major version is required.",3,N],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,N],[13,"DeprecatedVersionRequirement","","This form of requirement is deprecated.",3,N],[11,"clone","","",1,[[["self"]],["identifier"]]],[11,"eq","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",1,[[["self"],["identifier"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["identifier"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["identifier"]],["bool"]]],[11,"le","","",1,[[["self"],["identifier"]],["bool"]]],[11,"gt","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ge","","",1,[[["self"],["identifier"]],["bool"]]],[11,"cmp","","",1,[[["self"],["identifier"]],["ordering"]]],[11,"hash","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["identifier"]],["identifier"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"clone","","",0,[[["self"]],["version"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["version"]],["version"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"clone","","",2,[[["self"]],["semvererror"]]],[11,"eq","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"ne","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",2,[[["self"],["semvererror"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"le","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"gt","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"ge","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"new","","Contructs the simple case without pre or build.",0,[[["u64"],["u64"],["u64"]],["version"]]],[11,"parse","","Parse a string into a semver object.",0,[[["str"]],["result",["version","semvererror"]]]],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,[[["self"]]]],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,[[["self"]]]],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,[[["self"]]]],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,[[["self"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result",["version","semvererror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["version"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["version"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["version"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"from","","",0,N],[11,"clone","","",4,[[["self"]],["versionreq"]]],[11,"eq","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"ne","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["versionreq"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"le","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"gt","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"ge","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"cmp","","",4,[[["self"],["versionreq"]],["ordering"]]],[11,"hash","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["versionreq"]],["versionreq"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"clone","","",3,[[["self"]],["reqparseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["reqparseerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["reqparseerror"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"from","","",3,[[["string"]],["reqparseerror"]]],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other words, any version will match against it.",4,[[],["versionreq"]]],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It takes a string like `\"^1.2.3\"` and turns it into a `VersionReq` that matches that particular constraint.",4,[[["str"]],["result",["versionreq","reqparseerror"]]]],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,[[["version"]],["versionreq"]]],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,[[["self"],["version"]],["bool"]]],[11,"from_str","","",4,[[["str"]],["result",["versionreq","reqparseerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Version"],[4,"Identifier"],[4,"SemVerError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["semver_parser"]={"doc":"","items":[[0,"version","semver_parser","",N,N],[3,"Version","semver_parser::version","",N,N],[12,"major","","",0,N],[12,"minor","","",0,N],[12,"patch","","",0,N],[12,"pre","","",0,N],[12,"build","","",0,N],[4,"Identifier","","",N,N],[13,"Numeric","","An identifier that's solely numbers.",1,N],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,N],[5,"parse","","",N,[[["str"]],["result",["version","string"]]]],[11,"clone","","",0,[[["self"]],["version"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["version"]],["bool"]]],[11,"ne","","",0,[[["self"],["version"]],["bool"]]],[11,"clone","","",1,[[["self"]],["identifier"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",1,[[["self"],["identifier"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"range","semver_parser","",N,N],[3,"VersionReq","semver_parser::range","",N,N],[12,"predicates","","",2,N],[3,"Predicate","","",N,N],[12,"op","","",3,N],[12,"major","","",3,N],[12,"minor","","",3,N],[12,"patch","","",3,N],[12,"pre","","",3,N],[4,"WildcardVersion","","",N,N],[13,"Major","","",4,N],[13,"Minor","","",4,N],[13,"Patch","","",4,N],[4,"Op","","",N,N],[13,"Ex","","",5,N],[13,"Gt","","",5,N],[13,"GtEq","","",5,N],[13,"Lt","","",5,N],[13,"LtEq","","",5,N],[13,"Tilde","","",5,N],[13,"Compatible","","",5,N],[13,"Wildcard","","",5,N],[5,"parse_predicate","","",N,[[["str"]],["result",["predicate","string"]]]],[5,"parse","","",N,[[["str"]],["result",["versionreq","string"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["wildcardversion"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["op"]],["bool"]]],[11,"ne","","",5,[[["self"],["op"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"]],["result",["op","string"]]]],[11,"eq","","",3,[[["self"],["predicate"]],["bool"]]],[11,"ne","","",3,[[["self"],["predicate"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Version"],[4,"Identifier"],[3,"VersionReq"],[3,"Predicate"],[4,"WildcardVersion"],[4,"Op"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"from_str","serde_json","",2,[[["str"]],["result"]]],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",5,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,[[["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["category"]]],[11,"eq","","",4,[[["self"],["category"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"invalid_type","","",5,[[["unexpected"],["expected"]],["self"]]],[11,"custom","","",5,[[["t"]],["error"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",6,N],[13,"Occupied","","An occupied Entry.",6,N],[11,"new","","Makes a new empty Map.",7,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",7,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",7,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",7,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",7,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",7,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",7,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,[[["self"]],["valuesmut"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"index","","",7,[[["self"],["q"]],["value"]]],[11,"index_mut","","",7,[[["self"],["q"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"from_iter","","",7,[[["t"]],["self"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"key","","Returns a reference to this entry's key.",6,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",9,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,[[["self"]],["value"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"into_iter","","",7,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",16,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,N],[13,"Solidus","","An escaped solidus `/`",16,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",17,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",17,[[["self"],["w"]],["result"]]],[11,"new","","Creates a new JSON serializer.",18,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",18,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,[[["self"]],["w"]]],[11,"clone","","",19,[[["self"]],["compactformatter"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["prettyformatter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,N],[11,"default","","",20,[[],["self"]]],[11,"begin_array","","",20,[[["self"],["w"]],["result"]]],[11,"end_array","","",20,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object","","",20,[[["self"],["w"]],["result"]]],[11,"end_object","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",20,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",20,[[["self"],["w"]],["result"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"clone","","",0,[[["self"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"clone","serde_json","",2,[[["self"]],["number"]]],[11,"eq","","",2,[[["self"],["number"]],["bool"]]],[11,"ne","","",2,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,[[["f64"]],["option",["number"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,[[["r"]],["self"]]],[11,"next","","",21,[[["self"]],["result",["option"]]]],[11,"peek","","",21,[[["self"]],["result",["option"]]]],[11,"discard","","",21,[[["self"]]]],[11,"position","","",21,[[["self"]],["position"]]],[11,"peek_position","","",21,[[["self"]],["position"]]],[11,"byte_offset","","",21,[[["self"]],["usize"]]],[11,"parse_str","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",21,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,N],[11,"next","","",22,[[["self"]],["result",["option"]]]],[11,"peek","","",22,[[["self"]],["result",["option"]]]],[11,"discard","","",22,[[["self"]]]],[11,"position","","",22,[[["self"]],["position"]]],[11,"peek_position","","",22,[[["self"]],["position"]]],[11,"byte_offset","","",22,[[["self"]],["usize"]]],[11,"parse_str","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",22,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,[[["str"]],["self"]]],[11,"next","","",23,[[["self"]],["result",["option"]]]],[11,"peek","","",23,[[["self"]],["result",["option"]]]],[11,"discard","","",23,[[["self"]]]],[11,"position","","",23,[[["self"]],["position"]]],[11,"peek_position","","",23,[[["self"]],["position"]]],[11,"byte_offset","","",23,[[["self"]],["usize"]]],[11,"parse_str","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",23,[[["self"]],["result"]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_urlencoded"]={"doc":"`x-www-form-urlencoded` meets Serde","items":[[3,"Deserializer","serde_urlencoded","A deserializer for the `application/x-www-form-urlencoded` format.",N,N],[3,"Serializer","","A serializer for the `application/x-www-form-urlencoded` format.",N,N],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",N,N],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",N,[[["r"]],["result",["error"]]]],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",N,[[["str"]],["result",["error"]]]],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",N,[[["t"]],["result",["string","error"]]]],[0,"de","","Deserialization support for the `application/x-www-form-urlencoded` format.",N,N],[3,"Error","serde_urlencoded::de","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"Deserializer","","A deserializer for the `application/x-www-form-urlencoded` format.",N,N],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",N,N],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",N,[[["str"]],["result",["error"]]]],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",N,[[["r"]],["result",["error"]]]],[11,"new","","Returns a new `Deserializer`.",0,[[["urlencodedparse"]],["self"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[0,"ser","serde_urlencoded","Serialization support for the `application/x-www-form-urlencoded` format.",N,N],[3,"Serializer","serde_urlencoded::ser","A serializer for the `application/x-www-form-urlencoded` format.",N,N],[3,"SeqSerializer","","Sequence serializer.",N,N],[3,"TupleSerializer","","Tuple serializer.",N,N],[3,"TupleStructSerializer","","Tuple struct serializer.",N,N],[3,"TupleVariantSerializer","","Tuple variant serializer.",N,N],[3,"MapSerializer","","Map serializer.",N,N],[3,"StructSerializer","","Struct serializer.",N,N],[3,"StructVariantSerializer","","Struct variant serializer.",N,N],[4,"Error","","Errors returned during serializing to `application/x-www-form-urlencoded`.",N,N],[13,"Custom","","",1,N],[13,"Utf8","","",1,N],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",N,[[["t"]],["result",["string","error"]]]],[11,"new","","Returns a new `Serializer`.",2,[[["urlencodedserializer"]],["self"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","The lower-level cause of this error, in the case of a `Utf8` error.",1,[[["self"]],["option",["error"]]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"serialize_bool","","Returns an error.",2,[[["self"],["bool"]],["result",["error"]]]],[11,"serialize_i8","","Returns an error.",2,[[["self"],["i8"]],["result",["error"]]]],[11,"serialize_i16","","Returns an error.",2,[[["self"],["i16"]],["result",["error"]]]],[11,"serialize_i32","","Returns an error.",2,[[["self"],["i32"]],["result",["error"]]]],[11,"serialize_i64","","Returns an error.",2,[[["self"],["i64"]],["result",["error"]]]],[11,"serialize_u8","","Returns an error.",2,[[["self"],["u8"]],["result",["error"]]]],[11,"serialize_u16","","Returns an error.",2,[[["self"],["u16"]],["result",["error"]]]],[11,"serialize_u32","","Returns an error.",2,[[["self"],["u32"]],["result",["error"]]]],[11,"serialize_u64","","Returns an error.",2,[[["self"],["u64"]],["result",["error"]]]],[11,"serialize_f32","","Returns an error.",2,[[["self"],["f32"]],["result",["error"]]]],[11,"serialize_f64","","Returns an error.",2,[[["self"],["f64"]],["result",["error"]]]],[11,"serialize_char","","Returns an error.",2,[[["self"],["char"]],["result",["error"]]]],[11,"serialize_str","","Returns an error.",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_bytes","","Returns an error.",2,N],[11,"serialize_unit","","Returns an error.",2,[[["self"]],["result",["error"]]]],[11,"serialize_unit_struct","","Returns an error.",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_unit_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"]],["result",["error"]]]],[11,"serialize_newtype_struct","","Serializes the inner value, ignoring the newtype name.",2,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"serialize_newtype_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"],["t"]],["result",["error"]]]],[11,"serialize_none","","Returns `Ok`.",2,[[["self"]],["result",["error"]]]],[11,"serialize_some","","Serializes the given value.",2,[[["self"],["t"]],["result",["error"]]]],[11,"serialize_seq","","Serialize a sequence, given length (if any) is ignored.",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_tuple","","Returns an error.",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_struct","","Returns an error.",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_map","","Serializes a map, given length is ignored.",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_struct","","Serializes a struct, given length is ignored.",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_struct_variant","","Returns an error.",2,[[["self"],["str"],["u32"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_element","","",3,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",3,[[["self"]],["result",["error"]]]],[11,"serialize_element","","",4,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",4,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",5,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",5,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",6,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",6,[[["self"]],["result",["error"]]]],[11,"serialize_entry","","",7,[[["self"],["k"],["v"]],["result",["error"]]]],[11,"serialize_key","","",7,[[["self"],["t"]],["result",["error"]]]],[11,"serialize_value","","",7,[[["self"],["t"]],["result",["error"]]]],[11,"end","","",7,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",8,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"end","","",8,[[["self"]],["result",["error"]]]],[11,"serialize_field","","",9,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"end","","",9,[[["self"]],["result",["error"]]]],[11,"fmt","serde_urlencoded::de","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",10,[[["self"]],["error"]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"custom","","",10,[[["t"]],["error"]]],[11,"custom","","",10,[[["t"]],["error"]]],[11,"eq","","",10,[[["self"],["error"]],["bool"]]],[11,"ne","","",10,[[["self"],["error"]],["bool"]]]],"paths":[[3,"Deserializer"],[4,"Error"],[3,"Serializer"],[3,"SeqSerializer"],[3,"TupleSerializer"],[3,"TupleStructSerializer"],[3,"TupleVariantSerializer"],[3,"MapSerializer"],[3,"StructSerializer"],[3,"StructVariantSerializer"],[3,"Error"]]};
searchIndex["siphasher"]={"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",N,N],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",N,N],[3,"SipHasher24","","An implementation of SipHash 2-4.",N,N],[3,"SipHasher","","An implementation of SipHash 2-4.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["siphasher13"]]],[11,"default","","",0,[[],["siphasher13"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["siphasher24"]]],[11,"default","","",1,[[],["siphasher24"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["siphasher"]]],[11,"default","","",2,[[],["siphasher"]]],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,[[["u64"],["u64"]],["siphasher"]]],[11,"keys","","Get the keys used by this hasher",2,N],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,[[],["siphasher13"]]],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,[[["u64"],["u64"]],["siphasher13"]]],[11,"keys","","Get the keys used by this hasher",0,N],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,[[],["siphasher24"]]],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,[[["u64"],["u64"]],["siphasher24"]]],[11,"keys","","Get the keys used by this hasher",1,N],[11,"write","","",2,N],[11,"finish","","",2,[[["self"]],["u64"]]],[11,"write","","",0,N],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",1,N],[11,"finish","","",1,[[["self"]],["u64"]]],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",N,N],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",N,N],[12,"h1","","",3,N],[12,"h2","","",3,N],[3,"SipHasher13","","An implementation of SipHash128 1-3.",N,N],[3,"SipHasher24","","An implementation of SipHash128 2-4.",N,N],[3,"SipHasher","","An implementation of SipHash128 2-4.",N,N],[8,"Hasher128","","",N,N],[10,"finish128","","Return a 128-bit hash",4,[[["self"]],["hash128"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["hash128"]]],[11,"default","","",3,[[],["hash128"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["siphasher13"]]],[11,"default","","",5,[[],["siphasher13"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["siphasher24"]]],[11,"default","","",6,[[],["siphasher24"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["siphasher"]]],[11,"default","","",7,[[],["siphasher"]]],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,[[["u64"],["u64"]],["siphasher"]]],[11,"keys","","Get the keys used by this hasher",7,N],[11,"finish128","","Return a 128-bit hash",7,[[["self"]],["hash128"]]],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,[[],["siphasher13"]]],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,[[["u64"],["u64"]],["siphasher13"]]],[11,"keys","","Get the keys used by this hasher",5,N],[11,"finish128","","Return a 128-bit hash",5,[[["self"]],["hash128"]]],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,[[],["siphasher24"]]],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,[[["u64"],["u64"]],["siphasher24"]]],[11,"keys","","Get the keys used by this hasher",6,N],[11,"finish128","","Return a 128-bit hash",6,[[["self"]],["hash128"]]],[11,"write","","",7,N],[11,"finish","","",7,[[["self"]],["u64"]]],[11,"write","","",5,N],[11,"finish","","",5,[[["self"]],["u64"]]],[11,"write","","",6,N],[11,"finish","","",6,[[["self"]],["u64"]]],[11,"as_bytes","","Convert into a 16-bytes vector",3,N]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slab"]={"doc":"Pre-allocated storage for a uniform data type.","items":[[3,"Slab","slab","Pre-allocated storage for a uniform data type",N,N],[3,"VacantEntry","","A handle to an vacant entry in a `Slab`.",N,N],[3,"Iter","","An iterator over the values stored in the `Slab`",N,N],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",N,N],[11,"clone","","",0,[[["self"]],["slab"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new, empty `Slab`.",0,[[],["slab"]]],[11,"with_capacity","","Construct a new, empty `Slab` with the specified capacity.",0,[[["usize"]],["slab"]]],[11,"capacity","","Returns the number of values the slab can store without reallocating.",0,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more values to be stored without allocating.",0,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity required to store exactly `additional` more values.",0,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the slab as much as possible.",0,[[["self"]]]],[11,"clear","","Clear the slab of all values",0,[[["self"]]]],[11,"len","","Returns the number of stored values",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if no values are stored in the slab",0,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the slab",0,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator that allows modifying each value.",0,[[["self"]],["itermut"]]],[11,"get","","Returns a reference to the value associated with the given key",0,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the value associated with the given key",0,[[["self"],["usize"]],["option"]]],[11,"get_unchecked","","Returns a reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"get_unchecked_mut","","Returns a mutable reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert a value in the slab, returning key assigned to the value",0,[[["self"],["t"]],["usize"]]],[11,"vacant_entry","","Returns a handle to a vacant entry allowing for further manipulation.",0,[[["self"]],["vacantentry"]]],[11,"remove","","Removes and returns the value associated with the given key.",0,[[["self"],["usize"]],["t"]]],[11,"contains","","Returns `true` if a value is associated with the given key.",0,[[["self"],["usize"]],["bool"]]],[11,"retain","","Retain only the elements specified by the predicate.",0,[[["self"],["f"]]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"insert","","Insert a value in the entry, returning a mutable reference to the value.",1,[[["self"],["t"]],["t"]]],[11,"key","","Return the key associated with this entry.",1,[[["self"]],["usize"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]]],"paths":[[3,"Slab"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["strsim"]={"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",N,N],[13,"DifferentLengthArgs","","",0,N],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",N,[[["str"],["str"]],["hammingresult"]]],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",N,[[["str"],["str"]],["f64"]]],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",N,[[["str"],["str"]],["f64"]]],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",N,[[["str"],["str"]],["usize"]]],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",N,[[["str"],["str"]],["usize"]]],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",N,[[["str"],["str"]],["usize"]]],[6,"HammingResult","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["strsimerror"]],["bool"]]]],"paths":[[4,"StrSimError"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"lifetimes","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",58,N],[12,"eq_token","","",58,N],[12,"ty","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Catch","","A catch expression: `do catch { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",87,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",88,N],[3,"Add","","`+`",N,N],[12,"0","","",89,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",90,N],[3,"And","","`&`",N,N],[12,"0","","",91,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",92,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",93,N],[3,"At","","`@`",N,N],[12,"0","","",94,N],[3,"Bang","","`!`",N,N],[12,"0","","",95,N],[3,"Caret","","`^`",N,N],[12,"0","","",96,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",97,N],[3,"Colon","","`:`",N,N],[12,"0","","",98,N],[3,"Colon2","","`::`",N,N],[12,"0","","",99,N],[3,"Comma","","`,`",N,N],[12,"0","","",100,N],[3,"Div","","`/`",N,N],[12,"0","","",101,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",102,N],[3,"Dollar","","`$`",N,N],[12,"0","","",103,N],[3,"Dot","","`.`",N,N],[12,"0","","",104,N],[3,"Dot2","","`..`",N,N],[12,"0","","",105,N],[3,"Dot3","","`...`",N,N],[12,"0","","",106,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",107,N],[3,"Eq","","`=`",N,N],[12,"0","","",108,N],[3,"EqEq","","`==`",N,N],[12,"0","","",109,N],[3,"Ge","","`>=`",N,N],[12,"0","","",110,N],[3,"Gt","","`>`",N,N],[12,"0","","",111,N],[3,"Le","","`<=`",N,N],[12,"0","","",112,N],[3,"Lt","","`<`",N,N],[12,"0","","",113,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",114,N],[3,"Ne","","`!=`",N,N],[12,"0","","",115,N],[3,"Or","","`|`",N,N],[12,"0","","",116,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",117,N],[3,"OrOr","","`||`",N,N],[12,"0","","",118,N],[3,"Pound","","`#`",N,N],[12,"0","","",119,N],[3,"Question","","`?`",N,N],[12,"0","","",120,N],[3,"RArrow","","`->`",N,N],[12,"0","","",121,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",122,N],[3,"Rem","","`%`",N,N],[12,"0","","",123,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",124,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",125,N],[3,"Semi","","`;`",N,N],[12,"0","","",126,N],[3,"Shl","","`<<`",N,N],[12,"0","","",127,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",128,N],[3,"Shr","","`>>`",N,N],[12,"0","","",129,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",130,N],[3,"Star","","`*`",N,N],[12,"0","","",131,N],[3,"Sub","","`-`",N,N],[12,"0","","",132,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",133,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",134,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",135,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",136,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",137,N],[3,"As","","`as`",N,N],[12,"0","","",138,N],[3,"Auto","","`auto`",N,N],[12,"0","","",139,N],[3,"Box","","`box`",N,N],[12,"0","","",140,N],[3,"Break","","`break`",N,N],[12,"0","","",141,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",142,N],[3,"Catch","","`catch`",N,N],[12,"0","","",143,N],[3,"Const","","`const`",N,N],[12,"0","","",144,N],[3,"Continue","","`continue`",N,N],[12,"0","","",145,N],[3,"Crate","","`crate`",N,N],[12,"0","","",146,N],[3,"Default","","`default`",N,N],[12,"0","","",147,N],[3,"Do","","`do`",N,N],[12,"0","","",148,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",149,N],[3,"Else","","`else`",N,N],[12,"0","","",150,N],[3,"Enum","","`enum`",N,N],[12,"0","","",151,N],[3,"Extern","","`extern`",N,N],[12,"0","","",152,N],[3,"Fn","","`fn`",N,N],[12,"0","","",153,N],[3,"For","","`for`",N,N],[12,"0","","",154,N],[3,"If","","`if`",N,N],[12,"0","","",155,N],[3,"Impl","","`impl`",N,N],[12,"0","","",156,N],[3,"In","","`in`",N,N],[12,"0","","",157,N],[3,"Let","","`let`",N,N],[12,"0","","",158,N],[3,"Loop","","`loop`",N,N],[12,"0","","",159,N],[3,"Macro","","`macro`",N,N],[12,"0","","",160,N],[3,"Match","","`match`",N,N],[12,"0","","",161,N],[3,"Mod","","`mod`",N,N],[12,"0","","",162,N],[3,"Move","","`move`",N,N],[12,"0","","",163,N],[3,"Mut","","`mut`",N,N],[12,"0","","",164,N],[3,"Pub","","`pub`",N,N],[12,"0","","",165,N],[3,"Ref","","`ref`",N,N],[12,"0","","",166,N],[3,"Return","","`return`",N,N],[12,"0","","",167,N],[3,"Self_","","`self`",N,N],[12,"0","","",168,N],[3,"Static","","`static`",N,N],[12,"0","","",169,N],[3,"Struct","","`struct`",N,N],[12,"0","","",170,N],[3,"Super","","`super`",N,N],[12,"0","","",171,N],[3,"Trait","","`trait`",N,N],[12,"0","","",172,N],[3,"Type","","`type`",N,N],[12,"0","","",173,N],[3,"Union","","`union`",N,N],[12,"0","","",174,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",175,N],[3,"Use","","`use`",N,N],[12,"0","","",176,N],[3,"Where","","`where`",N,N],[12,"0","","",177,N],[3,"While","","`while`",N,N],[12,"0","","",178,N],[3,"Yield","","`yield`",N,N],[12,"0","","",179,N],[11,"clone","","",87,[[["self"]],["underscore"]]],[11,"new","","",87,[[["span"]],["self"]]],[11,"default","","",87,[[],["self"]]],[11,"from","","",87,[[["span"]],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"clone","","",88,[[["self"]],["apostrophe"]]],[11,"new","","",88,[[["span"]],["self"]]],[11,"default","","",88,[[],["self"]]],[11,"from","","",88,[[["span"]],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",88,[[],["option",["str"]]]],[11,"clone","","",89,[[["self"]],["add"]]],[11,"new","","",89,[[["span"]],["self"]]],[11,"default","","",89,[[],["self"]]],[11,"from","","",89,[[["span"]],["self"]]],[11,"clone","","",90,[[["self"]],["addeq"]]],[11,"new","","",90,[[["span"]],["self"]]],[11,"default","","",90,[[],["self"]]],[11,"from","","",90,[[["span"]],["self"]]],[11,"clone","","",91,[[["self"]],["and"]]],[11,"new","","",91,[[["span"]],["self"]]],[11,"default","","",91,[[],["self"]]],[11,"from","","",91,[[["span"]],["self"]]],[11,"clone","","",92,[[["self"]],["andand"]]],[11,"new","","",92,[[["span"]],["self"]]],[11,"default","","",92,[[],["self"]]],[11,"from","","",92,[[["span"]],["self"]]],[11,"clone","","",93,[[["self"]],["andeq"]]],[11,"new","","",93,[[["span"]],["self"]]],[11,"default","","",93,[[],["self"]]],[11,"from","","",93,[[["span"]],["self"]]],[11,"clone","","",94,[[["self"]],["at"]]],[11,"new","","",94,[[["span"]],["self"]]],[11,"default","","",94,[[],["self"]]],[11,"from","","",94,[[["span"]],["self"]]],[11,"clone","","",95,[[["self"]],["bang"]]],[11,"new","","",95,[[["span"]],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"from","","",95,[[["span"]],["self"]]],[11,"clone","","",96,[[["self"]],["caret"]]],[11,"new","","",96,[[["span"]],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"from","","",96,[[["span"]],["self"]]],[11,"clone","","",97,[[["self"]],["careteq"]]],[11,"new","","",97,[[["span"]],["self"]]],[11,"default","","",97,[[],["self"]]],[11,"from","","",97,[[["span"]],["self"]]],[11,"clone","","",98,[[["self"]],["colon"]]],[11,"new","","",98,[[["span"]],["self"]]],[11,"default","","",98,[[],["self"]]],[11,"from","","",98,[[["span"]],["self"]]],[11,"clone","","",99,[[["self"]],["colon2"]]],[11,"new","","",99,[[["span"]],["self"]]],[11,"default","","",99,[[],["self"]]],[11,"from","","",99,[[["span"]],["self"]]],[11,"clone","","",100,[[["self"]],["comma"]]],[11,"new","","",100,[[["span"]],["self"]]],[11,"default","","",100,[[],["self"]]],[11,"from","","",100,[[["span"]],["self"]]],[11,"clone","","",101,[[["self"]],["div"]]],[11,"new","","",101,[[["span"]],["self"]]],[11,"default","","",101,[[],["self"]]],[11,"from","","",101,[[["span"]],["self"]]],[11,"clone","","",102,[[["self"]],["diveq"]]],[11,"new","","",102,[[["span"]],["self"]]],[11,"default","","",102,[[],["self"]]],[11,"from","","",102,[[["span"]],["self"]]],[11,"clone","","",103,[[["self"]],["dollar"]]],[11,"new","","",103,[[["span"]],["self"]]],[11,"default","","",103,[[],["self"]]],[11,"from","","",103,[[["span"]],["self"]]],[11,"clone","","",104,[[["self"]],["dot"]]],[11,"new","","",104,[[["span"]],["self"]]],[11,"default","","",104,[[],["self"]]],[11,"from","","",104,[[["span"]],["self"]]],[11,"clone","","",105,[[["self"]],["dot2"]]],[11,"new","","",105,[[["span"]],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"from","","",105,[[["span"]],["self"]]],[11,"clone","","",106,[[["self"]],["dot3"]]],[11,"new","","",106,[[["span"]],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"from","","",106,[[["span"]],["self"]]],[11,"clone","","",107,[[["self"]],["dotdoteq"]]],[11,"new","","",107,[[["span"]],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"from","","",107,[[["span"]],["self"]]],[11,"clone","","",108,[[["self"]],["eq"]]],[11,"new","","",108,[[["span"]],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"from","","",108,[[["span"]],["self"]]],[11,"clone","","",109,[[["self"]],["eqeq"]]],[11,"new","","",109,[[["span"]],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"from","","",109,[[["span"]],["self"]]],[11,"clone","","",110,[[["self"]],["ge"]]],[11,"new","","",110,[[["span"]],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"from","","",110,[[["span"]],["self"]]],[11,"clone","","",111,[[["self"]],["gt"]]],[11,"new","","",111,[[["span"]],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"from","","",111,[[["span"]],["self"]]],[11,"clone","","",112,[[["self"]],["le"]]],[11,"new","","",112,[[["span"]],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"from","","",112,[[["span"]],["self"]]],[11,"clone","","",113,[[["self"]],["lt"]]],[11,"new","","",113,[[["span"]],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"from","","",113,[[["span"]],["self"]]],[11,"clone","","",114,[[["self"]],["muleq"]]],[11,"new","","",114,[[["span"]],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"from","","",114,[[["span"]],["self"]]],[11,"clone","","",115,[[["self"]],["ne"]]],[11,"new","","",115,[[["span"]],["self"]]],[11,"default","","",115,[[],["self"]]],[11,"from","","",115,[[["span"]],["self"]]],[11,"clone","","",116,[[["self"]],["or"]]],[11,"new","","",116,[[["span"]],["self"]]],[11,"default","","",116,[[],["self"]]],[11,"from","","",116,[[["span"]],["self"]]],[11,"clone","","",117,[[["self"]],["oreq"]]],[11,"new","","",117,[[["span"]],["self"]]],[11,"default","","",117,[[],["self"]]],[11,"from","","",117,[[["span"]],["self"]]],[11,"clone","","",118,[[["self"]],["oror"]]],[11,"new","","",118,[[["span"]],["self"]]],[11,"default","","",118,[[],["self"]]],[11,"from","","",118,[[["span"]],["self"]]],[11,"clone","","",119,[[["self"]],["pound"]]],[11,"new","","",119,[[["span"]],["self"]]],[11,"default","","",119,[[],["self"]]],[11,"from","","",119,[[["span"]],["self"]]],[11,"clone","","",120,[[["self"]],["question"]]],[11,"new","","",120,[[["span"]],["self"]]],[11,"default","","",120,[[],["self"]]],[11,"from","","",120,[[["span"]],["self"]]],[11,"clone","","",121,[[["self"]],["rarrow"]]],[11,"new","","",121,[[["span"]],["self"]]],[11,"default","","",121,[[],["self"]]],[11,"from","","",121,[[["span"]],["self"]]],[11,"clone","","",122,[[["self"]],["larrow"]]],[11,"new","","",122,[[["span"]],["self"]]],[11,"default","","",122,[[],["self"]]],[11,"from","","",122,[[["span"]],["self"]]],[11,"clone","","",123,[[["self"]],["rem"]]],[11,"new","","",123,[[["span"]],["self"]]],[11,"default","","",123,[[],["self"]]],[11,"from","","",123,[[["span"]],["self"]]],[11,"clone","","",124,[[["self"]],["remeq"]]],[11,"new","","",124,[[["span"]],["self"]]],[11,"default","","",124,[[],["self"]]],[11,"from","","",124,[[["span"]],["self"]]],[11,"clone","","",125,[[["self"]],["fatarrow"]]],[11,"new","","",125,[[["span"]],["self"]]],[11,"default","","",125,[[],["self"]]],[11,"from","","",125,[[["span"]],["self"]]],[11,"clone","","",126,[[["self"]],["semi"]]],[11,"new","","",126,[[["span"]],["self"]]],[11,"default","","",126,[[],["self"]]],[11,"from","","",126,[[["span"]],["self"]]],[11,"clone","","",127,[[["self"]],["shl"]]],[11,"new","","",127,[[["span"]],["self"]]],[11,"default","","",127,[[],["self"]]],[11,"from","","",127,[[["span"]],["self"]]],[11,"clone","","",128,[[["self"]],["shleq"]]],[11,"new","","",128,[[["span"]],["self"]]],[11,"default","","",128,[[],["self"]]],[11,"from","","",128,[[["span"]],["self"]]],[11,"clone","","",129,[[["self"]],["shr"]]],[11,"new","","",129,[[["span"]],["self"]]],[11,"default","","",129,[[],["self"]]],[11,"from","","",129,[[["span"]],["self"]]],[11,"clone","","",130,[[["self"]],["shreq"]]],[11,"new","","",130,[[["span"]],["self"]]],[11,"default","","",130,[[],["self"]]],[11,"from","","",130,[[["span"]],["self"]]],[11,"clone","","",131,[[["self"]],["star"]]],[11,"new","","",131,[[["span"]],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"from","","",131,[[["span"]],["self"]]],[11,"clone","","",132,[[["self"]],["sub"]]],[11,"new","","",132,[[["span"]],["self"]]],[11,"default","","",132,[[],["self"]]],[11,"from","","",132,[[["span"]],["self"]]],[11,"clone","","",133,[[["self"]],["subeq"]]],[11,"new","","",133,[[["span"]],["self"]]],[11,"default","","",133,[[],["self"]]],[11,"from","","",133,[[["span"]],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["cursor"]],["presult",["add"]]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["cursor"]],["presult",["and"]]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",93,[[],["option",["str"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["cursor"]],["presult",["at"]]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["cursor"]],["presult",["div"]]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",109,[[],["option",["str"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",110,[[],["option",["str"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["cursor"]],["presult",["le"]]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",115,[[],["option",["str"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["cursor"]],["presult",["or"]]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["cursor"]],["presult",["question"]]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",124,[[],["option",["str"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",126,[[],["option",["str"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",127,[[],["option",["str"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",128,[[],["option",["str"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["cursor"]],["presult",["star"]]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"clone","","",134,[[["self"]],["brace"]]],[11,"default","","",134,[[],["self"]]],[11,"surround","","",134,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",134,[[["cursor"],["f"]],["presult"]]],[11,"from","","",134,[[["span"]],["self"]]],[11,"clone","","",135,[[["self"]],["bracket"]]],[11,"default","","",135,[[],["self"]]],[11,"surround","","",135,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",135,[[["cursor"],["f"]],["presult"]]],[11,"from","","",135,[[["span"]],["self"]]],[11,"clone","","",136,[[["self"]],["paren"]]],[11,"default","","",136,[[],["self"]]],[11,"surround","","",136,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",136,[[["cursor"],["f"]],["presult"]]],[11,"from","","",136,[[["span"]],["self"]]],[11,"clone","","",137,[[["self"]],["group"]]],[11,"default","","",137,[[],["self"]]],[11,"surround","","",137,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",137,[[["cursor"],["f"]],["presult"]]],[11,"from","","",137,[[["span"]],["self"]]],[11,"clone","","",138,[[["self"]],["as"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["cursor"]],["presult",["as"]]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"from","","",138,[[["span"]],["self"]]],[11,"clone","","",139,[[["self"]],["auto"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"from","","",139,[[["span"]],["self"]]],[11,"clone","","",140,[[["self"]],["box"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["cursor"]],["presult",["box"]]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"from","","",140,[[["span"]],["self"]]],[11,"clone","","",141,[[["self"]],["break"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["cursor"]],["presult",["break"]]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"from","","",141,[[["span"]],["self"]]],[11,"clone","","",142,[[["self"]],["capself"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"from","","",142,[[["span"]],["self"]]],[11,"clone","","",143,[[["self"]],["catch"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"from","","",143,[[["span"]],["self"]]],[11,"clone","","",144,[[["self"]],["const"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["cursor"]],["presult",["const"]]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"from","","",144,[[["span"]],["self"]]],[11,"clone","","",145,[[["self"]],["continue"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"from","","",145,[[["span"]],["self"]]],[11,"clone","","",146,[[["self"]],["crate"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",146,[[],["option",["str"]]]],[11,"from","","",146,[[["span"]],["self"]]],[11,"clone","","",147,[[["self"]],["default"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["cursor"]],["presult",["default"]]]],[11,"description","","",147,[[],["option",["str"]]]],[11,"from","","",147,[[["span"]],["self"]]],[11,"clone","","",148,[[["self"]],["do"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["cursor"]],["presult",["do"]]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"from","","",148,[[["span"]],["self"]]],[11,"clone","","",149,[[["self"]],["dyn"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"from","","",149,[[["span"]],["self"]]],[11,"clone","","",150,[[["self"]],["else"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["cursor"]],["presult",["else"]]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"from","","",150,[[["span"]],["self"]]],[11,"clone","","",151,[[["self"]],["enum"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"from","","",151,[[["span"]],["self"]]],[11,"clone","","",152,[[["self"]],["extern"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"from","","",152,[[["span"]],["self"]]],[11,"clone","","",153,[[["self"]],["fn"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",153,[[],["option",["str"]]]],[11,"from","","",153,[[["span"]],["self"]]],[11,"clone","","",154,[[["self"]],["for"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["cursor"]],["presult",["for"]]]],[11,"description","","",154,[[],["option",["str"]]]],[11,"from","","",154,[[["span"]],["self"]]],[11,"clone","","",155,[[["self"]],["if"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["cursor"]],["presult",["if"]]]],[11,"description","","",155,[[],["option",["str"]]]],[11,"from","","",155,[[["span"]],["self"]]],[11,"clone","","",156,[[["self"]],["impl"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",156,[[],["option",["str"]]]],[11,"from","","",156,[[["span"]],["self"]]],[11,"clone","","",157,[[["self"]],["in"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["cursor"]],["presult",["in"]]]],[11,"description","","",157,[[],["option",["str"]]]],[11,"from","","",157,[[["span"]],["self"]]],[11,"clone","","",158,[[["self"]],["let"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["cursor"]],["presult",["let"]]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"from","","",158,[[["span"]],["self"]]],[11,"clone","","",159,[[["self"]],["loop"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"from","","",159,[[["span"]],["self"]]],[11,"clone","","",160,[[["self"]],["macro"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"from","","",160,[[["span"]],["self"]]],[11,"clone","","",161,[[["self"]],["match"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["cursor"]],["presult",["match"]]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"from","","",161,[[["span"]],["self"]]],[11,"clone","","",162,[[["self"]],["mod"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"from","","",162,[[["span"]],["self"]]],[11,"clone","","",163,[[["self"]],["move"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["cursor"]],["presult",["move"]]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"from","","",163,[[["span"]],["self"]]],[11,"clone","","",164,[[["self"]],["mut"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"from","","",164,[[["span"]],["self"]]],[11,"clone","","",165,[[["self"]],["pub"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"from","","",165,[[["span"]],["self"]]],[11,"clone","","",166,[[["self"]],["ref"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"from","","",166,[[["span"]],["self"]]],[11,"clone","","",167,[[["self"]],["return"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["cursor"]],["presult",["return"]]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"from","","",167,[[["span"]],["self"]]],[11,"clone","","",168,[[["self"]],["self_"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"from","","",168,[[["span"]],["self"]]],[11,"clone","","",169,[[["self"]],["static"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["cursor"]],["presult",["static"]]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"from","","",169,[[["span"]],["self"]]],[11,"clone","","",170,[[["self"]],["struct"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"from","","",170,[[["span"]],["self"]]],[11,"clone","","",171,[[["self"]],["super"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["cursor"]],["presult",["super"]]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"from","","",171,[[["span"]],["self"]]],[11,"clone","","",172,[[["self"]],["trait"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"from","","",172,[[["span"]],["self"]]],[11,"clone","","",173,[[["self"]],["type"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["cursor"]],["presult",["type"]]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"from","","",173,[[["span"]],["self"]]],[11,"clone","","",174,[[["self"]],["union"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["cursor"]],["presult",["union"]]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"from","","",174,[[["span"]],["self"]]],[11,"clone","","",175,[[["self"]],["unsafe"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",175,[[],["option",["str"]]]],[11,"from","","",175,[[["span"]],["self"]]],[11,"clone","","",176,[[["self"]],["use"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["cursor"]],["presult",["use"]]]],[11,"description","","",176,[[],["option",["str"]]]],[11,"from","","",176,[[["span"]],["self"]]],[11,"clone","","",177,[[["self"]],["where"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["cursor"]],["presult",["where"]]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"from","","",177,[[["span"]],["self"]]],[11,"clone","","",178,[[["self"]],["while"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["cursor"]],["presult",["while"]]]],[11,"description","","",178,[[],["option",["str"]]]],[11,"from","","",178,[[["span"]],["self"]]],[11,"clone","","",179,[[["self"]],["yield"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",179,[[],["option",["str"]]]],[11,"from","","",179,[[["span"]],["self"]]],[11,"from","syn","",180,[[["self_"]],["ident"]]],[11,"from","","",180,[[["capself"]],["ident"]]],[11,"from","","",180,[[["super"]],["ident"]]],[11,"from","","",180,[[["crate"]],["ident"]]],[11,"from","","",180,[[["extern"]],["ident"]]],[11,"parse_inner","","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",15,[[["cursor"]],["presult"]]],[11,"description","","",15,[[],["option",["str"]]]],[11,"parse","","",16,[[["cursor"]],["presult"]]],[11,"description","","",16,[[],["option",["str"]]]],[11,"parse","","",17,[[["cursor"]],["presult"]]],[11,"description","","",17,[[],["option",["str"]]]],[11,"parse","","",69,[[["cursor"]],["presult"]]],[11,"description","","",69,[[],["option",["str"]]]],[11,"parse","","",20,[[["cursor"]],["presult"]]],[11,"description","","",20,[[],["option",["str"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",181,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",182,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",183,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",184,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",185,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",186,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",187,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",188,[[["self"]],["expriflet"]]],[11,"from","","",68,[[["expriflet"]],["expr"]]],[11,"clone","","",189,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",190,[[["self"]],["exprwhilelet"]]],[11,"from","","",68,[[["exprwhilelet"]],["expr"]]],[11,"clone","","",191,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",192,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",193,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",194,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",195,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",196,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprcatch"]]],[11,"from","","",68,[[["exprcatch"]],["expr"]]],[11,"clone","","",210,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",28,[[["cursor"]],["presult"]]],[11,"description","","",28,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",22,[[["cursor"]],["presult"]]],[11,"description","","",22,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",211,[[["self"]],["implgenerics"]]],[11,"clone","","",212,[[["self"]],["typegenerics"]]],[11,"clone","","",213,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["cursor"]],["presult"]]],[11,"description","","",76,[[],["option",["str"]]]],[11,"parse","","",214,[[["cursor"]],["presult"]]],[11,"description","","",214,[[],["option",["str"]]]],[11,"parse","","",215,[[["cursor"]],["presult"]]],[11,"description","","",215,[[],["option",["str"]]]],[11,"parse","","",216,[[["cursor"]],["presult"]]],[11,"description","","",216,[[],["option",["str"]]]],[11,"parse","","",217,[[["cursor"]],["presult"]]],[11,"description","","",217,[[],["option",["str"]]]],[11,"parse","","",218,[[["cursor"]],["presult"]]],[11,"description","","",218,[[],["option",["str"]]]],[11,"parse","","",219,[[["cursor"]],["presult"]]],[11,"description","","",219,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",214,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",215,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",216,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",217,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",218,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",219,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",214,[[["str"],["span"]],["self"]]],[11,"value","","",214,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,[[["self"]],["result",["parseerror"]]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"set_span","","",214,[[["self"],["span"]]]],[11,"new","","",215,N],[11,"value","","",215,[[["self"]],["vec",["u8"]]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"set_span","","",215,[[["self"],["span"]]]],[11,"new","","",216,[[["u8"],["span"]],["self"]]],[11,"value","","",216,[[["self"]],["u8"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"set_span","","",216,[[["self"],["span"]]]],[11,"new","","",217,[[["char"],["span"]],["self"]]],[11,"value","","",217,[[["self"]],["char"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"set_span","","",217,[[["self"],["span"]]]],[11,"new","","",218,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",218,[[["self"]],["u64"]]],[11,"suffix","","",218,[[["self"]],["intsuffix"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"set_span","","",218,[[["self"],["span"]]]],[11,"new","","",219,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",219,[[["self"]],["f64"]]],[11,"suffix","","",219,[[["self"]],["floatsuffix"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"set_span","","",219,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse_binop","","",80,[[["cursor"]],["presult"]]],[11,"parse","","",81,[[["cursor"]],["presult"]]],[11,"description","","",81,[[],["option",["str"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["cursor"]],["presult"]]],[11,"description","","",84,[[],["option",["str"]]]],[11,"without_plus","","",84,[[["cursor"]],["presult"]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse","","",41,[[["cursor"]],["presult"]]],[11,"description","","",41,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",46,[[["cursor"]],["presult"]]],[11,"description","","",46,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"without_plus","","",83,[[["cursor"]],["presult"]]],[11,"parse","","",83,[[["cursor"]],["presult"]]],[11,"description","","",83,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"without_plus","","",53,[[["cursor"]],["presult"]]],[11,"parse","","",44,[[["cursor"]],["presult"]]],[11,"description","","",44,[[],["option",["str"]]]],[11,"parse","","",43,[[["cursor"]],["presult"]]],[11,"description","","",43,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",82,[[["cursor"]],["presult"]]],[11,"description","","",82,[[],["option",["str"]]]],[11,"parse","","",39,[[["cursor"]],["presult"]]],[11,"description","","",39,[[],["option",["str"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"parse","","",57,[[["cursor"]],["presult"]]],[11,"description","","",57,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse_mod_style","","",60,[[["cursor"]],["presult"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"global","","",60,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["pathtokens"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",57,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",58,[[["self"]],["binding"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,[[["self"]],["cursor"]]],[11,"clone","","",221,[[["self"]],["cursor"]]],[11,"eq","","",221,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",221,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",222,N],[13,"End","","",222,N],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"clone","","",223,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",223,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",223,[[["self"],["usize"],["t"]]]],[11,"from_iter","","",223,[[["i"]],["self"]]],[11,"extend","","",223,[[["self"],["i"]]]],[11,"from_iter","","",223,[[["i"]],["self"]]],[11,"extend","","",223,[[["self"],["i"]]]],[11,"into_iter","","",223,N],[11,"default","","",223,[[],["self"]]],[11,"next","","",224,[[["self"]],["option"]]],[11,"len","","",224,[[["self"]],["usize"]]],[11,"next","","",225,[[["self"]],["option"]]],[11,"len","","",225,[[["self"]],["usize"]]],[11,"next","","",226,[[["self"]],["option"]]],[11,"len","","",226,[[["self"]],["usize"]]],[11,"next","","",227,[[["self"]],["option"]]],[11,"len","","",227,[[["self"]],["usize"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"len","","",228,[[["self"]],["usize"]]],[11,"next","","",229,[[["self"]],["option"]]],[11,"len","","",229,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,N],[11,"index","","",223,N],[11,"index_mut","","",223,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",230,[[["cursor"]],["presult"]]],[11,"parse_any","syn","",180,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",231,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",231,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",232,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,[[["self"],["str"]],["result",["parseerror"]]]],[11,"parse","syn","",180,[[["cursor"]],["presult"]]],[11,"description","","",180,[[],["option",["str"]]]],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",234,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",234,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",234,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",234,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",234,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",234,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",234,[[["self"],["binop"]]]],[11,"visit_binding","","",234,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",234,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",234,[[["self"],["constparam"]]]],[11,"visit_data","","",234,[[["self"],["data"]]]],[11,"visit_data_enum","","",234,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",234,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",234,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",234,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",234,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",234,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",234,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",234,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",234,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",234,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",234,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",234,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",234,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",234,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",234,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",234,[[["self"],["field"]]]],[11,"visit_fields","","",234,[[["self"],["fields"]]]],[11,"visit_fields_named","","",234,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",234,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",234,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",234,[[["self"],["genericparam"]]]],[11,"visit_generics","","",234,[[["self"],["generics"]]]],[11,"visit_ident","","",234,[[["self"],["ident"]]]],[11,"visit_index","","",234,[[["self"],["index"]]]],[11,"visit_lifetime","","",234,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",234,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",234,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",234,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",234,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",234,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",234,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",234,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",234,[[["self"],["litint"]]]],[11,"visit_lit_str","","",234,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",234,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",234,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",234,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",234,[[["self"],["member"]]]],[11,"visit_meta","","",234,[[["self"],["meta"]]]],[11,"visit_meta_list","","",234,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",234,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",234,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",234,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",234,[[["self"],["path"]]]],[11,"visit_path_arguments","","",234,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",234,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",234,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",234,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",234,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",234,[[["self"],["qself"]]]],[11,"visit_return_type","","",234,[[["self"],["returntype"]]]],[11,"visit_span","","",234,[[["self"],["span"]]]],[11,"visit_trait_bound","","",234,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",234,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",234,[[["self"],["type"]]]],[11,"visit_type_array","","",234,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",234,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",234,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",234,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",234,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",234,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",234,[[["self"],["typenever"]]]],[11,"visit_type_param","","",234,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",234,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",234,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",234,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",234,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",234,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",234,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",234,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",234,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",234,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",234,[[["self"],["unop"]]]],[11,"visit_variant","","",234,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",234,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",234,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",234,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",234,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",234,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",234,[[["self"],["wherepredicate"]]]],[11,"fmt","syn::synom","",235,[[["self"],["formatter"]],["result"]]],[11,"description","","",235,[[["self"]],["str"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",180,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",180,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",180,N],[11,"clone","","",180,[[["self"]],["ident"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",180,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",180,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",180,N],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",180,[[["self"],["ident"]],["bool"]]],[11,"eq","","",180,[[["self"],["t"]],["bool"]]],[11,"to_tokens","","",180,N],[11,"visit_abi","syn::visit","",234,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",234,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",234,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",234,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",234,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",234,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",234,[[["self"],["binop"]]]],[11,"visit_binding","","",234,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",234,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",234,[[["self"],["constparam"]]]],[11,"visit_data","","",234,[[["self"],["data"]]]],[11,"visit_data_enum","","",234,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",234,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",234,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",234,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",234,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",234,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",234,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",234,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",234,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",234,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",234,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",234,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",234,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",234,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",234,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",234,[[["self"],["field"]]]],[11,"visit_fields","","",234,[[["self"],["fields"]]]],[11,"visit_fields_named","","",234,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",234,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",234,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",234,[[["self"],["genericparam"]]]],[11,"visit_generics","","",234,[[["self"],["generics"]]]],[11,"visit_ident","","",234,[[["self"],["ident"]]]],[11,"visit_index","","",234,[[["self"],["index"]]]],[11,"visit_lifetime","","",234,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",234,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",234,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",234,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",234,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",234,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",234,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",234,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",234,[[["self"],["litint"]]]],[11,"visit_lit_str","","",234,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",234,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",234,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",234,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",234,[[["self"],["member"]]]],[11,"visit_meta","","",234,[[["self"],["meta"]]]],[11,"visit_meta_list","","",234,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",234,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",234,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",234,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",234,[[["self"],["path"]]]],[11,"visit_path_arguments","","",234,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",234,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",234,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",234,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",234,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",234,[[["self"],["qself"]]]],[11,"visit_return_type","","",234,[[["self"],["returntype"]]]],[11,"visit_span","","",234,[[["self"],["span"]]]],[11,"visit_trait_bound","","",234,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",234,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",234,[[["self"],["type"]]]],[11,"visit_type_array","","",234,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",234,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",234,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",234,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",234,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",234,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",234,[[["self"],["typenever"]]]],[11,"visit_type_param","","",234,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",234,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",234,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",234,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",234,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",234,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",234,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",234,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",234,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",234,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",234,[[["self"],["unop"]]]],[11,"visit_variant","","",234,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",234,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",234,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",234,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",234,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",234,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",234,[[["self"],["wherepredicate"]]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["termcolor"]={"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",N,N],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",N,N],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",N,N],[3,"Buffer","","Write colored text to memory.",N,N],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",N,N],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",N,N],[3,"ColorSpec","","A color specification.",N,N],[3,"ParseColorError","","An error from parsing an invalid color specification.",N,N],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",N,N],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,N],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,N],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,N],[13,"Never","","Never emit colors.",0,N],[4,"Color","","The set of available colors for the terminal foreground/background.",N,N],[13,"Black","","",1,N],[13,"Blue","","",1,N],[13,"Green","","",1,N],[13,"Red","","",1,N],[13,"Cyan","","",1,N],[13,"Magenta","","",1,N],[13,"Yellow","","",1,N],[13,"White","","",1,N],[13,"Ansi256","","",1,N],[13,"Rgb","","",1,N],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",N,N],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,[[["self"]],["bool"]]],[10,"set_color","","Set the color settings of the writer.",2,[[["self"],["colorspec"]],["result"]]],[10,"reset","","Reset the current color settings to their original settings.",2,[[["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["colorchoice"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["colorchoice"]],["bool"]]],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,[[["colorchoice"]],["standardstream"]]],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,[[["colorchoice"]],["standardstream"]]],[11,"lock","","Lock the underlying writer.",3,[[["self"]],["standardstreamlock"]]],[11,"write","","",3,N],[11,"flush","","",3,[[["self"]],["result"]]],[11,"supports_color","","",3,[[["self"]],["bool"]]],[11,"set_color","","",3,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",3,[[["self"]],["result"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"supports_color","","",4,[[["self"]],["bool"]]],[11,"set_color","","",4,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",4,[[["self"]],["result"]]],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,[[["colorchoice"]],["bufferwriter"]]],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,[[["colorchoice"]],["bufferwriter"]]],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,[[["self"],["option",["vec"]]]]],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,[[["self"]],["buffer"]]],[11,"print","","Prints the contents of the given buffer.",5,[[["self"],["buffer"]],["result"]]],[11,"no_color","","Create a buffer that drops all color information.",6,[[],["buffer"]]],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,[[],["buffer"]]],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,[[["self"]],["bool"]]],[11,"len","","Returns the length of this buffer in bytes.",6,[[["self"]],["usize"]]],[11,"clear","","Clears this buffer.",6,[[["self"]]]],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,[[["self"]],["vec",["u8"]]]],[11,"as_slice","","Return the underlying data of the buffer.",6,N],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,N],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"supports_color","","",6,[[["self"]],["bool"]]],[11,"set_color","","",6,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",6,[[["self"]],["result"]]],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,[[["w"]],["nocolor"]]],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,[[["self"]],["w"]]],[11,"get_ref","","Return a reference to the inner writer.",7,[[["self"]],["w"]]],[11,"get_mut","","Return a mutable reference to the inner writer.",7,[[["self"]],["w"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"supports_color","","",7,[[["self"]],["bool"]]],[11,"set_color","","",7,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",7,[[["self"]],["result"]]],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,[[["w"]],["ansi"]]],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,[[["self"]],["w"]]],[11,"get_ref","","Return a reference to the inner writer.",8,[[["self"]],["w"]]],[11,"get_mut","","Return a mutable reference to the inner writer.",8,[[["self"]],["w"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"supports_color","","",8,[[["self"]],["bool"]]],[11,"set_color","","",8,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",8,[[["self"]],["result"]]],[11,"clone","","",9,[[["self"]],["colorspec"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["colorspec"]]],[11,"eq","","",9,[[["self"],["colorspec"]],["bool"]]],[11,"ne","","",9,[[["self"],["colorspec"]],["bool"]]],[11,"new","","Create a new color specification that has no colors or styles.",9,[[],["colorspec"]]],[11,"fg","","Get the foreground color.",9,[[["self"]],["option",["color"]]]],[11,"set_fg","","Set the foreground color.",9,[[["self"],["option",["color"]]],["colorspec"]]],[11,"bg","","Get the background color.",9,[[["self"]],["option",["color"]]]],[11,"set_bg","","Set the background color.",9,[[["self"],["option",["color"]]],["colorspec"]]],[11,"bold","","Get whether this is bold or not.",9,[[["self"]],["bool"]]],[11,"set_bold","","Set whether the text is bolded or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"underline","","Get whether this is underline or not.",9,[[["self"]],["bool"]]],[11,"set_underline","","Set whether the text is underlined or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"intense","","Get whether this is intense or not.",9,[[["self"]],["bool"]]],[11,"set_intense","","Set whether the text is intense or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,[[["self"]],["bool"]]],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,[[["self"]]]],[11,"clone","","",1,[[["self"]],["color"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["color"]],["bool"]]],[11,"ne","","",1,[[["self"],["color"]],["bool"]]],[11,"clone","","",10,[[["self"]],["parsecolorerror"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["parsecolorerror"]],["bool"]]],[11,"ne","","",10,[[["self"],["parsecolorerror"]],["bool"]]],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,[[["self"]],["str"]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["color","parsecolorerror"]]]]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"StandardStreamLock"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["box"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"default","","",3,[[],["cachedthreadlocal"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",3,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,[[["self"]]]],[11,"into_iter","","",3,[[["self"]],["cachedintoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["duration"]]],[11,"eq","","",4,[[["self"],["duration"]],["bool"]]],[11,"ne","","",4,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["duration"]],["bool"]]],[11,"le","","",4,[[["self"],["duration"]],["bool"]]],[11,"gt","","",4,[[["self"],["duration"]],["bool"]]],[11,"ge","","",4,[[["self"],["duration"]],["bool"]]],[11,"cmp","","",4,[[["self"],["duration"]],["ordering"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",4,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"neg","","",4,[[["self"]],["duration"]]],[11,"add","","",4,[[["self"],["duration"]],["duration"]]],[11,"sub","","",4,[[["self"],["duration"]],["duration"]]],[11,"mul","","",4,[[["self"],["i32"]],["duration"]]],[11,"div","","",4,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["outofrangeerror"]]],[11,"eq","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"clone","","",6,[[["self"]],["precisetime"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,[[["self"],["precisetime"]],["duration"]]],[11,"clone","","",7,[[["self"]],["steadytime"]]],[11,"partial_cmp","","",7,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"cmp","","",7,[[["self"],["steadytime"]],["ordering"]]],[11,"eq","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,[[],["steadytime"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","",7,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"add","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio"]={"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"clock","tokio","A configurable source of time.",N,N],[5,"now","tokio::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[0,"executor","tokio","Task execution utilities.",N,N],[8,"Executor","tokio::executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",0,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",0,[[["self"]],["result",["spawnerror"]]]],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[3,"Spawn","","Return value from the `spawn` function.",N,N],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[0,"current_thread","","Execute many tasks concurrently on the current thread.",N,N],[3,"CurrentThread","tokio::executor::current_thread","Executes tasks on the current thread",N,N],[3,"TaskExecutor","","Executes futures on the current thread.",N,N],[3,"Turn","","Returned by the `turn` function.",N,N],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution context.",N,N],[3,"RunError","","Error returned by the `run` function.",N,N],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",N,N],[3,"TurnError","","Error returned by the `turn` function.",N,N],[3,"BlockError","","Error returned by the `block_on` function.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` instance",N,N],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",N,[[["f"]],["result"]]],[5,"spawn","","Executes a future on the current thread.",N,[[["f"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["taskexecutor"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",2,[[["self"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new instance of `CurrentThread`.",7,[[],["self"]]],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",7,[[["p"]],["self"]]],[11,"is_idle","","Returns `true` if the executor is currently idle.",7,[[["self"]],["bool"]]],[11,"spawn","","Spawn the future on the executor.",7,[[["self"],["f"]],["self"]]],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,[[["self"],["f"]],["result",["blockerror"]]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,[[["self"]],["result",["runerror"]]]],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,[[["self"],["duration"]],["result",["runtimeouterror"]]]],[11,"turn","","Perform a single iteration of the event loop.",7,[[["self"],["option",["duration"]]],["result",["turn","turnerror"]]]],[11,"enter","","Bind `CurrentThread` instance with an execution context.",7,[[["self"],["enter"]],["entered"]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",7,[[["self"]],["p"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",7,[[["self"]],["p"]]],[11,"handle","","Get a new handle to spawn futures on the executor",7,[[["self"]],["handle"]]],[11,"spawn","","",7,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"spawn","","Spawn the future on the executor.",8,[[["self"],["f"]],["self"]]],[11,"block_on","","Synchronously waits for the provided `future` to complete.",8,[[["self"],["f"]],["result",["blockerror"]]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",8,[[["self"]],["result",["runerror"]]]],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",8,[[["self"],["duration"]],["result",["runtimeouterror"]]]],[11,"turn","","Perform a single iteration of the event loop.",8,[[["self"],["option",["duration"]]],["result",["turn","turnerror"]]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",8,[[["self"]],["p"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",8,[[["self"]],["p"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["handle"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` instance corresponding to this handle",9,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"current","","Returns an executor that executes futures on the current thread.",1,[[],["taskexecutor"]]],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",1,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"spawn","","",1,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",1,[[["self"]],["result",["spawnerror"]]]],[11,"execute","","",1,[[["self"],["f"]],["result",["executeerror"]]]],[11,"is_timeout","","Returns `true` if the error was caused by the operation timing out.",4,[[["self"]],["bool"]]],[11,"from","","",4,[[["entererror"]],["self"]]],[11,"into_inner","","Returns the error yielded by the future being blocked on",6,[[["self"]],["option"]]],[11,"from","","",6,[[["entererror"]],["self"]]],[0,"thread_pool","tokio::executor","Maintains a pool of threads across which the set of spawned tasks are executed.",N,N],[3,"Builder","tokio::executor::thread_pool","Builds a thread pool with custom configuration values.",N,N],[3,"Sender","","Submit futures to the associated thread pool for execution.",N,N],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",N,N],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",N,N],[11,"fmt","tokio::executor","",10,[[["self"],["formatter"]],["result"]]],[11,"into_future","","",10,N],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",N,N],[0,"file","tokio::fs","Types for working with [`File`].",N,N],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(Metadata, File)` instance.",N,N],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"File","tokio::fs","A reference to an open file on the filesystem.",N,N],[0,"net","tokio","TCP/UDP bindings for `tokio`.",N,N],[3,"TcpStream","tokio::net","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",N,N],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Background","","Handle to the reactor running on a background thread.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",N,N],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",N,N],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",N,N],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",N,N],[3,"TaskExecutor","","Executes futures on the runtime",N,N],[3,"Runtime","","Handle to the Tokio runtime.",N,N],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,[[["f"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",11,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",11,[[["self"],["clock"]],["self"]]],[11,"threadpool_builder","","Set builder to set up the thread pool instance.",11,[[["self"],["threadpoolbuilder"]],["self"]]],[11,"build","","Create the configured `Runtime`.",11,[[["self"]],["result",["runtime"]]]],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",N,N],[3,"Builder","tokio::runtime::current_thread","Builds a Single-threaded runtime with custom configuration values.",N,N],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",N,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",12,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",12,[[["self"],["clock"]],["self"]]],[11,"build","","Create the configured `Runtime`.",12,[[["self"]],["result",["runtime"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",14,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"new","","Returns a new runtime initialized with default configuration values.",13,[[],["result",["runtime"]]]],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",13,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",13,[[["self"],["f"]],["self"]]],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",13,[[["self"],["f"]],["result"]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",13,[[["self"]],["result",["runerror"]]]],[11,"poll","tokio::runtime","",15,[[["self"]],["poll"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",16,[[["self"],["f"]]]],[11,"execute","","",16,[[["self"],["t"]],["result",["executeerror"]]]],[11,"spawn","","",16,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new runtime instance with default configuration values.",17,[[],["result"]]],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",17,[[["self"]],["handle"]]],[11,"executor","","Return a handle to the runtime's executor.",17,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",17,[[["self"],["f"]],["self"]]],[11,"block_on","","Run a future to completion on the Tokio runtime.",17,[[["self"],["f"]],["result"]]],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",17,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",17,[[["self"]],["shutdown"]]],[11,"drop","","",17,[[["self"]]]],[0,"timer","tokio","Utilities for tracking time.",N,N],[3,"Deadline","tokio::timer","Allows a given `Future` to execute until the specified deadline.",N,N],[3,"DeadlineError","","Error returned by `Deadline` future.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[3,"Delay","","A future that completes at a specified instant in time.",N,N],[0,"util","tokio","Utilities for working with Tokio.",N,N],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"deadline","","Creates a new future which allows `self` until `deadline`.",18,[[["self"],["instant"]],["deadline"]]],[0,"io","tokio","Asynchronous I/O.",N,N],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",19,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",19,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",19,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",19,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",19,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",20,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",20,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",20,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",20,[[["self"],["b"]],["result",["async","error"]]]],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",21,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",21,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",21,N],[13,"ConnectionReset","","The connection was reset by the remote server.",21,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",21,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",21,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",21,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",21,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",21,N],[13,"AlreadyExists","","An entity already exists, often a file.",21,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",21,N],[13,"InvalidInput","","A parameter was incorrect.",21,N],[13,"InvalidData","","Data not valid for the operation were encountered.",21,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",21,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",21,N],[13,"Interrupted","","This operation was interrupted.",21,N],[13,"Other","","Any I/O error not part of this list.",21,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",21,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",22,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",22,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",22,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",22,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",22,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",22,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",22,[[["self"]],["bytes"]]],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",22,[[["self"]],["chars"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",22,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",22,[[["self"],["u64"]],["take"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",23,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",23,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",23,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",23,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",23,[[["self"]],["self"]]],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",N,N],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",19,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",19,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",19,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",19,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",19,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",20,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",20,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",20,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",20,[[["self"],["b"]],["result",["async","error"]]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",22,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",22,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",22,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",22,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",22,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",22,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",22,[[["self"]],["bytes"]]],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",22,[[["self"]],["chars"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",22,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",22,[[["self"],["u64"]],["take"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",23,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",23,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",23,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",23,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",23,[[["self"]],["self"]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",24,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",24,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",24,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",24,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",24,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",24,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",24,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",24,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",24,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",24,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",24,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",24,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",24,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",24,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",24,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",24,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",24,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",24,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",24,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",24,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",24,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",24,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",24,[[["self"]],["shared"]]],[0,"future","","Futures",N,N],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",24,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",24,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",24,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",24,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",24,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",24,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",24,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",24,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",24,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",24,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",24,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",24,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",24,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",24,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",24,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",24,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",24,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",24,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",24,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",24,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",24,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",24,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",24,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",25,N],[16,"Item","","The item that the future may resolve with.",25,N],[16,"Error","","The error that the future may resolve with.",25,N],[10,"into_future","","Consumes this object and produces a future.",25,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",26,N],[16,"Error","","Possible errors during conversion.",26,N],[10,"future_from","","Consume the given value, beginning the conversion.",26,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",27,[[["self"],["f"]],["result",["executeerror"]]]],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",28,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",28,N],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"Finished","","A future representing a value that is immediately ready.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[3,"Empty","","A future which is never resolved.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",29,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",29,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",30,N],[13,"B","","Second branch of the type",30,N],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",31,N],[16,"Error","","The type of error this stream may generate.",31,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",31,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",31,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",31,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",31,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",31,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",31,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",31,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",31,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",31,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",31,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",31,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",31,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",31,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",31,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",31,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",31,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",31,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",31,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",31,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",31,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",31,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",31,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",31,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",31,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",31,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",31,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",31,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",31,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",31,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",31,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",31,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",31,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",31,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",31,[[["self"],["f"]],["inspecterr"]]],[0,"stream","","Asynchronous streams",N,N],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",N,N],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",31,N],[16,"Error","","The type of error this stream may generate.",31,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",31,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",31,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",31,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",31,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",31,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",31,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",31,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",31,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",31,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",31,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",31,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",31,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",31,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",31,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",31,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",31,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",31,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",31,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",31,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",31,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",31,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",31,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",31,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",31,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",31,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",31,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",31,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",31,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",31,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",31,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",31,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",31,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",31,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",31,[[["self"],["f"]],["inspecterr"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",32,N],[12,"1","","",32,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"Sender","","The transmission end of a channel which is used to send values.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"FutureSender","","Future returned by `Sender::send`.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",33,N],[13,"Second","","An item from the second stream",33,N],[13,"Both","","Items from both streams",33,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",34,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",34,N],[10,"start_send","","Begin the process of sending a value to the sink.",34,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",34,[[["self"]],["result",["async"]]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",34,[[["self"]],["result",["async"]]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",34,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",34,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",34,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",34,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",34,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",34,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",34,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",34,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",34,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",34,[[["self"],["s"]],["sendall"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",25,N],[16,"Item","","The item that the future may resolve with.",25,N],[16,"Error","","The error that the future may resolve with.",25,N],[10,"into_future","","Consumes this object and produces a future.",25,N],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",35,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",35,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",36,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",36,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"task","","Tasks used to drive a future computation",N,N],[3,"TaskRc","tokio::prelude::task","A reference to a piece of data that's accessible only within a specific `Task`.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",N,N],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",37,N],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[5,"init","","Initialize the `futures` task system.",N,N],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",38,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",39,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",18,[[["self"],["instant"]],["deadline"]]],[11,"cmp","tokio::io","",21,[[["self"],["errorkind"]],["ordering"]]],[11,"clone","","",21,[[["self"]],["errorkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",40,[[["self"]],["str"]]],[11,"cause","","",40,[[["self"]],["option",["error"]]]],[11,"eq","","",21,[[["self"],["errorkind"]],["bool"]]],[11,"from","","",40,[[["errorkind"]],["error"]]],[11,"from","","",40,[[["nulerror"]],["error"]]],[11,"from","","",40,[[["intoinnererror"]],["error"]]],[11,"hash","","",21,N],[11,"partial_cmp","","",21,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"poll","tokio::prelude::future","",41,[[["self"]],["result",["async"]]]],[11,"poll","","",42,[[["self"]],["result",["async"]]]],[11,"poll","","",43,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",44,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",45,[[["self"]],["result",["async"]]]],[11,"poll","","",46,[[["self"]],["result",["async"]]]],[11,"poll","","",47,[[["self"]],["result",["async"]]]],[11,"poll","","",48,[[["self"]],["result",["async"]]]],[11,"poll","","",49,[[["self"]],["result",["async"]]]],[11,"poll","","",50,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",51,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",52,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",53,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",54,[[["self"]],["result",["async"]]]],[11,"poll","","",55,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",56,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",57,[[["self"]],["result",["async"]]]],[11,"poll","","",58,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",59,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",60,[[["self"]],["result",["async"]]]],[11,"poll","","",61,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",62,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",63,[[["self"]],["result",["async"]]]],[11,"poll","","",30,[[["self"]],["result",["async"]]]],[11,"poll","","",64,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",65,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",66,[[["self"]],["result",["async"]]]],[11,"poll","","",67,[[["self"]],["result",["async"]]]],[11,"poll","","",68,[[["self"]],["result",["async"]]]],[11,"poll","","",69,[[["self"]],["result",["async"]]]],[11,"poll","","",70,[[["self"]],["result",["async"]]]],[11,"poll","","",71,[[["self"]],["result",["async"]]]],[11,"poll","","",72,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",73,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",74,[[["self"]],["result",["async"]]]],[11,"from_iter","tokio::prelude::stream","",75,[[["t"]],["futuresordered"]]],[11,"from_iter","tokio::prelude::stream::futures_unordered","",76,[[["t"]],["futuresunordered"]]],[11,"default","tokio::prelude::task","",77,[[],["atomictask"]]],[11,"start_send","tokio::prelude::stream","",78,N],[11,"poll_complete","","",78,[[["self"]],["result",["async"]]]],[11,"close","","",78,[[["self"]],["result",["async"]]]],[11,"start_send","","",79,N],[11,"poll_complete","","",79,[[["self"]],["result",["async"]]]],[11,"close","","",79,[[["self"]],["result",["async"]]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["result",["async"]]]],[11,"close","","",80,[[["self"]],["result",["async"]]]],[11,"start_send","","",81,N],[11,"poll_complete","","",81,[[["self"]],["result",["async"]]]],[11,"close","","",81,[[["self"]],["result",["async"]]]],[11,"start_send","","",82,N],[11,"poll_complete","","",82,[[["self"]],["result",["async"]]]],[11,"close","","",82,[[["self"]],["result",["async"]]]],[11,"start_send","","",83,N],[11,"poll_complete","","",83,[[["self"]],["result",["async"]]]],[11,"close","","",83,[[["self"]],["result",["async"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["result",["async"]]]],[11,"close","","",84,[[["self"]],["result",["async"]]]],[11,"start_send","","",85,N],[11,"poll_complete","","",85,[[["self"]],["result",["async"]]]],[11,"close","","",85,[[["self"]],["result",["async"]]]],[11,"start_send","","",86,N],[11,"poll_complete","","",86,[[["self"]],["result",["async"]]]],[11,"close","","",86,[[["self"]],["result",["async"]]]],[11,"start_send","","",87,N],[11,"poll_complete","","",87,[[["self"]],["result",["async"]]]],[11,"close","","",87,[[["self"]],["result",["async"]]]],[11,"start_send","","",88,N],[11,"poll_complete","","",88,[[["self"]],["result",["async"]]]],[11,"close","","",88,[[["self"]],["result",["async"]]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["result",["async"]]]],[11,"close","","",89,[[["self"]],["result",["async"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["result",["async"]]]],[11,"close","","",90,[[["self"]],["result",["async"]]]],[11,"start_send","","",91,N],[11,"poll_complete","","",91,[[["self"]],["result",["async"]]]],[11,"close","","",91,[[["self"]],["result",["async"]]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["result",["async"]]]],[11,"close","","",92,[[["self"]],["result",["async"]]]],[11,"start_send","","",93,N],[11,"poll_complete","","",93,[[["self"]],["result",["async"]]]],[11,"close","","",93,[[["self"]],["result",["async"]]]],[11,"start_send","","",94,N],[11,"poll_complete","","",94,[[["self"]],["result",["async"]]]],[11,"close","","",94,[[["self"]],["result",["async"]]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["result",["async"]]]],[11,"close","","",95,[[["self"]],["result",["async"]]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["result",["async"]]]],[11,"close","","",96,[[["self"]],["result",["async"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["result",["async"]]]],[11,"close","","",97,[[["self"]],["result",["async"]]]],[11,"start_send","","",98,N],[11,"poll_complete","","",98,[[["self"]],["result",["async"]]]],[11,"close","","",98,[[["self"]],["result",["async"]]]],[11,"clone","tokio::prelude::task","",99,[[["self"]],["unparkevent"]]],[11,"clone","tokio::prelude::future","",100,[[["self"]],["sharederror"]]],[11,"clone","tokio::prelude::task","",101,[[["self"]],["taskrc"]]],[11,"clone","tokio::prelude::future","",55,[[["self"]],["shared"]]],[11,"clone","","",74,[[["self"]],["futureresult"]]],[11,"clone","tokio::prelude::task","",102,[[["self"]],["task"]]],[11,"clone","tokio::prelude::future","",103,[[["self"]],["shareditem"]]],[11,"clone","tokio::prelude","",36,[[["self"]],["asyncsink"]]],[11,"clone","tokio::prelude::future","",28,[[["self"]],["executeerrorkind"]]],[11,"clone","tokio::prelude","",35,[[["self"]],["async"]]],[11,"fmt","tokio::prelude::future","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream::futures_unordered","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream::futures_unordered","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","tokio::prelude::stream","",86,[[["self"]],["result",["async"]]]],[11,"poll","","",124,[[["self"]],["result",["async"]]]],[11,"poll","","",75,[[["self"]],["result",["async"]]]],[11,"poll","","",110,[[["self"]],["result",["async"]]]],[11,"poll","","",93,[[["self"]],["result",["async"]]]],[11,"poll","","",84,[[["self"]],["result",["async"]]]],[11,"poll","","",87,[[["self"]],["result",["async"]]]],[11,"poll","","",82,[[["self"]],["result",["async"]]]],[11,"poll","","",91,[[["self"]],["result",["async"]]]],[11,"poll","","",119,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",108,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",104,[[["self"]],["result",["async"]]]],[11,"poll","","",88,[[["self"]],["result",["async"]]]],[11,"poll","","",85,[[["self"]],["result",["async"]]]],[11,"poll","","",83,[[["self"]],["result",["async"]]]],[11,"poll","","",79,[[["self"]],["result",["async"]]]],[11,"poll","","",95,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream::futures_unordered","",76,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",107,[[["self"]],["result",["async"]]]],[11,"poll","","",78,[[["self"]],["result",["async"]]]],[11,"poll","","",89,[[["self"]],["result",["async"]]]],[11,"poll","","",105,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",111,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",80,[[["self"]],["result",["async"]]]],[11,"poll","","",114,[[["self"]],["result",["async"]]]],[11,"poll","","",123,[[["self"]],["result",["async"]]]],[11,"poll","","",97,[[["self"]],["result",["async"]]]],[11,"poll","","",116,[[["self"]],["result",["async"]]]],[11,"poll","","",90,[[["self"]],["result",["async"]]]],[11,"poll","","",94,[[["self"]],["result",["async"]]]],[11,"poll","","",115,[[["self"]],["result",["async"]]]],[11,"poll","","",125,[[["self"]],["result",["async"]]]],[11,"poll","","",127,[[["self"]],["result",["async"]]]],[11,"poll","","",126,[[["self"]],["result",["async"]]]],[11,"poll","","",92,[[["self"]],["result",["async"]]]],[11,"poll","","",81,[[["self"]],["result",["async"]]]],[11,"poll","","",117,[[["self"]],["result",["async"]]]],[11,"poll","","",98,[[["self"]],["result",["async"]]]],[11,"poll","","",112,[[["self"]],["result",["async"]]]],[11,"next","tokio::prelude::stream::futures_unordered","",109,[[["self"]],["option"]]],[11,"size_hint","","",109,N],[11,"next","tokio::prelude::stream","",121,[[["self"]],["option"]]],[11,"eq","tokio::prelude","",35,[[["self"],["async"]],["bool"]]],[11,"ne","","",35,[[["self"],["async"]],["bool"]]],[11,"eq","","",36,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",36,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","tokio::prelude::future","",28,[[["self"],["executeerrorkind"]],["bool"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","tokio::prelude","",35,[[["t"]],["async"]]],[11,"from","tokio::prelude::future","",74,[[["result"]],["futureresult"]]],[11,"description","","",100,[[["self"]],["str"]]],[11,"cause","","",100,[[["self"]],["option",["error"]]]],[11,"description","tokio::prelude::stream","",113,[[["self"]],["str"]]],[11,"description","","",32,[[["self"]],["str"]]],[11,"deref","tokio::prelude::future","",100,[[["self"]],["e"]]],[11,"deref","","",103,[[["self"]],["t"]]],[11,"drop","","",55,N],[11,"drop","tokio::prelude::stream::futures_unordered","",76,N],[11,"fmt","tokio::io","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",138,N],[11,"shutdown","","",137,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",137,[[["self"],["b"]],["result",["async","error"]]]],[11,"write","","",137,N],[11,"flush","","",137,[[["self"]],["result",["error"]]]],[11,"read_buf","","",138,[[["self"],["b"]],["result",["async","error"]]]],[11,"poll","","",134,[[["self"]],["result",["async","error"]]]],[11,"poll","","",136,[[["self"]],["result",["async","error"]]]],[11,"poll","","",130,[[["self"]],["result",["async","error"]]]],[11,"poll","","",132,[[["self"]],["result",["async","error"]]]],[11,"poll","","",133,[[["self"]],["result",["async","error"]]]],[11,"poll","","",131,[[["self"]],["result",["async","error"]]]],[11,"poll","","",135,[[["self"]],["result",["async","error"]]]],[11,"poll","","",129,[[["self"]],["result",["async","error"]]]],[11,"clone","tokio::executor","",139,[[["self"]],["defaultexecutor"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"spawn","","",139,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"clone","tokio::fs::file","",141,[[["self"]],["openoptions"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::file","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::file","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","tokio::fs","",144,N],[11,"read","","",144,N],[11,"read","tokio::io","",148,N],[11,"write","","",149,N],[11,"flush","","",149,[[["self"]],["result",["error"]]]],[11,"write","","",146,N],[11,"flush","","",146,[[["self"]],["result",["error"]]]],[11,"write","tokio::fs","",144,N],[11,"flush","","",144,[[["self"]],["result",["error"]]]],[11,"poll","tokio::fs::file","",142,[[["self"]],["result",["async"]]]],[11,"poll","","",145,[[["self"]],["result",["async"]]]],[11,"poll","","",143,[[["self"]],["result",["async"]]]],[11,"poll","","",147,[[["self"]],["result",["async"]]]],[11,"from","","",141,[[["openoptions"]],["openoptions"]]],[11,"shutdown","tokio::io","",146,[[["self"]],["result",["async","error"]]]],[11,"shutdown","tokio::fs","",144,[[["self"]],["result",["async","error"]]]],[11,"shutdown","tokio::io","",149,[[["self"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","tokio::fs","",144,N],[11,"prepare_uninitialized_buffer","tokio::io","",148,N],[11,"clone","tokio::executor::thread_pool","",150,[[["self"]],["sender"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",153,N],[11,"execute","","",150,[[["self"],["t"]],["result",["executeerror"]]]],[11,"status","","",150,[[["self"]],["result",["spawnerror"]]]],[11,"spawn","","",150,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"poll","","",152,[[["self"]],["result",["async"]]]],[11,"clone","tokio::reactor","",154,[[["self"]],["handle"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"shutdown","","",155,[[["self"]],["result",["async","error"]]]],[11,"drop","","",155,N],[11,"drop","","",157,N],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",154,[[],["handle"]]],[11,"read","","",155,N],[11,"write","","",155,N],[11,"flush","","",155,[[["self"]],["result",["error"]]]],[11,"unpark","","",154,N],[11,"unpark","","",156,N],[11,"park","","",156,[[["self"]],["result",["error"]]]],[11,"park_timeout","","",156,[[["self"],["duration"]],["result",["error"]]]],[11,"fmt","tokio::timer","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",163,[[["self"]],["str"]]],[11,"description","","",160,[[["self"]],["str"]]],[11,"poll","","",162,[[["self"]],["result",["async"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",164,[[["self"]],["result",["async"]]]],[11,"poll","","",161,[[["self"]],["result",["async"]]]],[11,"fmt","tokio::net","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_raw_fd","","",168,[[["self"]],["i32"]]],[11,"as_raw_fd","","",165,[[["self"]],["i32"]]],[11,"read","","",165,N],[11,"write","","",165,N],[11,"flush","","",165,[[["self"]],["result",["error"]]]],[11,"poll","","",167,[[["self"]],["result",["async","error"]]]],[11,"poll","","",166,[[["self"]],["result",["async","error"]]]],[11,"shutdown","","",165,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",165,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",165,N],[11,"read_buf","","",165,[[["self"],["b"]],["result",["async","error"]]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_raw_fd","","",171,[[["self"]],["i32"]]],[11,"poll","","",172,[[["self"]],["result",["async"]]]],[11,"poll","","",170,[[["self"]],["result",["async","error"]]]],[11,"poll","","",169,[[["self"]],["result",["async","error"]]]],[11,"start_send","","",172,N],[11,"poll_complete","","",172,[[["self"]],["result",["async"]]]],[11,"close","","",172,[[["self"]],["result",["async"]]]],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",139,[[],["defaultexecutor"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",140,[[],["spawnerror"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",140,[[],["spawnerror"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",140,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",140,[[["self"]],["bool"]]],[11,"new","tokio::executor::thread_pool","Returns a new thread pool builder initialized with default configuration values.",151,[[],["builder"]]],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",151,[[["self"],["usize"]],["builder"]]],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",151,[[["self"],["usize"]],["builder"]]],[11,"keep_alive","","Set the worker thread keep alive duration",151,[[["self"],["option",["duration"]]],["builder"]]],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",151,[[["self"],["s"]],["builder"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",151,[[["self"],["usize"]],["builder"]]],[11,"around_worker","","Execute function `f` on each worker thread.",151,[[["self"],["f"]],["builder"]]],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",151,[[["self"],["f"]],["builder"]]],[11,"before_stop","","Execute function `f` before each thread stops.",151,[[["self"],["f"]],["builder"]]],[11,"custom_park","","Customize the `park` instance used by each worker thread.",151,[[["self"],["f"]],["builder"]]],[11,"build","","Create the configured `ThreadPool`.",151,[[["self"]],["threadpool"]]],[11,"spawn","","Spawn a future onto the thread pool",150,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"new","","Create a new `ThreadPool` with default values.",153,[[],["threadpool"]]],[11,"spawn","","Spawn a future onto the thread pool.",153,N],[11,"sender","","Return a reference to the sender handle",153,[[["self"]],["sender"]]],[11,"sender_mut","","Return a mutable reference to the sender handle",153,[[["self"]],["sender"]]],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",153,[[["self"]],["shutdown"]]],[11,"shutdown","","Shutdown the pool",153,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the pool immediately",153,[[["self"]],["shutdown"]]],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",144,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",144,[[["p"]],["createfuture"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",144,[[["self"],["seekfrom"]],["result",["async","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",144,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",144,[[["self"]],["result",["async","error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",144,[[["self"]],["result",["async","error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",144,[[["self"],["u64"]],["result",["async","error"]]]],[11,"metadata","","Queries metadata about the underlying file.",144,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",144,[[["self"]],["result",["async","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",144,[[["self"]],["result",["async","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",144,[[["self"],["permissions"]],["result",["async","error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",144,[[["self"]],["file"]]],[11,"new","tokio::fs::file","Creates a blank new set of options ready for configuration.",141,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",141,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",141,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",141,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",141,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",141,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",141,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",141,[[["self"],["p"]],["openfuture"]]],[11,"connect","tokio::net","Create a new TCP stream connected to the specified address.",165,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",165,[[["tcpstream"],["handle"]],["result",["tcpstream","error"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",165,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",165,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",165,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",165,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",165,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",165,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",165,[[["self"],["shutdown"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",165,[[["self"]],["result",["bool","error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",165,[[["self"],["bool"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",165,[[["self"]],["result",["usize","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",165,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",165,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",165,[[["self"],["usize"]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",165,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",165,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",165,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",165,[[["self"],["u32"]],["result",["error"]]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",165,[[["self"]],["result",["option","error"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",165,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"bind","","Create a new TCP listener associated with this event loop.",168,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",168,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",168,[[["self"]],["result",["async","error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",168,[[["tcplistener"],["handle"]],["result",["tcplistener","error"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",168,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",168,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",168,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",168,[[["self"],["u32"]],["result",["error"]]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",171,[[["socketaddr"]],["result",["udpsocket","error"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",171,[[["udpsocket"],["handle"]],["result",["udpsocket","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",171,[[["self"]],["result",["socketaddr","error"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",171,[[["self"],["socketaddr"]],["result",["error"]]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",171,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",171,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",171,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",171,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",171,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",171,[[["self"],["t"]],["recvdgram"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",171,[[["self"]],["result",["bool","error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",171,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",171,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",171,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",171,[[["self"]],["result",["u32","error"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",171,[[["self"],["u32"]],["result",["error"]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",171,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",171,[[["self"],["bool"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",171,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",171,[[["self"],["u32"]],["result",["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",171,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",171,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",171,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",171,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",172,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",172,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",172,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",172,[[["self"]],["udpsocket"]]],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",156,[[],["result",["reactor","error"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",156,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",156,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",156,[[["self"],["option",["duration"]]],["result",["turn","error"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",156,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",156,[[["self"]],["result",["background","error"]]]],[11,"current","","Returns a handle to the current reactor.",154,[[],["handle"]]],[11,"handle","","Returns a reference to the reactor handle.",157,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",157,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",157,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",157,N],[11,"new","","Create a new `Registration`.",159,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",159,[[["self"],["t"]],["result",["bool","error"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",159,[[["self"],["t"]],["result",["error"]]]],[11,"register_with","","Register the I/O resource with the specified reactor.",159,[[["self"],["t"],["handle"]],["result",["bool","error"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",159,[[["self"]],["result",["async","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",159,[[["self"]],["result",["option","error"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",159,[[["self"]],["result",["async","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",159,[[["self"]],["result",["option","error"]]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",155,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",155,[[["e"],["handle"]],["result",["pollevented","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",155,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",155,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",155,[[["self"]],["result",["error"]]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",155,[[["self"],["ready"]],["result",["async","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",155,[[["self"],["ready"]],["result",["error"]]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",155,[[["self"]],["result",["async","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",155,[[["self"]],["result",["error"]]]],[11,"new","tokio::timer","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",161,[[["t"],["instant"]],["deadline"]]],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",161,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",161,[[["self"]],["t"]]],[11,"into_inner","","Consumes this deadline, returning the underlying future.",161,[[["self"]],["t"]]],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",160,[[["t"]],["deadlineerror"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",160,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",160,[[["self"]],["option"]]],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",160,[[],["deadlineerror"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",160,[[["self"]],["bool"]]],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",160,[[["error"]],["deadlineerror"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",160,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",160,[[["self"]],["option",["error"]]]],[11,"shutdown","","Create an error representing a shutdown timer.",163,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",163,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",163,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",163,[[["self"]],["bool"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",162,[[["instant"],["duration"]],["interval"]]],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",164,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",164,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",164,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",164,N],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",18,[[["self"],["instant"]],["deadline"]]],[11,"into_inner","tokio::io","Returns the underlying I/O object.",134,[[["self"]],["a"]]],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",40,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",40,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",40,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",40,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",40,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",40,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",40,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",40,[[["self"]],["errorkind"]]],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",118,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",118,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",118,[[["self"]],["f"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",55,[[["self"]],["option",["result"]]]],[11,"is_done","","Returns whether the underlying future has finished or not.",52,[[["self"]],["bool"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",30,N],[11,"new","tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",76,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",76,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",76,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",76,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",76,[[["self"]],["itermut"]]],[11,"get_ref","tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",98,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",98,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",98,[[["self"]],["s"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",44,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",44,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",44,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",44,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,[[["self"]],["s"]]],[11,"send","","Sends a new value along this channel to the receiver.",128,[[["self"],["result"]],["futuresender"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",84,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",92,[[["self"]],["s"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",114,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",87,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",89,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",94,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",81,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",81,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",81,[[["self"]],["s"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",96,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",93,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,[[["self"]],["s"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",75,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",75,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",75,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",75,N],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",88,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,[[["self"]],["s"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",79,[[["self"]],["result",["async"]]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",85,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",85,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",121,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",121,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",121,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",91,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",95,[[["self"]],["s"]]],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",35,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",35,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",35,[[["self"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",36,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",36,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",36,[[["self"]],["bool"]]],[11,"new","tokio::prelude::task","Inserts a new piece of task-local data into this task, returning a reference to it.",101,[[["a"]],["taskrc"]]],[11,"with","","Operate with a reference to the underlying data.",101,[[["self"],["f"]],["r"]]],[11,"poll_future","","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",120,[[["self"],["arc",["unpark"]]],["result",["async"]]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",120,[[["self"]],["result"]]],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",120,N],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",120,[[["self"],["arc",["unpark"]]],["result",["async"]]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",120,[[["self"]],["option",["result"]]]],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",120,N],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",120,[[["self"],["arc"]],["result",["async"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",120,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",120,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",120,[[["self"]],["result"]]],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",120,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",120,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",120,[[["self"]],["t"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",120,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",120,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",99,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",106,[[["self"],["f"]],["r"]]],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",122,N],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",102,N],[11,"is_current","","Returns `true` when called from within the context of the task.",102,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",102,[[["self"]],["bool"]]],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",77,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",77,N],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",77,N],[11,"notify","","Notifies the task that last called `register`.",77,N]],"paths":[[8,"Executor"],[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Handle"],[3,"Spawn"],[3,"Builder"],[3,"Builder"],[3,"Runtime"],[3,"Handle"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Unpark"],[8,"EventSet"],[8,"Executor"],[3,"Error"],[3,"Join"],[3,"Select2"],[3,"Select"],[3,"Forward"],[3,"OrElse"],[3,"SelectAll"],[3,"FromErr"],[3,"Lazy"],[3,"Join4"],[3,"PollFn"],[3,"StreamFuture"],[3,"Fuse"],[3,"Concat2"],[3,"SelectNext"],[3,"Shared"],[3,"FutureSender"],[3,"Inspect"],[3,"SelectOk"],[3,"ForEach"],[3,"Flatten"],[3,"LoopFn"],[3,"Concat"],[3,"Then"],[3,"Join3"],[3,"Fold"],[3,"JoinAll"],[3,"Map"],[3,"MapErr"],[3,"CatchUnwind"],[3,"Empty"],[3,"AndThen"],[3,"Join5"],[3,"Collect"],[3,"Finished"],[3,"FuturesOrdered"],[3,"FuturesUnordered"],[3,"AtomicTask"],[3,"Filter"],[3,"Peekable"],[3,"Inspect"],[3,"Map"],[3,"BufferUnordered"],[3,"Then"],[3,"Flatten"],[3,"Fuse"],[3,"AndThen"],[3,"TakeWhile"],[3,"Skip"],[3,"FilterMap"],[3,"Buffered"],[3,"InspectErr"],[3,"SkipWhile"],[3,"FromErr"],[3,"Chunks"],[3,"MapErr"],[3,"SplitSink"],[3,"OrElse"],[3,"Take"],[3,"UnparkEvent"],[3,"SharedError"],[3,"TaskRc"],[3,"Task"],[3,"SharedItem"],[3,"IterResult"],[3,"Select"],[3,"LocalKey"],[3,"IterOk"],[3,"FlattenStream"],[3,"IterMut"],[3,"Empty"],[3,"IntoStream"],[3,"Chain"],[3,"SendError"],[3,"SplitStream"],[3,"Repeat"],[3,"IterStream"],[3,"Receiver"],[3,"ExecuteError"],[3,"PollFn"],[3,"Spawn"],[3,"Wait"],[3,"Run"],[3,"CatchUnwind"],[3,"Merge"],[3,"Zip"],[3,"Once"],[3,"Unfold"],[3,"Sender"],[3,"ReadUntil"],[3,"Copy"],[3,"WriteAll"],[3,"Flush"],[3,"ReadToEnd"],[3,"Lines"],[3,"ReadExact"],[3,"Shutdown"],[3,"WriteHalf"],[3,"ReadHalf"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"OpenOptions"],[3,"CreateFuture"],[3,"SeekFuture"],[3,"File"],[3,"MetadataFuture"],[3,"Stderr"],[3,"OpenFuture"],[3,"Stdin"],[3,"Stdout"],[3,"Sender"],[3,"Builder"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Handle"],[3,"PollEvented2"],[3,"Reactor"],[3,"Background"],[3,"Turn"],[3,"Registration"],[3,"DeadlineError"],[3,"Deadline"],[3,"Interval"],[3,"Error"],[3,"Delay"],[3,"TcpStream"],[3,"ConnectFuture"],[3,"Incoming"],[3,"TcpListener"],[3,"SendDgram"],[3,"RecvDgram"],[3,"UdpSocket"],[3,"UdpFramed"]]};
searchIndex["tokio_codec"]={"doc":"Utilities for encoding and decoding frames.","items":[[8,"Decoder","tokio_codec","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",0,N],[16,"Error","","The type of unrecoverable frame decoding errors.",0,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,[[["self"],["t"]],["framed"]]],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",1,N],[16,"Error","","The type of encoding errors.",1,N],[10,"encode","","Encodes a frame into the buffer provided.",1,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",2,N],[12,"codec","","The codec",2,N],[12,"read_buf","","The buffer with read but unprocessed data.",2,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,N],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",N,N],[11,"clone","","",3,[[["self"]],["bytescodec"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"cmp","","",3,[[["self"],["bytescodec"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"hash","","",3,N],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",3,[[],["bytescodec"]]],[11,"decode","","",3,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"encode","","",3,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"clone","","",4,[[["self"]],["linescodec"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"cmp","","",4,[[["self"],["linescodec"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"hash","","",4,N],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",4,[[],["linescodec"]]],[11,"decode","","",4,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",4,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"encode","","",4,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",6,[[["self"]],["result",["async"]]]],[11,"poll","","",5,[[["self"]],["result",["async"]]]],[11,"poll","","",7,[[["self"]],["result",["async"]]]],[11,"start_send","","",6,N],[11,"poll_complete","","",6,[[["self"]],["result",["async"]]]],[11,"close","","",6,[[["self"]],["result",["async"]]]],[11,"start_send","","",7,N],[11,"poll_complete","","",7,[[["self"]],["result",["async"]]]],[11,"close","","",7,[[["self"]],["result",["async"]]]],[11,"start_send","","",5,N],[11,"poll_complete","","",5,[[["self"]],["result",["async"]]]],[11,"close","","",5,[[["self"]],["result",["async"]]]],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",5,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",5,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",5,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",5,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",5,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",5,[[["self"]],["framedparts"]]],[11,"new","","Create a new, default, `FramedParts`",2,[[["t"],["u"]],["framedparts"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",7,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",7,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",7,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",7,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",7,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",7,[[["self"]],["d"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",6,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",6,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",6,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",6,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",6,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",6,[[["self"]],["e"]]]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"Framed"],[3,"FramedWrite"],[3,"FramedRead"]]};
searchIndex["tokio_core"]={"doc":"`Future`-powered I/O at the core of Tokio","items":[[0,"net","tokio_core","TCP/UDP bindings for `tokio-core`",N,N],[3,"TcpStream","tokio_core::net","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[11,"as_raw_fd","","",0,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"bind","","Create a new TCP listener associated with this event loop.",1,[[["socketaddr"],["handle"]],["result",["tcplistener"]]]],[11,"bind2","","Create a new TCP listener associated with this event loop.",1,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,[[["self"]],["result"]]],[11,"accept_std","","Like `accept`, except that it returns a raw `std::net::TcpStream`.",1,[[["self"]],["result"]]],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",1,[[["tcplistener"],["socketaddr"],["handle"]],["result",["tcplistener"]]]],[11,"poll_read","","Test whether this socket is ready to be read or not.",1,[[["self"]],["async"]]],[11,"local_addr","","Returns the local address that this listener is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,[[["self"]],["incoming"]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["option","error"]]]],[11,"connect","","Create a new TCP stream connected to the specified address.",0,[[["socketaddr"],["handle"]],["tcpstreamnew"]]],[11,"connect2","","Create a new TCP stream connected to the specified address.",0,[[["socketaddr"]],["tcpstreamnew"]]],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",0,[[["tcpstream"],["handle"]],["result",["tcpstream"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",0,[[["tcpstream"],["socketaddr"],["handle"]],["box",["future"]]]],[11,"poll_read","","Test whether this socket is ready to be read or not.",0,[[["self"]],["async"]]],[11,"poll_write","","Test whether this socket is ready to be written to or not.",0,[[["self"]],["async"]]],[11,"local_addr","","Returns the local address that this stream is bound to.",0,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",0,[[["self"]],["result",["socketaddr"]]]],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",0,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",0,[[["self"],["shutdown"]],["result"]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",0,[[["self"]],["result",["bool"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",0,[[["self"],["usize"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",0,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",0,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",0,[[["self"]],["result",["usize"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",0,[[["self"],["option",["duration"]]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",0,[[["self"]],["result",["option"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",0,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",0,[[["self"]],["result",["bool"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",0,[[["self"],["option",["duration"]]],["result"]]],[11,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",0,[[["self"]],["result",["option"]]]],[11,"read","","",0,N],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"prepare_uninitialized_buffer","","",0,N],[11,"read_buf","","",0,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",0,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",0,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["tcpstream","error"]]]],[11,"poll","","",4,[[["self"]],["poll",["option","error"]]]],[11,"start_send","","",4,N],[11,"poll_complete","","",4,[[["self"]],["poll",["error"]]]],[11,"close","","",4,[[["self"]],["poll",["error"]]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",4,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",4,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",4,[[["self"]],["udpsocket"]]],[11,"as_raw_fd","","",5,[[["self"]],["rawfd"]]],[11,"bind","","Create a new UDP socket bound to the specified address.",5,[[["socketaddr"],["handle"]],["result",["udpsocket"]]]],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",5,[[["udpsocket"],["handle"]],["result",["udpsocket"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",5,[[["self"],["c"]],["udpframed"]]],[11,"local_addr","","Returns the local address that this stream is bound to.",5,[[["self"]],["result",["socketaddr"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in addr.",5,[[["self"],["socketaddr"]],["result"]]],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",5,N],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read.",5,N],[11,"poll_read","","Test whether this socket is ready to be read or not.",5,[[["self"]],["async"]]],[11,"poll_write","","Test whether this socket is ready to be written to or not.",5,[[["self"]],["async"]]],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",5,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",5,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",5,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",5,[[["self"],["t"]],["recvdgram"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",5,[[["self"]],["result",["bool"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",5,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,[[["self"],["bool"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",5,[[["self"],["u32"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,[[["self"],["bool"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,[[["self"],["u32"]],["result"]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",5,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",5,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",5,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",5,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,[[["self"]],["result",["bool"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"poll","","",7,[[["self"]],["poll",["error"]]]],[8,"UdpCodec","","Encoding of frames via buffers.",N,N],[16,"In","","The type of decoded frames.",8,N],[16,"Out","","The type of frames to be encoded.",8,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",8,N],[10,"encode","","Encodes a frame into the buffer provided.",8,N],[0,"reactor","tokio_core","The core reactor driving all I/O",N,N],[3,"PollEvented","tokio_core::reactor","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",N,N],[3,"Timeout","","A future representing the notification that a timeout has occurred.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[3,"Core","","An event loop.",N,N],[3,"CoreId","","An unique ID for a Core",N,N],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",N,N],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",N,N],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",9,[[["e"],["handle"]],["result",["pollevented"]]]],[11,"deregister","","Deregisters this source of events from the reactor core specified.",9,[[["self"],["handle"]],["result"]]],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",9,[[["self"]],["async"]]],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",9,[[["self"]],["async"]]],[11,"poll_ready","","Test to see whether this source fulfills any condition listed in `mask` provided.",9,[[["self"],["ready"]],["async",["ready"]]]],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",9,[[["self"]]]],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",9,[[["self"]]]],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",9,[[["self"]],["remote"]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",9,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",9,[[["self"]],["e"]]],[11,"read","","",9,N],[11,"write","","",9,N],[11,"flush","","",9,[[["self"]],["result"]]],[11,"shutdown","","",9,[[["self"]],["poll",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",10,[[["duration"],["handle"]],["result",["timeout"]]]],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",10,[[["instant"],["handle"]],["result",["timeout"]]]],[11,"reset","","Resets this timeout to an new timeout which will fire at the time specified by `at`.",10,[[["self"],["instant"]]]],[11,"poll","","",10,[[["self"]],["poll",["error"]]]],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",11,[[["duration"],["handle"]],["result",["interval"]]]],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",11,[[["instant"],["duration"],["handle"]],["result",["interval"]]]],[11,"poll","","",11,[[["self"]],["poll",["option","error"]]]],[11,"clone","","",12,[[["self"]],["coreid"]]],[11,"eq","","",12,[[["self"],["coreid"]],["bool"]]],[11,"ne","","",12,[[["self"],["coreid"]],["bool"]]],[11,"hash","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["remote"]]],[11,"clone","","",14,[[["self"]],["handle"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",15,[[],["result",["core"]]]],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",15,[[["self"]],["handle"]]],[11,"runtime","","Returns a reference to the runtime backing the instance",15,[[["self"]],["runtime"]]],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",15,[[["self"]],["remote"]]],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",15,[[["self"],["f"]],["result"]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",15,[[["self"],["option",["duration"]]]]],[11,"id","","Get the ID of this loop",15,[[["self"]],["coreid"]]],[11,"execute","","",15,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",13,[[["self"],["f"]]]],[11,"id","","Return the ID of the represented Core",13,[[["self"]],["coreid"]]],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",13,[[["self"]],["option",["handle"]]]],[11,"execute","","",13,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new_tokio_handle","","Returns a reference to the new Tokio handle",14,[[["self"]],["handle"]]],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",14,[[["self"]],["remote"]]],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",14,[[["self"],["f"]]]],[11,"spawn_send","","Spawns a new future onto the threadpool",14,[[["self"],["f"]]]],[11,"spawn_fn","","Spawns a closure on this event loop.",14,[[["self"],["f"]]]],[11,"id","","Return the ID of the represented Core",14,[[["self"]],["coreid"]]],[11,"execute","","",14,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[14,"try_nb","tokio_core","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",N,N]],"paths":[[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"TcpStreamNew"],[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"],[8,"UdpCodec"],[3,"PollEvented"],[3,"Timeout"],[3,"Interval"],[3,"CoreId"],[3,"Remote"],[3,"Handle"],[3,"Core"]]};
searchIndex["tokio_executor"]={"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",N,[[["t"]]]],[5,"with_default","","Set the default executor for the duration of the closure",N,[[["t"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,[[["self"],["f"]]]],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["defaultexecutor"]]],[11,"current","","Returns a handle to the default executor for the current context.",2,[[],["defaultexecutor"]]],[11,"spawn","","",2,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[0,"park","","Abstraction over blocking and unblocking the current thread.",N,N],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",N,N],[8,"Park","","Block the current thread.",N,N],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,N],[16,"Error","","Error returned by `park`",3,N],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,N],[10,"park","","Block the current thread unless or until the token is available.",3,[[["self"]],["result"]]],[10,"park_timeout","","Park the current thread for at most `duration`.",3,[[["self"],["duration"]],["result"]]],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",N,N],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unparkthread"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,[[],["parkthread"]]],[11,"unpark","","",5,N],[11,"park","","",5,[[["self"]],["result"]]],[11,"park_timeout","","",5,[[["self"],["duration"]],["result"]]],[11,"unpark","","",7,[[["self"]]]],[8,"Executor","tokio_executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",8,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,[[],["self"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,[[],["self"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,[[["self"]],["bool"]]]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_fs"]={"doc":"Asynchronous file and standard stream adaptation.","items":[[3,"OpenOptions","tokio_fs","Options and flags which can be used to configure how a file is opened.",N,N],[3,"MetadataFuture","","Future returned by `metadata`.",N,N],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(Metadata, File)` instance.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"File","","A reference to an open file on the filesystem.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"clone","tokio_fs","",3,[[["self"]],["openoptions"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a blank new set of options ready for configuration.",3,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",3,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",3,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",3,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",3,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",3,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",3,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",3,[[["self"],["p"]],["openfuture"]]],[11,"from","","",3,[[["stdopenoptions"]],["openoptions"]]],[11,"fmt","tokio_fs::file","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"open","","Attempts to open a file in read-only mode.",5,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",5,[[["p"]],["createfuture"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",5,[[["self"],["seekfrom"]],["poll",["u64","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",5,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",5,[[["self"]],["poll",["error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",5,[[["self"]],["poll",["error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",5,[[["self"],["u64"]],["poll",["error"]]]],[11,"metadata","","Queries metadata about the underlying file.",5,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",5,[[["self"]],["poll",["metadata","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",5,[[["self"]],["poll",["file","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",5,[[["self"],["permissions"]],["poll",["error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",5,[[["self"]],["stdfile"]]],[11,"read","","",5,N],[11,"prepare_uninitialized_buffer","","",5,N],[11,"write","","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"shutdown","","",5,[[["self"]],["poll",["error"]]]],[11,"drop","","",5,[[["self"]]]],[11,"fmt","tokio_fs","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"read","","",7,N],[11,"prepare_uninitialized_buffer","","",7,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"shutdown","","",8,[[["self"]],["poll",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"write","","",9,N],[11,"flush","","",9,[[["self"]],["result"]]],[11,"shutdown","","",9,[[["self"]],["poll",["error"]]]]],"paths":[[3,"CreateFuture"],[3,"MetadataFuture"],[3,"OpenFuture"],[3,"OpenOptions"],[3,"SeekFuture"],[3,"File"],[3,"MetadataFuture"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"]]};
searchIndex["tokio_io"]={"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",N,N],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",N,[[["r"],["t"]],["read"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["allowstdio"]]],[11,"eq","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",8,[[["self"],["allowstdio"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"hash","","",8,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",8,[[["self"]],["t"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"write_all","","",8,N],[11,"write_fmt","","",8,[[["self"],["arguments"]],["result"]]],[11,"shutdown","","",8,[[["self"]],["poll",["error"]]]],[11,"read","","",8,N],[11,"read_to_end","","",8,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",8,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",8,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Returns the underlying I/O object.",9,[[["self"]],["a"]]],[11,"poll","","",9,[[["self"]],["poll",["option","error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"read","","",10,N],[11,"read_buf","","",10,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"write","","",11,N],[11,"flush","","",11,[[["self"]],["result"]]],[11,"shutdown","","",11,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",11,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",12,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",12,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",N,N],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"]={"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",N,N],[5,"with_default","","Set the default reactor for the duration of the closure",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"handle","","Returns a reference to the reactor handle.",0,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",0,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",0,[[["self"]]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,[[["e"],["handle"]],["result"]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",1,[[["self"]],["result"]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,[[["self"],["ready"]],["result"]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,[[["self"]],["poll",["ready","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,[[["self"]],["result"]]],[11,"read","","",1,N],[11,"write","","",1,N],[11,"flush","","",1,[[["self"]],["result"]]],[11,"shutdown","","",1,[[["self"]],["poll",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Registration`.",2,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",2,[[["self"],["t"]],["result",["bool"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",2,[[["self"],["t"]],["result"]]],[11,"register_with","","Register the I/O resource with the specified reactor.",2,[[["self"],["t"],["handle"]],["result",["bool"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,[[["self"]],["poll",["ready","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",2,[[["self"]],["result",["option"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,[[["self"]],["poll",["ready","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",2,[[["self"]],["result",["option"]]]],[11,"clone","","",3,[[["self"]],["handle"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["setfallbackerror"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",6,[[],["result",["reactor"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",6,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",6,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",6,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",6,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",6,[[["self"]],["result",["background"]]]],[11,"unpark","","",6,N],[11,"park","","",6,[[["self"]],["result"]]],[11,"park_timeout","","",6,[[["self"],["duration"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"current","","Returns a handle to the current reactor.",3,[[],["handle"]]],[11,"unpark","","",3,[[["self"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",3,[[],["handle"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_service"]={"doc":"Definition of the core `Service` trait to Tokio","items":[[8,"Service","tokio_service","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Request","","Requests handled by the service.",0,N],[16,"Response","","Responses given by the service.",0,N],[16,"Error","","Errors produced by the service.",0,N],[16,"Future","","The future response value.",0,N],[10,"call","","Process the request and return the response asynchronously.",0,N],[8,"NewService","","Creates new `Service` values.",N,N],[16,"Request","","Requests handled by the service",1,N],[16,"Response","","Responses given by the service",1,N],[16,"Error","","Errors produced by the service",1,N],[16,"Instance","","The `Service` value created by this factory",1,N],[10,"new_service","","Create and return a new service value.",1,[[["self"]],["result"]]]],"paths":[[8,"Service"],[8,"NewService"]]};
searchIndex["tokio_tcp"]={"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["option","error"]]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"bind","","Create a new TCP listener associated with this event loop.",1,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,[[["self"]],["poll",["error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,[[["self"]],["poll",["error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",1,[[["tcplistener"],["handle"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",2,[[["self"]],["rawfd"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"connect","","Create a new TCP stream connected to the specified address.",2,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",2,[[["tcpstream"],["handle"]],["result",["tcpstream"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",2,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",2,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",2,[[["self"]],["poll",["ready","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",2,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",2,[[["self"]],["result",["socketaddr"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",2,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,[[["self"],["shutdown"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",2,[[["self"]],["result",["bool"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",2,[[["self"],["bool"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",2,[[["self"]],["result",["usize"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",2,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",2,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",2,[[["self"],["usize"]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",2,[[["self"]],["result",["option"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",2,[[["self"],["option",["duration"]]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",2,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",2,[[["self"],["u32"]],["result"]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",2,[[["self"]],["result",["option"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",2,[[["self"],["option",["duration"]]],["result"]]],[11,"read","","",2,N],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"prepare_uninitialized_buffer","","",2,N],[11,"read_buf","","",2,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",2,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",2,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["tcpstream","error"]]]]],"paths":[[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"]={"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",N,N],[3,"Builder","","Builds a thread pool with custom configuration values.",N,N],[3,"Sender","","Submit futures to the associated thread pool for execution.",N,N],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",N,N],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",N,N],[3,"Worker","","Thread worker",N,N],[3,"WorkerId","","Identifies a thread pool worker.",N,N],[5,"blocking","","Enter a blocking section of code.",N,[[["f"]],["poll",["blockingerror"]]]],[0,"park","","Thread parking utilities.",N,N],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",N,N],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `DefaultPark` instance.",0,[[],["defaultpark"]]],[11,"unpark","","",0,N],[11,"park","","",0,[[["self"]],["result"]]],[11,"park_timeout","","",0,[[["self"],["duration"]],["result"]]],[11,"unpark","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","tokio_threadpool","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",4,[[],["builder"]]],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",4,[[["self"],["usize"]],["self"]]],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",4,[[["self"],["usize"]],["self"]]],[11,"keep_alive","","Set the worker thread keep alive duration",4,[[["self"],["option",["duration"]]],["self"]]],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",4,[[["self"],["s"]],["self"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",4,[[["self"],["usize"]],["self"]]],[11,"around_worker","","Execute function `f` on each worker thread.",4,[[["self"],["f"]],["self"]]],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",4,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute function `f` before each thread stops.",4,[[["self"],["f"]],["self"]]],[11,"custom_park","","Customize the `park` instance used by each worker thread.",4,[[["self"],["f"]],["self"]]],[11,"build","","Create the configured `ThreadPool`.",4,[[["self"]],["threadpool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"spawn","","Spawn a future onto the thread pool",5,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","",5,[[["self"]],["result",["spawnerror"]]]],[11,"spawn","","",5,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"execute","","",5,[[["self"],["t"]],["result",["executeerror"]]]],[11,"clone","","",5,[[["self"]],["sender"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ThreadPool` with default values.",7,[[],["threadpool"]]],[11,"spawn","","Spawn a future onto the thread pool.",7,[[["self"],["f"]]]],[11,"sender","","Return a reference to the sender handle",7,[[["self"]],["sender"]]],[11,"sender_mut","","Return a mutable reference to the sender handle",7,[[["self"]],["sender"]]],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",7,[[["self"]],["shutdown"]]],[11,"shutdown","","Shutdown the pool",7,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the pool immediately",7,[[["self"]],["shutdown"]]],[11,"drop","","",7,[[["self"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["workerid"]]],[11,"hash","","",9,N],[11,"eq","","",9,[[["self"],["workerid"]],["bool"]]],[11,"ne","","",9,[[["self"],["workerid"]],["bool"]]],[11,"id","","Returns a reference to the worker's identifier.",8,[[["self"]],["workerid"]]],[11,"run","","Run the worker",8,[[["self"]]]],[11,"drop","","",8,[[["self"]]]]],"paths":[[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"],[3,"BlockingError"],[3,"Builder"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Worker"],[3,"WorkerId"]]};
searchIndex["tokio_timer"]={"doc":"Utilities for scheduling work to happen after a period of time.","items":[[3,"Deadline","tokio_timer","Allows a given `Future` to execute until the specified deadline.",N,N],[3,"DeadlineError","","Error returned by `Deadline` future.",N,N],[3,"Delay","","A future that completes at a specified instant in time.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[5,"with_default","","Set the default timer for the duration of the closure.",N,[[["handle"],["enter"],["f"]],["r"]]],[5,"sleep","","Create a Future that completes in `duration` from now.",N,[[["duration"]],["delay"]]],[0,"clock","","A configurable source of time.",N,N],[3,"Clock","tokio_timer::clock","A handle to a source of time.",N,N],[5,"now","","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[5,"with_default","","Set the default clock for the duration of the closure.",N,[[["clock"],["enter"],["f"]],["r"]]],[11,"default","","",0,[[],["clock"]]],[11,"clone","","",0,[[["self"]],["clock"]]],[11,"new","","Return a new `Clock` instance that uses the current execution context's source of time.",0,[[],["clock"]]],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the source of time.",0,[[["t"]],["clock"]]],[11,"system","","Return a new `Clock` instance that uses `Instant::now()` as the source of time.",0,[[],["clock"]]],[11,"now","","Returns an instant corresponding to \"now\" by using the instance's source of time.",0,[[["self"]],["instant"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[8,"Now","","Returns `Instant` values representing the current instant in time.",N,N],[10,"now","","Returns an instant corresponding to \"now\".",1,[[["self"]],["instant"]]],[0,"timer","tokio_timer","Timer implementation.",N,N],[3,"Handle","tokio_timer::timer","Handle to timer instance.",N,N],[3,"SystemNow","","A handle to a source of time.",N,N],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",N,N],[3,"Turn","","Return value from the `turn` method on `Timer`.",N,N],[5,"with_default","","Set the default timer for the duration of the closure.",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["handle"]]],[11,"current","","Returns a handle to the current timer.",2,[[],["handle"]]],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",2,[[["self"],["instant"]],["delay"]]],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",2,[[["self"],["t"],["instant"]],["deadline"]]],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",2,[[["self"],["instant"],["duration"]],["interval"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",3,[[["t"]],["self"]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",3,[[["self"]],["t"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",3,[[["self"]],["t"]]],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",3,[[["t"],["n"]],["self"]]],[11,"handle","","Returns a handle to the timer.",3,[[["self"]],["handle"]]],[11,"turn","","Performs one iteration of the timer loop.",3,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"default","","",3,[[],["self"]]],[11,"unpark","","",3,N],[11,"park","","",3,[[["self"]],["result"]]],[11,"park_timeout","","",3,[[["self"],["duration"]],["result"]]],[11,"drop","","",3,[[["self"]]]],[11,"fmt","tokio_timer","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",5,[[["t"],["instant"]],["deadline"]]],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",5,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",5,[[["self"]],["t"]]],[11,"into_inner","","Consumes this deadline, returning the underlying future.",5,[[["self"]],["t"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",6,[[["t"]],["deadlineerror"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",6,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",6,[[["self"]],["option"]]],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",6,[[],["deadlineerror"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",6,[[["self"]],["bool"]]],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",6,[[["error"]],["deadlineerror"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",6,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",6,[[["self"]],["option",["error"]]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",7,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",7,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",7,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",7,[[["self"],["instant"]]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"shutdown","","Create an error representing a shutdown timer.",8,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",8,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",8,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",8,[[["self"]],["bool"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",9,[[["instant"],["duration"]],["interval"]]],[11,"poll","","",9,[[["self"]],["poll",["option"]]]]],"paths":[[3,"Clock"],[8,"Now"],[3,"Handle"],[3,"Timer"],[3,"Turn"],[3,"Deadline"],[3,"DeadlineError"],[3,"Delay"],[3,"Error"],[3,"Interval"]]};
searchIndex["tokio_tls"]={"doc":"Async TLS streams","items":[[3,"TlsStream","tokio_tls","A wrapper around an underlying raw stream which implements the TLS or SSL protocol.",N,N],[3,"ConnectAsync","","Future returned from `TlsConnectorExt::connect_async` which will resolve once the connection handshake has finished.",N,N],[3,"AcceptAsync","","Future returned from `TlsAcceptorExt::accept_async` which will resolve once the accept handshake has finished.",N,N],[8,"TlsConnectorExt","","Extension trait for the `TlsConnector` type in the `native_tls` crate.",N,N],[10,"connect_async","","Connects the provided stream with this connector, assuming the provided domain.",0,[[["self"],["str"],["s"]],["connectasync"]]],[10,"danger_connect_async_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect_async`, but does not validate the server's domain name against its certificate.",0,[[["self"],["s"]],["connectasync"]]],[8,"TlsAcceptorExt","","Extension trait for the `TlsAcceptor` type in the `native_tls` crate.",N,N],[10,"accept_async","","Accepts a new client connection with the provided stream.",1,[[["self"],["s"]],["acceptasync"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get access to the internal `native_tls::TlsStream` stream which also transitively allows access to `S`.",2,[[["self"]],["tlsstream"]]],[11,"get_mut","","Get mutable access to the internal `native_tls::TlsStream` stream which also transitively allows mutable access to `S`.",2,[[["self"]],["tlsstream"]]],[11,"read","","",2,N],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"shutdown","","",2,[[["self"]],["poll",["error"]]]],[11,"poll","","",3,[[["self"]],["poll",["tlsstream","error"]]]],[11,"poll","","",4,[[["self"]],["poll",["tlsstream","error"]]]]],"paths":[[8,"TlsConnectorExt"],[8,"TlsAcceptorExt"],[3,"TlsStream"],[3,"ConnectAsync"],[3,"AcceptAsync"]]};
searchIndex["tokio_udp"]={"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["option"]]]],[11,"start_send","","",0,N],[11,"poll_complete","","",0,[[["self"]],["poll"]]],[11,"close","","",0,[[["self"]],["poll"]]],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,[[["self"]],["udpsocket"]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,[[["udpsocket"],["handle"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,[[["self"],["socketaddr"]],["result"]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,[[["self"],["t"]],["recvdgram"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,[[["self"],["u32"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["error"]]]]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["toml_edit"]={"doc":"`toml_edit`","items":[[3,"ArrayOfTables","toml_edit","Type representing a TOML array of tables",N,N],[3,"Document","","Type representing a TOML document",N,N],[12,"root","","Root should always be `Item::Table`.",0,N],[3,"Key","","Key as part of a Key/Value Pair or a table header.",N,N],[3,"TomlError","","Type representing a TOML parse error",N,N],[3,"Table","","Type representing a TOML non-inline table",N,N],[3,"Array","","Type representing a TOML array, payload of the `Value::Array` variant's value",N,N],[3,"InlineTable","","Type representing a TOML inline table, payload of the `Value::InlineTable` variant",N,N],[4,"Item","","Type representing either a value, a table, an array of tables, or none.",N,N],[13,"None","","Type representing none.",1,N],[13,"Value","","Type representing value.",1,N],[13,"Table","","Type representing table.",1,N],[13,"ArrayOfTables","","Type representing array of tables.",1,N],[4,"Value","","Representation of a TOML Value (as part of a Key/Value Pair).",N,N],[13,"Integer","","A 64-bit integer value.",2,N],[13,"String","","A string value.",2,N],[13,"Float","","A 64-bit float value.",2,N],[13,"DateTime","","A Date-Time value.",2,N],[13,"Boolean","","A boolean value.",2,N],[13,"Array","","An inline array of values.",2,N],[13,"InlineTable","","An inline table of key/value pairs.",2,N],[5,"array","","Returns an empty array of tables.",N,[[],["item"]]],[5,"table","","Returns an empty table.",N,[[],["item"]]],[5,"value","","Returns a formatted value.",N,[[["v"]],["item"]]],[11,"clone","","",3,[[["self"]],["arrayoftables"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["arrayoftables"]]],[11,"new","","Creates an empty array of tables.",3,[[],["self"]]],[11,"iter","","Returns an iterator over tables.",3,[[["self"]],["box",["iterator"]]]],[11,"get","","Returns an optional reference to the table.",3,[[["self"],["usize"]],["option",["table"]]]],[11,"get_mut","","Returns an optional mutable reference to the table.",3,[[["self"],["usize"]],["option",["table"]]]],[11,"append","","Appends a table to the array.",3,[[["self"],["table"]],["table"]]],[11,"remove","","Removes a table with the given index.",3,[[["self"],["usize"]]]],[11,"clear","","Removes all the tables.",3,[[["self"]]]],[11,"len","","Returns the length of the underlying Vec. To get the actual number of items use `a.iter().count()`.",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns true iff `self.len() == 0`.",3,[[["self"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["document"]]],[11,"default","","",0,[[],["self"]]],[11,"new","","Creates an empty document",0,[[],["self"]]],[11,"as_table","","Returns a reference to the root table.",0,[[["self"]],["table"]]],[11,"as_table_mut","","Returns a mutable reference to the root table.",0,[[["self"]],["table"]]],[11,"iter","","Returns an iterator over the root table.",0,[[["self"]],["iter"]]],[11,"from_str","","Parses a document from a &str",0,[[["str"]],["result"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["f64"]],["self"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"from","","",2,[[["bool"]],["self"]]],[11,"from","","",2,[[["array"]],["self"]]],[11,"from","","",2,[[["inlinetable"]],["self"]]],[11,"from_iter","","",2,[[["i"]],["self"]]],[11,"from_iter","","",2,[[["i"]],["self"]]],[11,"index","","",1,[[["self"],["i"]],["item"]]],[11,"index_mut","","",1,[[["self"],["i"]],["item"]]],[11,"index","","",6,[[["self"],["str"]],["item"]]],[11,"index_mut","","",6,[[["self"],["str"]],["item"]]],[11,"index","","",0,[[["self"],["str"]],["item"]]],[11,"index_mut","","",0,[[["self"],["str"]],["item"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["key"]],["bool"]]],[11,"ne","","",7,[[["self"],["key"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["key"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["key"]],["bool"]]],[11,"le","","",7,[[["self"],["key"]],["bool"]]],[11,"gt","","",7,[[["self"],["key"]],["bool"]]],[11,"ge","","",7,[[["self"],["key"]],["bool"]]],[11,"cmp","","",7,[[["self"],["key"]],["ordering"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["key"]]],[11,"from_str","","Tries to parse a key from a &str, if fails, tries as basic quoted key (surrounds with \"\") and then literal quoted key (surrounds with '')",7,[[["str"]],["result"]]],[11,"get","","Returns the parsed key value.",7,[[["self"]],["str"]]],[11,"raw","","Returns the key raw representation.",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["tomlerror"]]],[11,"eq","","",8,[[["self"],["tomlerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["tomlerror"]],["bool"]]],[11,"hash","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"clone","","",6,[[["self"]],["table"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"default","","",6,[[],["table"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["item"]]],[11,"default","","",1,[[],["self"]]],[11,"new","","Creates an empty table.",6,[[],["self"]]],[11,"contains_key","","Returns true iff the table contains an item with the given key.",6,[[["self"],["str"]],["bool"]]],[11,"contains_table","","Returns true iff the table contains a table with the given key.",6,[[["self"],["str"]],["bool"]]],[11,"contains_value","","Returns true iff the table contains a value with the given key.",6,[[["self"],["str"]],["bool"]]],[11,"contains_array_of_tables","","Returns true iff the table contains an array of tables with the given key.",6,[[["self"],["str"]],["bool"]]],[11,"iter","","Returns an iterator over all key/value pairs, including empty.",6,[[["self"]],["iter"]]],[11,"remove","","Removes an item given the key.",6,[[["self"],["str"]],["option",["item"]]]],[11,"sort_values","","Sorts Key/Value Pairs of the table, doesn't affect subtables or subarrays.",6,[[["self"]]]],[11,"len","","Returns the number of non-empty items in the table.",6,[[["self"]],["usize"]]],[11,"values_len","","Returns the number of key/value pairs in the table.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true iff the table is empty.",6,[[["self"]],["bool"]]],[11,"entry","","Given the `key`, return a mutable reference to the value. If there is no entry associated with the given key in the table, a `Item::None` value will be inserted.",6,[[["self"],["str"]],["item"]]],[11,"get","","Returns an optional reference to an item given the key.",6,[[["self"],["str"]],["option",["item"]]]],[11,"set_implicit","","If a table has no key/value pairs and implicit, it will not be displayed.",6,[[["self"],["bool"]]]],[11,"or_insert","","Sets `self` to the given item iff `self` is none and returns a mutable reference to `self`.",1,[[["self"],["item"]],["item"]]],[11,"as_value","","Casts `self` to value.",1,[[["self"]],["option",["value"]]]],[11,"as_table","","Casts `self` to table.",1,[[["self"]],["option",["table"]]]],[11,"as_array_of_tables","","Casts `self` to array of tables.",1,[[["self"]],["option",["arrayoftables"]]]],[11,"as_value_mut","","Casts `self` to mutable value.",1,[[["self"]],["option",["value"]]]],[11,"as_table_mut","","Casts `self` to mutable table.",1,[[["self"]],["option",["table"]]]],[11,"as_array_of_tables_mut","","Casts `self` to mutable array of tables.",1,[[["self"]],["option",["arrayoftables"]]]],[11,"is_value","","Returns true iff `self` is a value.",1,[[["self"]],["bool"]]],[11,"is_table","","Returns true iff `self` is a table.",1,[[["self"]],["bool"]]],[11,"is_array_of_tables","","Returns true iff `self` is an array of tables.",1,[[["self"]],["bool"]]],[11,"is_none","","Returns true iff `self` is `None`.",1,[[["self"]],["bool"]]],[11,"as_integer","","Casts `self` to integer.",1,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Returns true iff `self` is an integer.",1,[[["self"]],["bool"]]],[11,"as_float","","Casts `self` to float.",1,[[["self"]],["option",["f64"]]]],[11,"is_float","","Returns true iff `self` is a float.",1,[[["self"]],["bool"]]],[11,"as_bool","","Casts `self` to boolean.",1,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Returns true iff `self` is a boolean.",1,[[["self"]],["bool"]]],[11,"as_str","","Casts `self` to str.",1,[[["self"]],["option",["str"]]]],[11,"is_str","","Returns true iff `self` is a string.",1,[[["self"]],["bool"]]],[11,"as_date_time","","Casts `self` to date-time.",1,[[["self"]],["option",["datetime"]]]],[11,"is_date_time","","Returns true iff `self` is a date-time.",1,[[["self"]],["bool"]]],[11,"as_array","","Casts `self` to array.",1,[[["self"]],["option",["array"]]]],[11,"as_array_mut","","Casts `self` to mutable array.",1,[[["self"]],["option",["array"]]]],[11,"is_array","","Returns true iff `self` is an array.",1,[[["self"]],["bool"]]],[11,"as_inline_table","","Casts `self` to inline table.",1,[[["self"]],["option",["inlinetable"]]]],[11,"as_inline_table_mut","","Casts `self` to mutable inline table.",1,[[["self"]],["option",["inlinetable"]]]],[11,"is_inline_table","","Returns true iff `self` is an inline table.",1,[[["self"]],["bool"]]],[11,"as_table_like","","Casts `self` to either a table or an inline table.",1,[[["self"]],["option",["tablelike"]]]],[11,"is_table_like","","Returns true iff `self` is either a table, or an inline table.",1,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over all subitems, including `Item::None`.",6,[[["self"]],["iter"]]],[11,"get","","",6,[[["self"],["str"]],["option",["item"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["value"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["array"]]],[11,"clone","","",4,[[["self"]],["array"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["inlinetable"]]],[11,"clone","","",5,[[["self"]],["inlinetable"]]],[11,"len","","Returns the length of the underlying Vec. To get the actual number of items use `a.iter().count()`.",4,[[["self"]],["usize"]]],[11,"is_empty","","Return true iff `self.len() == 0`.",4,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over all values.",4,[[["self"]],["box",["iterator"]]]],[11,"push","","Appends a new value.",4,[[["self"],["v"]],["bool"]]],[11,"get","","Return an optional reference to the value at the given index.",4,[[["self"],["usize"]],["option",["value"]]]],[11,"remove","","Removes the value at the given index.",4,[[["self"],["usize"]],["value"]]],[11,"fmt","","Auto formats the array.",4,[[["self"]]]],[11,"len","","Returns the number of key/value pairs.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns true iff the table is empty.",5,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over key/value pairs.",5,[[["self"]],["box",["iterator"]]]],[11,"sort","","Sorts the key/value pairs by key.",5,[[["self"]]]],[11,"contains_key","","Returns true iff the table contains given key.",5,[[["self"],["str"]],["bool"]]],[11,"merge_into","","Merges the key/value pairs into the `other` table leaving `self` empty.",5,[[["self"],["inlinetable"]]]],[11,"get_or_insert","","Inserts a key/value pair if the table does not contain the key. Returns a mutable reference to the corresponding value.",5,[[["self"],["str"],["v"]],["value"]]],[11,"fmt","","Auto formats the table.",5,[[["self"]]]],[11,"remove","","Removes a key/value pair given the key.",5,[[["self"],["str"]],["option",["value"]]]],[11,"get","","Return an optional reference to the value at the given the key.",5,[[["self"],["str"]],["option",["value"]]]],[11,"get_mut","","Return an optional mutable reference to the value at the given the key.",5,[[["self"],["str"]],["option",["value"]]]],[11,"iter","","",5,[[["self"]],["iter"]]],[11,"get","","",5,[[["self"],["str"]],["option",["item"]]]],[11,"as_integer","","Casts `self` to integer.",2,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Returns true iff `self` is an integer.",2,[[["self"]],["bool"]]],[11,"as_float","","Casts `self` to float.",2,[[["self"]],["option",["f64"]]]],[11,"is_float","","Returns true iff `self` is a float.",2,[[["self"]],["bool"]]],[11,"as_bool","","Casts `self` to boolean.",2,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Returns true iff `self` is a boolean.",2,[[["self"]],["bool"]]],[11,"as_str","","Casts `self` to str.",2,[[["self"]],["option",["str"]]]],[11,"is_str","","Returns true iff `self` is a string.",2,[[["self"]],["bool"]]],[11,"as_date_time","","Casts `self` to date-time.",2,[[["self"]],["option",["datetime"]]]],[11,"is_date_time","","Returns true iff `self` is a date-time.",2,[[["self"]],["bool"]]],[11,"as_array","","Casts `self` to array.",2,[[["self"]],["option",["array"]]]],[11,"as_array_mut","","Casts `self` to mutable array.",2,[[["self"]],["option",["array"]]]],[11,"is_array","","Returns true iff `self` is an array.",2,[[["self"]],["bool"]]],[11,"as_inline_table","","Casts `self` to inline table.",2,[[["self"]],["option",["inlinetable"]]]],[11,"as_inline_table_mut","","Casts `self` to mutable inline table.",2,[[["self"]],["option",["inlinetable"]]]],[11,"is_inline_table","","Returns true iff `self` is an inline table.",2,[[["self"]],["bool"]]],[11,"from_str","","Parses a value from a &str",2,[[["str"]],["result"]]],[6,"Iter","","An iterator type over `Table`'s key/value pairs.",N,N],[8,"TableLike","","This trait represents either a `Table`, or an `InlineTable`.",N,N],[10,"iter","","Returns an iterator over key/value pairs.",9,[[["self"]],["iter"]]],[11,"len","","Returns the number of nonempty items.",9,[[["self"]],["usize"]]],[11,"is_empty","","Returns true iff the table is empty.",9,[[["self"]],["bool"]]],[10,"get","","Returns an optional reference to an item given the key.",9,[[["self"],["str"]],["option",["item"]]]],[11,"len","","Returns the number of nonempty items.",9,[[["self"]],["usize"]]],[11,"is_empty","","Returns true iff the table is empty.",9,[[["self"]],["bool"]]]],"paths":[[3,"Document"],[4,"Item"],[4,"Value"],[3,"ArrayOfTables"],[3,"Array"],[3,"InlineTable"],[3,"Table"],[3,"Key"],[3,"TomlError"],[8,"TableLike"]]};
searchIndex["try_lock"]={"doc":"A light-weight lock guarded by an atomic boolean.","items":[[3,"TryLock","try_lock","A light-weight lock guarded by an atomic boolean.",N,N],[3,"Locked","","A locked value acquired from a `TryLock`.",N,N],[11,"new","","Create a `TryLock` around the value.",0,[[["t"]],["trylock"]]],[11,"try_lock","","Try to acquire the lock of this value.",0,[[["self"]],["option",["locked"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"TryLock"],[3,"Locked"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicase"]={"doc":"UniCase","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",N,N],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",N,N],[5,"eq","","Compare two string-like types for case-less equality, using unicode folding.",N,[[["s"],["s"]],["bool"]]],[5,"eq_ascii","","Compare two string-like types for case-less equality, ignoring ASCII case.",N,[[["s"],["s"]],["bool"]]],[11,"new","","",0,[[["s"]],["ascii"]]],[11,"deref","","",0,[[["self"]],["s"]]],[11,"deref_mut","","",0,[[["self"]],["s"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["s2"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result",["ascii"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"clone","","",1,[[["self"]],["unicase"]]],[11,"clone","","",0,[[["self"]],["ascii"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `UniCase`.",1,[[["s"]],["unicase"]]],[11,"unicode","","Creates a new `UniCase`, skipping the ASCII check.",1,[[["s"]],["unicase"]]],[11,"deref","","",1,[[["self"]],["s"]]],[11,"deref_mut","","",1,[[["self"]],["s"]]],[11,"as_ref","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["unicase"]],["bool"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"into","","",1,[[["self"]],["str"]]],[11,"into","","",1,[[["self"]],["string"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["unicase"]]]]],"paths":[[3,"Ascii"],[3,"UniCase"]]};
searchIndex["unicode_bidi"]={"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",N,N],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,N],[12,"level","","The paragraph embedding level.",0,N],[3,"InitialInfo","","Initial bidi information of the text.",N,N],[12,"text","","The text",1,N],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,N],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,N],[3,"BidiInfo","","Bidi information of the text.",N,N],[12,"text","","The text",2,N],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,N],[12,"levels","","The directional embedding level of each byte in the text.",2,N],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,N],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",N,N],[13,"AL","","",3,N],[13,"AN","","",3,N],[13,"B","","",3,N],[13,"BN","","",3,N],[13,"CS","","",3,N],[13,"EN","","",3,N],[13,"ES","","",3,N],[13,"ET","","",3,N],[13,"FSI","","",3,N],[13,"L","","",3,N],[13,"LRE","","",3,N],[13,"LRI","","",3,N],[13,"LRO","","",3,N],[13,"NSM","","",3,N],[13,"ON","","",3,N],[13,"PDF","","",3,N],[13,"PDI","","",3,N],[13,"R","","",3,N],[13,"RLE","","",3,N],[13,"RLI","","",3,N],[13,"RLO","","",3,N],[13,"S","","",3,N],[13,"WS","","",3,N],[5,"bidi_class","","Find the `BidiClass` of a single char.",N,[[["char"]],["bidiclass"]]],[0,"deprecated","","This module holds deprecated assets only.",N,N],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",N,N],[0,"format_chars","unicode_bidi","Directional Formatting Characters",N,N],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",N,N],[17,"LRM","","LEFT-TO-RIGHT MARK",N,N],[17,"RLM","","RIGHT-TO-LEFT MARK",N,N],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",N,N],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",N,N],[17,"FSI","","FIRST STRONG ISOLATE",N,N],[17,"PDI","","POP DIRECTIONAL ISOLATE",N,N],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",N,N],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",N,N],[17,"PDF","","POP DIRECTIONAL FORMATTING",N,N],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",N,N],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",N,N],[0,"level","unicode_bidi","Bidi Embedding Level",N,N],[3,"Level","unicode_bidi::level","Embedding Level",N,N],[4,"Error","","Errors that can occur on Level creation or mutation",N,N],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,N],[5,"has_rtl","","If levels has any RTL (odd) level",N,N],[17,"LTR_LEVEL","","",N,N],[17,"RTL_LEVEL","","",N,N],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",N,N],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",N,N],[11,"clone","","",5,[[["self"]],["level"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",5,[[["self"],["level"]],["ordering"]]],[11,"eq","","",5,[[["self"],["level"]],["bool"]]],[11,"ne","","",5,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["level"]],["bool"]]],[11,"le","","",5,[[["self"],["level"]],["bool"]]],[11,"gt","","",5,[[["self"],["level"]],["bool"]]],[11,"ge","","",5,[[["self"],["level"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"ltr","","New LTR level with smallest number value (0).",5,[[],["level"]]],[11,"rtl","","New RTL level with smallest number value (1).",5,[[],["level"]]],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,[[],["u8"]]],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,[[],["u8"]]],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,[[["u8"]],["result",["level","error"]]]],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,[[["u8"]],["result",["level","error"]]]],[11,"number","","The level number.",5,[[["self"]],["u8"]]],[11,"is_ltr","","If this level is left-to-right.",5,[[["self"]],["bool"]]],[11,"is_rtl","","If this level is right-to-left.",5,[[["self"]],["bool"]]],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,[[["self"]],["result",["level","error"]]]],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,[[["self"]],["bidiclass"]]],[11,"vec","","",5,N],[11,"into","","Convert to the level number",5,[[["self"]],["u8"]]],[11,"from","","Create level by number",5,[[["u8"]],["level"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["string"]],["bool"]]],[11,"clone","unicode_bidi","",3,[[["self"]],["bidiclass"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["bidiclass"]],["bool"]]],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",N,N],[17,"UNICODE_VERSION","","The Unicode version of data",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"ne","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,[[["str"],["option",["level"]]],["initialinfo"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,[[["str"],["option",["level"]]],["bidiinfo"]]],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["cow",["str"]]]],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,N],[11,"has_rtl","","If processed text has any computed RTL levels",2,[[["self"]],["bool"]]]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"]={"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",N,N],[3,"Recompositions","","External iterator for a string recomposition's characters.",N,N],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",N,N],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",N,N],[13,"Yes","","The text is definitely normalized.",0,N],[13,"No","","The text is definitely not normalized.",0,N],[13,"Maybe","","The text may be normalized.",0,N],[5,"is_nfc","","Authoritatively check if a string is in NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",N,[[["i"]],["isnormalized"]]],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd","","Authoritatively check if a string is in NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",N,[[["i"]],["isnormalized"]]],[11,"clone","","",1,[[["self"]],["decompositions"]]],[11,"next","","",1,[[["self"]],["option",["char"]]]],[11,"size_hint","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["recompositions"]]],[11,"next","","",2,[[["self"]],["option",["char"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["isnormalized"]],["bool"]]],[11,"next","","",3,[[["self"]],["option",["char"]]]],[0,"char","","Methods for composing and decomposing characters.",N,N],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",N,[[["char"],["char"]],["option",["char"]]]],[5,"canonical_combining_class","","",N,[[["char"]],["u8"]]],[5,"is_combining_mark","","",N,[[["char"]],["bool"]]],[17,"UNICODE_VERSION","unicode_normalization","",N,N],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",N,N],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,[[["self"]],["streamsafe"]]]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_width"]={"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",N,N],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",N,N],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",N,N],[10,"width","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"]={"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",N,N],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",N,N],[12,"host","","",0,N],[12,"port","","",0,N],[3,"SocketAddrs","","Socket addresses for an URL.",N,N],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",N,N],[3,"Url","","A parsed URL record.",N,N],[3,"ParseOptions","","Full configuration for the URL parser.",N,N],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",N,N],[4,"Origin","","The origin of an URL",N,N],[13,"Opaque","","A globally unique identifier",1,N],[13,"Tuple","","Consists of the URL's scheme, host and port",1,N],[4,"Host","","The host name of an URL.",N,N],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,N],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,N],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,N],[4,"ParseError","","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",3,N],[13,"IdnaError","","",3,N],[13,"InvalidPort","","",3,N],[13,"InvalidIpv4Address","","",3,N],[13,"InvalidIpv6Address","","",3,N],[13,"InvalidDomainCharacter","","",3,N],[13,"RelativeUrlWithoutBase","","",3,N],[13,"RelativeUrlWithCannotBeABaseBase","","",3,N],[13,"SetHostOnCannotBeABaseUrl","","",3,N],[13,"Overflow","","",3,N],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",N,N],[13,"Backslash","","",4,N],[13,"C0SpaceIgnored","","",4,N],[13,"EmbeddedCredentials","","",4,N],[13,"ExpectedDoubleSlash","","",4,N],[13,"ExpectedFileDoubleSlash","","",4,N],[13,"FileWithHostAndWindowsDrive","","",4,N],[13,"NonUrlCodePoint","","",4,N],[13,"NullInFragment","","",4,N],[13,"PercentDecode","","",4,N],[13,"TabOrNewlineIgnored","","",4,N],[13,"UnencodedAtSign","","",4,N],[4,"Position","","Indicates a position within a URL based on its components.",N,N],[13,"BeforeScheme","","",5,N],[13,"AfterScheme","","",5,N],[13,"BeforeUsername","","",5,N],[13,"AfterUsername","","",5,N],[13,"BeforePassword","","",5,N],[13,"AfterPassword","","",5,N],[13,"BeforeHost","","",5,N],[13,"AfterHost","","",5,N],[13,"BeforePort","","",5,N],[13,"AfterPort","","",5,N],[13,"BeforePath","","",5,N],[13,"AfterPath","","",5,N],[13,"BeforeQuery","","",5,N],[13,"AfterQuery","","",5,N],[13,"BeforeFragment","","",5,N],[13,"AfterFragment","","",5,N],[11,"clone","","",2,[[["self"]],["host"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["host"]],["bool"]]],[11,"ne","","",2,[[["self"],["host"]],["bool"]]],[11,"cmp","","",2,[[["self"],["host"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["host"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["host"]],["bool"]]],[11,"le","","",2,[[["self"],["host"]],["bool"]]],[11,"gt","","",2,[[["self"],["host"]],["bool"]]],[11,"ge","","",2,[[["self"],["host"]],["bool"]]],[11,"hash","","",2,N],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,[[["self"]],["host",["string"]]]],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,[[["str"]],["result",["parseerror"]]]],[11,"parse_opaque","","",2,[[["str"]],["result",["parseerror"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["hostandport"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,[[["self"]],["hostandport",["string"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_socket_addrs","","",0,[[["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["socketaddr"]]]],[11,"eq","","",1,[[["self"],["origin"]],["bool"]]],[11,"ne","","",1,[[["self"],["origin"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["origin"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,[[],["origin"]]],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,[[["self"]],["bool"]]],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"eq","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"ne","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["opaqueorigin"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"drop","","",8,[[["self"]]]],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,[[["self"]],["self"]]],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,[[["self"]],["self"]]],[11,"pop","","Remove the last segment of this URL’s path.",8,[[["self"]],["self"]]],[11,"push","","Append the given segment at the end of this URL’s path.",8,[[["self"],["str"]],["self"]]],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,[[["self"],["i"]],["self"]]],[11,"eq","","",3,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",3,[[["self"]],["parseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["errors"]],["parseerror"]]],[11,"eq","","",4,[[["self"],["syntaxviolation"]],["bool"]]],[11,"clone","","",4,[[["self"]],["syntaxviolation"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"index","","",9,[[["self"],["rangefull"]],["str"]]],[11,"index","","",9,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["range",["position"]]],["str"]]],[11,"clone","","",5,[[["self"]],["position"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",N,N],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",N,N],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",N,N],[3,"ByteSerialize","","Return value of `byte_serialize()`.",N,N],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",N,N],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",N,N],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",N,N],[8,"Target","","",N,N],[10,"as_mut_string","","",10,[[["self"]],["string"]]],[10,"finish","","",10,N],[16,"Finished","","",10,N],[11,"clone","","",11,[[["self"]],["parse"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,[[["self"]],["parseintoowned"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option",["str"]]]],[11,"size_hint","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"as_mut_string","url","",15,[[["self"]],["string"]]],[11,"finish","","",15,[[["self"]],["url"]]],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,[[["t"]],["self"]]],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,[[["t"],["usize"]],["self"]]],[11,"clear","","Remove any existing name/value pair.",14,[[["self"]],["self"]]],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,[[["self"],["f"]],["self"]]],[11,"append_pair","","Serialize and append a name/value pair.",14,[[["self"],["str"],["str"]],["self"]]],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,[[["self"],["i"]],["self"]]],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,N],[11,"clone","url","",9,[[["self"]],["url"]]],[11,"clone","","",16,[[["self"]],["parseoptions"]]],[11,"base_url","","Change the base URL",16,[[["self"],["option",["url"]]],["self"]]],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"parse","","Parse an URL string with the configuration so far.",16,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"parse","","Parse an absolute URL from a string.",9,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",9,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",9,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",9,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,[[["self"],["f"]],["result",["hostandport"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",9,[[["self"],["option",["str"]]]]],[11,"set_query","","Change this URL’s query string.",9,[[["self"],["option",["str"]]]]],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",9,[[["self"],["str"]]]],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",9,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",9,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",9,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",9,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",9,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,[[["self"]],["result",["pathbuf"]]]],[11,"to_socket_addrs","","",9,[[["self"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"cmp","","",9,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"as_ref","","",9,[[["self"]],["str"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"drop","","",15,[[["self"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"]={"doc":"Generate and parse UUIDs.","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",N,N],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",N,N],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",N,N],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",N,N],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",N,N],[13,"Mac","","Version 1: MAC address",0,N],[13,"Dce","","Version 2: DCE Security",0,N],[13,"Md5","","Version 3: MD5 hash",0,N],[13,"Random","","Version 4: Random",0,N],[13,"Sha1","","Version 5: SHA-1 hash",0,N],[4,"UuidVariant","","The reserved variants of UUIDs.",N,N],[13,"NCS","","Reserved by the NCS for backward compatibility",1,N],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,N],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,N],[13,"Future","","Reserved for future expansion",1,N],[4,"ParseError","","Error details for string parsing failures.",N,N],[13,"InvalidLength","","",2,N],[13,"InvalidCharacter","","",2,N],[13,"InvalidGroups","","",2,N],[13,"InvalidGroupLength","","",2,N],[0,"prelude","","The [`uuid`] prelude.",N,N],[3,"Uuid","uuid::prelude","A Universally Unique Identifier (UUID).",N,N],[4,"UuidVariant","","The reserved variants of UUIDs.",N,N],[13,"NCS","","Reserved by the NCS for backward compatibility",1,N],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,N],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,N],[13,"Future","","Reserved for future expansion",1,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",3,[[["str"]],["result",["uuid","parseerror"]]]],[11,"default","","",3,[[],["self"]]],[11,"description","uuid","",2,[[["self"]],["str"]]],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",N,N],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",N,N],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",N,N],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",N,N],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["uuidversion"]],["bool"]]],[11,"clone","","",0,[[["self"]],["uuidversion"]]],[11,"clone","uuid::prelude","",1,[[["self"]],["uuidvariant"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["uuidvariant"]],["bool"]]],[11,"clone","","",3,[[["self"]],["uuid"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["uuid"]],["ordering"]]],[11,"eq","","",3,[[["self"],["uuid"]],["bool"]]],[11,"ne","","",3,[[["self"],["uuid"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["uuid"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["uuid"]],["bool"]]],[11,"le","","",3,[[["self"],["uuid"]],["bool"]]],[11,"gt","","",3,[[["self"],["uuid"]],["bool"]]],[11,"ge","","",3,[[["self"],["uuid"]],["bool"]]],[11,"eq","uuid","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"nil","uuid::prelude","The 'nil UUID'.",3,[[],["uuid"]]],[11,"new","","Creates a new `Uuid`.",3,[[["uuidversion"]],["option",["uuid"]]]],[11,"new_v4","","Creates a random `Uuid`.",3,[[],["uuid"]]],[11,"from_fields","","Creates a `Uuid` from four field values.",3,N],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,N],[11,"from_uuid_bytes","","Creates a `Uuid` using the supplied bytes.",3,[[["uuidbytes"]],["uuid"]]],[11,"from_random_bytes","","Creates a v4 Uuid from random bytes (e.g. bytes supplied from `Rand` crate)",3,N],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,[[["self"]],["option",["uuidvariant"]]]],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,[[["self"]],["usize"]]],[11,"get_version","","Returns the version of the `Uuid`.",3,[[["self"]],["option",["uuidversion"]]]],[11,"as_fields","","Returns the four field values of the UUID.",3,N],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",3,N],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,[[["self"]],["simple"]]],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,[[["self"]],["hyphenated"]]],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,[[["self"]],["urn"]]],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and counter portion of a V1 UUID.  If the supplied UUID is not V1, this will return None",3,[[["self"]],["option"]]],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,[[["str"]],["result",["uuid","parseerror"]]]],[11,"is_nil","","Tests if the UUID is nil",3,[[["self"]],["bool"]]],[11,"fmt","uuid","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["want"]={"doc":"A Futures channel-like utility to signal when a value is wanted.","items":[[3,"Giver","want","An entity that gives a value when wanted.",N,N],[3,"Taker","","An entity that wants a value.",N,N],[3,"SharedGiver","","A cloneable `Giver`.",N,N],[3,"Closed","","The `Taker` has canceled its interest in a value.",N,N],[5,"new","","Create a new `want` channel.",N,N],[11,"clone","","",0,[[["self"]],["sharedgiver"]]],[11,"poll_want","","Poll whether the `Taker` has registered interest in another value.",1,[[["self"]],["poll",["closed"]]]],[11,"give","","Mark the state as idle, if the Taker currently is wanting.",1,[[["self"]],["bool"]]],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",1,[[["self"]],["bool"]]],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",1,[[["self"]],["bool"]]],[11,"shared","","Converts this into a `SharedGiver`.",1,[[["self"]],["sharedgiver"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",0,[[["self"]],["bool"]]],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",0,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cancel","","Signal to the `Giver` that the want is canceled.",2,[[["self"]]]],[11,"want","","Signal to the `Giver` that a value is wanted.",2,[[["self"]]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"SharedGiver"],[3,"Giver"],[3,"Taker"],[3,"Closed"]]};
initSearch(searchIndex);
